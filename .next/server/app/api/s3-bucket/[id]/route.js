"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/s3-bucket/[id]/route";
exports.ids = ["app/api/s3-bucket/[id]/route"];
exports.modules = {

/***/ "@aws-sdk/client-s3":
/*!*************************************!*\
  !*** external "@aws-sdk/client-s3" ***!
  \*************************************/
/***/ ((module) => {

module.exports = require("@aws-sdk/client-s3");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "http2":
/*!************************!*\
  !*** external "http2" ***!
  \************************/
/***/ ((module) => {

module.exports = require("http2");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fs3-bucket%2F%5Bid%5D%2Froute&page=%2Fapi%2Fs3-bucket%2F%5Bid%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fs3-bucket%2F%5Bid%5D%2Froute.ts&appDir=%2FUsers%2FVlad%2FDocuments%2Fprojects%2Ffood-blog%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2FVlad%2FDocuments%2Fprojects%2Ffood-blog&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fs3-bucket%2F%5Bid%5D%2Froute&page=%2Fapi%2Fs3-bucket%2F%5Bid%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fs3-bucket%2F%5Bid%5D%2Froute.ts&appDir=%2FUsers%2FVlad%2FDocuments%2Fprojects%2Ffood-blog%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2FVlad%2FDocuments%2Fprojects%2Ffood-blog&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_node_polyfill_headers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/node-polyfill-headers */ \"(rsc)/./node_modules/next/dist/server/node-polyfill-headers.js\");\n/* harmony import */ var next_dist_server_node_polyfill_headers__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_node_polyfill_headers__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _Users_Vlad_Documents_projects_food_blog_app_api_s3_bucket_id_route_ts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app/api/s3-bucket/[id]/route.ts */ \"(rsc)/./app/api/s3-bucket/[id]/route.ts\");\n\n    \n\n    \n\n    \n\n    const options = {\"definition\":{\"kind\":\"APP_ROUTE\",\"page\":\"/api/s3-bucket/[id]/route\",\"pathname\":\"/api/s3-bucket/[id]\",\"filename\":\"route\",\"bundlePath\":\"app/api/s3-bucket/[id]/route\"},\"resolvedPagePath\":\"/Users/Vlad/Documents/projects/food-blog/app/api/s3-bucket/[id]/route.ts\",\"nextConfigOutput\":\"\"}\n    const routeModule = new (next_dist_server_future_route_modules_app_route_module__WEBPACK_IMPORTED_MODULE_1___default())({\n      ...options,\n      userland: _Users_Vlad_Documents_projects_food_blog_app_api_s3_bucket_id_route_ts__WEBPACK_IMPORTED_MODULE_2__,\n    })\n\n    // Pull out the exports that we need to expose from the module. This should\n    // be eliminated when we've moved the other routes to the new format. These\n    // are used to hook into the route.\n    const {\n      requestAsyncStorage,\n      staticGenerationAsyncStorage,\n      serverHooks,\n      headerHooks,\n      staticGenerationBailout\n    } = routeModule\n\n    const originalPathname = \"/api/s3-bucket/[id]/route\"\n\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZzMy1idWNrZXQlMkYlNUJpZCU1RCUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGczMtYnVja2V0JTJGJTVCaWQlNUQlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZzMy1idWNrZXQlMkYlNUJpZCU1RCUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRlZsYWQlMkZEb2N1bWVudHMlMkZwcm9qZWN0cyUyRmZvb2QtYmxvZyUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZWbGFkJTJGRG9jdW1lbnRzJTJGcHJvamVjdHMlMkZmb29kLWJsb2cmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSxJQUFtRDs7QUFFbkQsSUFBb0Y7O0FBRXBGLElBQXdHOztBQUV4RyxxQkFBcUIsY0FBYyxzSkFBc0o7QUFDekwsNEJBQTRCLCtGQUFXO0FBQ3ZDO0FBQ0EsY0FBYztBQUNkLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7QUFFTjs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2QtYmxvZy8/ZDQ1MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICBpbXBvcnQgJ25leHQvZGlzdC9zZXJ2ZXIvbm9kZS1wb2x5ZmlsbC1oZWFkZXJzJ1xuXG4gICAgaW1wb3J0IFJvdXRlTW9kdWxlIGZyb20gJ25leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZSdcblxuICAgIGltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvVmxhZC9Eb2N1bWVudHMvcHJvamVjdHMvZm9vZC1ibG9nL2FwcC9hcGkvczMtYnVja2V0L1tpZF0vcm91dGUudHNcIlxuXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcImRlZmluaXRpb25cIjp7XCJraW5kXCI6XCJBUFBfUk9VVEVcIixcInBhZ2VcIjpcIi9hcGkvczMtYnVja2V0L1tpZF0vcm91dGVcIixcInBhdGhuYW1lXCI6XCIvYXBpL3MzLWJ1Y2tldC9baWRdXCIsXCJmaWxlbmFtZVwiOlwicm91dGVcIixcImJ1bmRsZVBhdGhcIjpcImFwcC9hcGkvczMtYnVja2V0L1tpZF0vcm91dGVcIn0sXCJyZXNvbHZlZFBhZ2VQYXRoXCI6XCIvVXNlcnMvVmxhZC9Eb2N1bWVudHMvcHJvamVjdHMvZm9vZC1ibG9nL2FwcC9hcGkvczMtYnVja2V0L1tpZF0vcm91dGUudHNcIixcIm5leHRDb25maWdPdXRwdXRcIjpcIlwifVxuICAgIGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFJvdXRlTW9kdWxlKHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICB1c2VybGFuZCxcbiAgICB9KVxuXG4gICAgLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4gICAgLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4gICAgLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbiAgICBjb25zdCB7XG4gICAgICByZXF1ZXN0QXN5bmNTdG9yYWdlLFxuICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSxcbiAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgaGVhZGVySG9va3MsXG4gICAgICBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dFxuICAgIH0gPSByb3V0ZU1vZHVsZVxuXG4gICAgY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9zMy1idWNrZXQvW2lkXS9yb3V0ZVwiXG5cbiAgICBleHBvcnQge1xuICAgICAgcm91dGVNb2R1bGUsXG4gICAgICByZXF1ZXN0QXN5bmNTdG9yYWdlLFxuICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSxcbiAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgaGVhZGVySG9va3MsXG4gICAgICBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCxcbiAgICAgIG9yaWdpbmFsUGF0aG5hbWVcbiAgICB9Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fs3-bucket%2F%5Bid%5D%2Froute&page=%2Fapi%2Fs3-bucket%2F%5Bid%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fs3-bucket%2F%5Bid%5D%2Froute.ts&appDir=%2FUsers%2FVlad%2FDocuments%2Fprojects%2Ffood-blog%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2FVlad%2FDocuments%2Fprojects%2Ffood-blog&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/s3-bucket/[id]/route.ts":
/*!*****************************************!*\
  !*** ./app/api/s3-bucket/[id]/route.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DELETE: () => (/* binding */ DELETE),\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_client_s3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/client-s3 */ \"@aws-sdk/client-s3\");\n/* harmony import */ var _aws_sdk_client_s3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_aws_sdk_client_s3__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _aws_sdk_s3_request_presigner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/s3-request-presigner */ \"(rsc)/./node_modules/@aws-sdk/s3-request-presigner/dist-cjs/index.js\");\n/* harmony import */ var _aws_sdk_s3_request_presigner__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_aws_sdk_s3_request_presigner__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nconst bucketName = process.env.MY_AWS_BUCKET_NAME;\nconst region = process.env.MY_AWS_BUCKET_REGION;\nconst accessKeyId = process.env.MY_AWS_ACCESS_KEY_ID;\nconst secretAccessKey = process.env.MY_AWS_SECRET_ACCESS_KEY;\nconst s3 = new _aws_sdk_client_s3__WEBPACK_IMPORTED_MODULE_0__.S3Client({\n    region,\n    credentials: {\n        accessKeyId,\n        secretAccessKey\n    }\n});\nasync function deleteFileFromS3(key) {\n    const params = {\n        Bucket: bucketName,\n        Key: key\n    };\n    const command = new _aws_sdk_client_s3__WEBPACK_IMPORTED_MODULE_0__.DeleteObjectCommand(params);\n    await s3.send(command);\n    return params.Key;\n}\nconst DELETE = async (req, { params })=>{\n    const fileId = params.id;\n    try {\n        if (!fileId) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].json({\n                error: \"Key is required\"\n            }, {\n                status: 400\n            });\n        }\n        const fileKey = await deleteFileFromS3(fileId);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].json({\n            fileKey\n        });\n    } catch (error) {\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].json({\n            error\n        });\n    }\n};\nconst GET = async (req, res)=>{\n    const { id } = res.params || {};\n    try {\n        if (!id) {\n            return res.status(400).json({\n                error: \"Key is required\"\n            });\n        }\n        const getObjectParams = {\n            Bucket: bucketName,\n            Key: id\n        };\n        const command = new _aws_sdk_client_s3__WEBPACK_IMPORTED_MODULE_0__.GetObjectCommand(getObjectParams);\n        const src = await (0,_aws_sdk_s3_request_presigner__WEBPACK_IMPORTED_MODULE_2__.getSignedUrl)(s3, command, {\n            expiresIn: 3600\n        });\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].json({\n            src\n        });\n    } catch (error) {\n        console.error(\"Error:\", error);\n        return res.status(500).json({\n            error: \"Internal Server Error\"\n        });\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL3MzLWJ1Y2tldC9baWRdL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFJNEI7QUFFZTtBQUNrQjtBQUU3RCxNQUFNSyxhQUFhQyxRQUFRQyxHQUFHLENBQUNDLGtCQUFrQjtBQUNqRCxNQUFNQyxTQUFTSCxRQUFRQyxHQUFHLENBQUNHLG9CQUFvQjtBQUMvQyxNQUFNQyxjQUFjTCxRQUFRQyxHQUFHLENBQUNLLG9CQUFvQjtBQUNwRCxNQUFNQyxrQkFBa0JQLFFBQVFDLEdBQUcsQ0FBQ08sd0JBQXdCO0FBUTVELE1BQU1DLEtBQUssSUFBSWYsd0RBQVFBLENBQUM7SUFDdEJTO0lBQ0FPLGFBQWE7UUFDWEw7UUFDQUU7SUFDRjtBQUNGO0FBRUEsZUFBZUksaUJBQWlCQyxHQUFXO0lBQ3pDLE1BQU1DLFNBQVM7UUFDYkMsUUFBUWY7UUFDUmdCLEtBQUtIO0lBQ1A7SUFFQSxNQUFNSSxVQUFVLElBQUlyQixtRUFBbUJBLENBQUNrQjtJQUN4QyxNQUFNSixHQUFHUSxJQUFJLENBQUNEO0lBQ2QsT0FBT0gsT0FBT0UsR0FBRztBQUNuQjtBQUVPLE1BQU1HLFNBQVMsT0FBT0MsS0FBYyxFQUFFTixNQUFNLEVBQU87SUFDeEQsTUFBTU8sU0FBU1AsT0FBT1EsRUFBRTtJQUN4QixJQUFJO1FBQ0YsSUFBSSxDQUFDRCxRQUFRO1lBQ1gsT0FBT3ZCLGtGQUFZQSxDQUFDeUIsSUFBSSxDQUFDO2dCQUFFQyxPQUFPO1lBQWtCLEdBQUc7Z0JBQUVDLFFBQVE7WUFBSTtRQUN2RTtRQUNBLE1BQU1DLFVBQVUsTUFBTWQsaUJBQWlCUztRQUN2QyxPQUFPdkIsa0ZBQVlBLENBQUN5QixJQUFJLENBQUM7WUFBRUc7UUFBUTtJQUNyQyxFQUFFLE9BQU9GLE9BQU87UUFDZCxPQUFPMUIsa0ZBQVlBLENBQUN5QixJQUFJLENBQUM7WUFBRUM7UUFBTTtJQUNuQztBQUNGLEVBQUU7QUFFSyxNQUFNRyxNQUFNLE9BQU9QLEtBQXFCUTtJQUM3QyxNQUFNLEVBQUVOLEVBQUUsRUFBRSxHQUFHTSxJQUFJZCxNQUFNLElBQUksQ0FBQztJQUU5QixJQUFJO1FBQ0YsSUFBSSxDQUFDUSxJQUFJO1lBQ1AsT0FBT00sSUFBSUgsTUFBTSxDQUFDLEtBQUtGLElBQUksQ0FBQztnQkFBRUMsT0FBTztZQUFrQjtRQUN6RDtRQUVBLE1BQU1LLGtCQUFrQjtZQUN0QmQsUUFBUWY7WUFDUmdCLEtBQUtNO1FBQ1A7UUFFQSxNQUFNTCxVQUFVLElBQUlwQixnRUFBZ0JBLENBQUNnQztRQUNyQyxNQUFNQyxNQUFNLE1BQU0vQiwyRUFBWUEsQ0FBQ1csSUFBSU8sU0FBUztZQUFFYyxXQUFXO1FBQUs7UUFFOUQsT0FBT2pDLGtGQUFZQSxDQUFDeUIsSUFBSSxDQUFDO1lBQUVPO1FBQUk7SUFDakMsRUFBRSxPQUFPTixPQUFPO1FBQ2RRLFFBQVFSLEtBQUssQ0FBQyxVQUFVQTtRQUN4QixPQUFPSSxJQUFJSCxNQUFNLENBQUMsS0FBS0YsSUFBSSxDQUFDO1lBQUVDLE9BQU87UUFBd0I7SUFDL0Q7QUFDRixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vZC1ibG9nLy4vYXBwL2FwaS9zMy1idWNrZXQvW2lkXS9yb3V0ZS50cz80ZGE4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFMzQ2xpZW50LFxuICBEZWxldGVPYmplY3RDb21tYW5kLFxuICBHZXRPYmplY3RDb21tYW5kLFxufSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LXMzXCI7XG5pbXBvcnQgeyBOZXh0QXBpUmVxdWVzdCwgTmV4dEFwaVJlc3BvbnNlIH0gZnJvbSBcIm5leHRcIjtcbmltcG9ydCB7IE5leHRSZXNwb25zZSB9IGZyb20gXCJuZXh0L3NlcnZlclwiO1xuaW1wb3J0IHsgZ2V0U2lnbmVkVXJsIH0gZnJvbSBcIkBhd3Mtc2RrL3MzLXJlcXVlc3QtcHJlc2lnbmVyXCI7XG5cbmNvbnN0IGJ1Y2tldE5hbWUgPSBwcm9jZXNzLmVudi5NWV9BV1NfQlVDS0VUX05BTUUgYXMgc3RyaW5nO1xuY29uc3QgcmVnaW9uID0gcHJvY2Vzcy5lbnYuTVlfQVdTX0JVQ0tFVF9SRUdJT04gYXMgc3RyaW5nO1xuY29uc3QgYWNjZXNzS2V5SWQgPSBwcm9jZXNzLmVudi5NWV9BV1NfQUNDRVNTX0tFWV9JRCBhcyBzdHJpbmc7XG5jb25zdCBzZWNyZXRBY2Nlc3NLZXkgPSBwcm9jZXNzLmVudi5NWV9BV1NfU0VDUkVUX0FDQ0VTU19LRVkgYXMgc3RyaW5nO1xuXG5pbnRlcmZhY2UgQ3VzdG9tQXBpUmVzcG9uc2U8VCA9IGFueT4gZXh0ZW5kcyBOZXh0QXBpUmVzcG9uc2U8VD4ge1xuICBwYXJhbXM/OiB7XG4gICAgaWQ6IHN0cmluZztcbiAgfTtcbn1cblxuY29uc3QgczMgPSBuZXcgUzNDbGllbnQoe1xuICByZWdpb24sXG4gIGNyZWRlbnRpYWxzOiB7XG4gICAgYWNjZXNzS2V5SWQsXG4gICAgc2VjcmV0QWNjZXNzS2V5LFxuICB9LFxufSk7XG5cbmFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUZpbGVGcm9tUzMoa2V5OiBzdHJpbmcpIHtcbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIEJ1Y2tldDogYnVja2V0TmFtZSxcbiAgICBLZXk6IGtleSxcbiAgfTtcblxuICBjb25zdCBjb21tYW5kID0gbmV3IERlbGV0ZU9iamVjdENvbW1hbmQocGFyYW1zKTtcbiAgYXdhaXQgczMuc2VuZChjb21tYW5kKTtcbiAgcmV0dXJuIHBhcmFtcy5LZXk7XG59XG5cbmV4cG9ydCBjb25zdCBERUxFVEUgPSBhc3luYyAocmVxOiBSZXF1ZXN0LCB7IHBhcmFtcyB9OiBhbnkpID0+IHtcbiAgY29uc3QgZmlsZUlkID0gcGFyYW1zLmlkO1xuICB0cnkge1xuICAgIGlmICghZmlsZUlkKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogXCJLZXkgaXMgcmVxdWlyZWRcIiB9LCB7IHN0YXR1czogNDAwIH0pO1xuICAgIH1cbiAgICBjb25zdCBmaWxlS2V5ID0gYXdhaXQgZGVsZXRlRmlsZUZyb21TMyhmaWxlSWQpO1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGZpbGVLZXkgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgZXJyb3IgfSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBHRVQgPSBhc3luYyAocmVxOiBOZXh0QXBpUmVxdWVzdCwgcmVzOiBDdXN0b21BcGlSZXNwb25zZSkgPT4ge1xuICBjb25zdCB7IGlkIH0gPSByZXMucGFyYW1zIHx8IHt9O1xuXG4gIHRyeSB7XG4gICAgaWYgKCFpZCkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3I6IFwiS2V5IGlzIHJlcXVpcmVkXCIgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgZ2V0T2JqZWN0UGFyYW1zID0ge1xuICAgICAgQnVja2V0OiBidWNrZXROYW1lLFxuICAgICAgS2V5OiBpZCxcbiAgICB9O1xuXG4gICAgY29uc3QgY29tbWFuZCA9IG5ldyBHZXRPYmplY3RDb21tYW5kKGdldE9iamVjdFBhcmFtcyk7XG4gICAgY29uc3Qgc3JjID0gYXdhaXQgZ2V0U2lnbmVkVXJsKHMzLCBjb21tYW5kLCB7IGV4cGlyZXNJbjogMzYwMCB9KTtcblxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IHNyYyB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3I6XCIsIGVycm9yKTtcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogXCJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3JcIiB9KTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6WyJTM0NsaWVudCIsIkRlbGV0ZU9iamVjdENvbW1hbmQiLCJHZXRPYmplY3RDb21tYW5kIiwiTmV4dFJlc3BvbnNlIiwiZ2V0U2lnbmVkVXJsIiwiYnVja2V0TmFtZSIsInByb2Nlc3MiLCJlbnYiLCJNWV9BV1NfQlVDS0VUX05BTUUiLCJyZWdpb24iLCJNWV9BV1NfQlVDS0VUX1JFR0lPTiIsImFjY2Vzc0tleUlkIiwiTVlfQVdTX0FDQ0VTU19LRVlfSUQiLCJzZWNyZXRBY2Nlc3NLZXkiLCJNWV9BV1NfU0VDUkVUX0FDQ0VTU19LRVkiLCJzMyIsImNyZWRlbnRpYWxzIiwiZGVsZXRlRmlsZUZyb21TMyIsImtleSIsInBhcmFtcyIsIkJ1Y2tldCIsIktleSIsImNvbW1hbmQiLCJzZW5kIiwiREVMRVRFIiwicmVxIiwiZmlsZUlkIiwiaWQiLCJqc29uIiwiZXJyb3IiLCJzdGF0dXMiLCJmaWxlS2V5IiwiR0VUIiwicmVzIiwiZ2V0T2JqZWN0UGFyYW1zIiwic3JjIiwiZXhwaXJlc0luIiwiY29uc29sZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./app/api/s3-bucket/[id]/route.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/@aws-sdk/middleware-sdk-s3/dist-cjs/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-sdk-s3/dist-cjs/index.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_OPTIONS: ()=>NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_OPTIONS,\n    S3ExpressIdentityCache: ()=>S3ExpressIdentityCache,\n    S3ExpressIdentityCacheEntry: ()=>S3ExpressIdentityCacheEntry,\n    S3ExpressIdentityProviderImpl: ()=>S3ExpressIdentityProviderImpl,\n    SignatureV4S3Express: ()=>SignatureV4S3Express,\n    checkContentLengthHeader: ()=>checkContentLengthHeader,\n    checkContentLengthHeaderMiddlewareOptions: ()=>checkContentLengthHeaderMiddlewareOptions,\n    getCheckContentLengthHeaderPlugin: ()=>getCheckContentLengthHeaderPlugin,\n    getRegionRedirectMiddlewarePlugin: ()=>getRegionRedirectMiddlewarePlugin,\n    getS3ExpiresMiddlewarePlugin: ()=>getS3ExpiresMiddlewarePlugin,\n    getS3ExpressPlugin: ()=>getS3ExpressPlugin,\n    getThrow200ExceptionsPlugin: ()=>getThrow200ExceptionsPlugin,\n    getValidateBucketNamePlugin: ()=>getValidateBucketNamePlugin,\n    regionRedirectEndpointMiddleware: ()=>regionRedirectEndpointMiddleware,\n    regionRedirectEndpointMiddlewareOptions: ()=>regionRedirectEndpointMiddlewareOptions,\n    regionRedirectMiddleware: ()=>regionRedirectMiddleware,\n    regionRedirectMiddlewareOptions: ()=>regionRedirectMiddlewareOptions,\n    resolveS3Config: ()=>resolveS3Config,\n    s3ExpiresMiddleware: ()=>s3ExpiresMiddleware,\n    s3ExpiresMiddlewareOptions: ()=>s3ExpiresMiddlewareOptions,\n    s3ExpressMiddleware: ()=>s3ExpressMiddleware,\n    s3ExpressMiddlewareOptions: ()=>s3ExpressMiddlewareOptions,\n    throw200ExceptionsMiddleware: ()=>throw200ExceptionsMiddleware,\n    throw200ExceptionsMiddlewareOptions: ()=>throw200ExceptionsMiddlewareOptions,\n    validateBucketNameMiddleware: ()=>validateBucketNameMiddleware,\n    validateBucketNameMiddlewareOptions: ()=>validateBucketNameMiddlewareOptions\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/check-content-length-header.ts\nvar import_protocol_http = __webpack_require__(/*! @smithy/protocol-http */ \"(rsc)/./node_modules/@smithy/protocol-http/dist-cjs/index.js\");\nvar import_smithy_client = __webpack_require__(/*! @smithy/smithy-client */ \"(rsc)/./node_modules/@smithy/smithy-client/dist-cjs/index.js\");\nvar CONTENT_LENGTH_HEADER = \"content-length\";\nfunction checkContentLengthHeader() {\n    return (next, context)=>async (args)=>{\n            var _a;\n            const { request } = args;\n            if (import_protocol_http.HttpRequest.isInstance(request)) {\n                if (!(CONTENT_LENGTH_HEADER in request.headers)) {\n                    const message = `Are you using a Stream of unknown length as the Body of a PutObject request? Consider using Upload instead from @aws-sdk/lib-storage.`;\n                    if (typeof ((_a = context == null ? void 0 : context.logger) == null ? void 0 : _a.warn) === \"function\" && !(context.logger instanceof import_smithy_client.NoOpLogger)) {\n                        context.logger.warn(message);\n                    } else {\n                        console.warn(message);\n                    }\n                }\n            }\n            return next({\n                ...args\n            });\n        };\n}\n__name(checkContentLengthHeader, \"checkContentLengthHeader\");\nvar checkContentLengthHeaderMiddlewareOptions = {\n    step: \"finalizeRequest\",\n    tags: [\n        \"CHECK_CONTENT_LENGTH_HEADER\"\n    ],\n    name: \"getCheckContentLengthHeaderPlugin\",\n    override: true\n};\nvar getCheckContentLengthHeaderPlugin = /* @__PURE__ */ __name((unused)=>({\n        applyToStack: (clientStack)=>{\n            clientStack.add(checkContentLengthHeader(), checkContentLengthHeaderMiddlewareOptions);\n        }\n    }), \"getCheckContentLengthHeaderPlugin\");\n// src/region-redirect-endpoint-middleware.ts\nvar regionRedirectEndpointMiddleware = /* @__PURE__ */ __name((config)=>{\n    return (next, context)=>async (args)=>{\n            const originalRegion = await config.region();\n            const regionProviderRef = config.region;\n            if (context.__s3RegionRedirect) {\n                config.region = async ()=>{\n                    config.region = regionProviderRef;\n                    return context.__s3RegionRedirect;\n                };\n            }\n            const result = await next(args);\n            if (context.__s3RegionRedirect) {\n                const region = await config.region();\n                if (originalRegion !== region) {\n                    throw new Error(\"Region was not restored following S3 region redirect.\");\n                }\n            }\n            return result;\n        };\n}, \"regionRedirectEndpointMiddleware\");\nvar regionRedirectEndpointMiddlewareOptions = {\n    tags: [\n        \"REGION_REDIRECT\",\n        \"S3\"\n    ],\n    name: \"regionRedirectEndpointMiddleware\",\n    override: true,\n    relation: \"before\",\n    toMiddleware: \"endpointV2Middleware\"\n};\n// src/region-redirect-middleware.ts\nfunction regionRedirectMiddleware(clientConfig) {\n    return (next, context)=>async (args)=>{\n            var _a, _b;\n            try {\n                return await next(args);\n            } catch (err) {\n                if (clientConfig.followRegionRedirects && // err.name === \"PermanentRedirect\" && --> removing the error name check, as that allows for HEAD operations (which have the 301 status code, but not the same error name) to be covered for region redirection as well\n                ((_a = err == null ? void 0 : err.$metadata) == null ? void 0 : _a.httpStatusCode) === 301) {\n                    try {\n                        const actualRegion = err.$response.headers[\"x-amz-bucket-region\"];\n                        (_b = context.logger) == null ? void 0 : _b.debug(`Redirecting from ${await clientConfig.region()} to ${actualRegion}`);\n                        context.__s3RegionRedirect = actualRegion;\n                    } catch (e) {\n                        throw new Error(\"Region redirect failed: \" + e);\n                    }\n                    return next(args);\n                } else {\n                    throw err;\n                }\n            }\n        };\n}\n__name(regionRedirectMiddleware, \"regionRedirectMiddleware\");\nvar regionRedirectMiddlewareOptions = {\n    step: \"initialize\",\n    tags: [\n        \"REGION_REDIRECT\",\n        \"S3\"\n    ],\n    name: \"regionRedirectMiddleware\",\n    override: true\n};\nvar getRegionRedirectMiddlewarePlugin = /* @__PURE__ */ __name((clientConfig)=>({\n        applyToStack: (clientStack)=>{\n            clientStack.add(regionRedirectMiddleware(clientConfig), regionRedirectMiddlewareOptions);\n            clientStack.addRelativeTo(regionRedirectEndpointMiddleware(clientConfig), regionRedirectEndpointMiddlewareOptions);\n        }\n    }), \"getRegionRedirectMiddlewarePlugin\");\n// src/s3-expires-middleware.ts\nvar s3ExpiresMiddleware = /* @__PURE__ */ __name((config)=>{\n    return (next, context)=>async (args)=>{\n            var _a;\n            const result = await next(args);\n            const { response } = result;\n            if (import_protocol_http.HttpResponse.isInstance(response)) {\n                if (response.headers.expires) {\n                    response.headers.expiresstring = response.headers.expires;\n                    try {\n                        (0, import_smithy_client.parseRfc7231DateTime)(response.headers.expires);\n                    } catch (e) {\n                        (_a = context.logger) == null ? void 0 : _a.warn(`AWS SDK Warning for ${context.clientName}::${context.commandName} response parsing (${response.headers.expires}): ${e}`);\n                        delete response.headers.expires;\n                    }\n                }\n            }\n            return result;\n        };\n}, \"s3ExpiresMiddleware\");\nvar s3ExpiresMiddlewareOptions = {\n    tags: [\n        \"S3\"\n    ],\n    name: \"s3ExpiresMiddleware\",\n    override: true,\n    relation: \"after\",\n    toMiddleware: \"deserializerMiddleware\"\n};\nvar getS3ExpiresMiddlewarePlugin = /* @__PURE__ */ __name((clientConfig)=>({\n        applyToStack: (clientStack)=>{\n            clientStack.addRelativeTo(s3ExpiresMiddleware(clientConfig), s3ExpiresMiddlewareOptions);\n        }\n    }), \"getS3ExpiresMiddlewarePlugin\");\n// src/s3-express/classes/S3ExpressIdentityCache.ts\nvar _S3ExpressIdentityCache = class _S3ExpressIdentityCache {\n    constructor(data = {}){\n        this.data = data;\n        this.lastPurgeTime = Date.now();\n    }\n    get(key) {\n        const entry = this.data[key];\n        if (!entry) {\n            return;\n        }\n        return entry;\n    }\n    set(key, entry) {\n        this.data[key] = entry;\n        return entry;\n    }\n    delete(key) {\n        delete this.data[key];\n    }\n    async purgeExpired() {\n        const now = Date.now();\n        if (this.lastPurgeTime + _S3ExpressIdentityCache.EXPIRED_CREDENTIAL_PURGE_INTERVAL_MS > now) {\n            return;\n        }\n        for(const key in this.data){\n            const entry = this.data[key];\n            if (!entry.isRefreshing) {\n                const credential = await entry.identity;\n                if (credential.expiration) {\n                    if (credential.expiration.getTime() < now) {\n                        delete this.data[key];\n                    }\n                }\n            }\n        }\n    }\n};\n__name(_S3ExpressIdentityCache, \"S3ExpressIdentityCache\");\n_S3ExpressIdentityCache.EXPIRED_CREDENTIAL_PURGE_INTERVAL_MS = 3e4;\nvar S3ExpressIdentityCache = _S3ExpressIdentityCache;\n// src/s3-express/classes/S3ExpressIdentityCacheEntry.ts\nvar _S3ExpressIdentityCacheEntry = class _S3ExpressIdentityCacheEntry {\n    /**\n   * @param identity - stored identity.\n   * @param accessed - timestamp of last access in epoch ms.\n   * @param isRefreshing - this key is currently in the process of being refreshed (background).\n   */ constructor(_identity, isRefreshing = false, accessed = Date.now()){\n        this._identity = _identity;\n        this.isRefreshing = isRefreshing;\n        this.accessed = accessed;\n    }\n    get identity() {\n        this.accessed = Date.now();\n        return this._identity;\n    }\n};\n__name(_S3ExpressIdentityCacheEntry, \"S3ExpressIdentityCacheEntry\");\nvar S3ExpressIdentityCacheEntry = _S3ExpressIdentityCacheEntry;\n// src/s3-express/classes/S3ExpressIdentityProviderImpl.ts\nvar _S3ExpressIdentityProviderImpl = class _S3ExpressIdentityProviderImpl {\n    constructor(createSessionFn, cache = new S3ExpressIdentityCache()){\n        this.createSessionFn = createSessionFn;\n        this.cache = cache;\n    }\n    async getS3ExpressIdentity(awsIdentity, identityProperties) {\n        const key = identityProperties.Bucket;\n        const { cache } = this;\n        const entry = cache.get(key);\n        if (entry) {\n            return entry.identity.then((identity)=>{\n                var _a, _b;\n                const isExpired = (((_a = identity.expiration) == null ? void 0 : _a.getTime()) ?? 0) < Date.now();\n                if (isExpired) {\n                    return cache.set(key, new S3ExpressIdentityCacheEntry(this.getIdentity(key))).identity;\n                }\n                const isExpiringSoon = (((_b = identity.expiration) == null ? void 0 : _b.getTime()) ?? 0) < Date.now() + _S3ExpressIdentityProviderImpl.REFRESH_WINDOW_MS;\n                if (isExpiringSoon && !entry.isRefreshing) {\n                    entry.isRefreshing = true;\n                    this.getIdentity(key).then((id)=>{\n                        cache.set(key, new S3ExpressIdentityCacheEntry(Promise.resolve(id)));\n                    });\n                }\n                return identity;\n            });\n        }\n        return cache.set(key, new S3ExpressIdentityCacheEntry(this.getIdentity(key))).identity;\n    }\n    async getIdentity(key) {\n        var _a, _b;\n        await this.cache.purgeExpired().catch((error)=>{\n            console.warn(\"Error while clearing expired entries in S3ExpressIdentityCache: \\n\" + error);\n        });\n        const session = await this.createSessionFn(key);\n        if (!((_a = session.Credentials) == null ? void 0 : _a.AccessKeyId) || !((_b = session.Credentials) == null ? void 0 : _b.SecretAccessKey)) {\n            throw new Error(\"s3#createSession response credential missing AccessKeyId or SecretAccessKey.\");\n        }\n        const identity = {\n            accessKeyId: session.Credentials.AccessKeyId,\n            secretAccessKey: session.Credentials.SecretAccessKey,\n            sessionToken: session.Credentials.SessionToken,\n            expiration: session.Credentials.Expiration ? new Date(session.Credentials.Expiration) : void 0\n        };\n        return identity;\n    }\n};\n__name(_S3ExpressIdentityProviderImpl, \"S3ExpressIdentityProviderImpl\");\n_S3ExpressIdentityProviderImpl.REFRESH_WINDOW_MS = 6e4;\nvar S3ExpressIdentityProviderImpl = _S3ExpressIdentityProviderImpl;\n// src/s3-express/classes/SignatureV4S3Express.ts\nvar import_signature_v4 = __webpack_require__(/*! @smithy/signature-v4 */ \"(rsc)/./node_modules/@smithy/signature-v4/dist-cjs/index.js\");\n// src/s3-express/constants.ts\nvar import_util_config_provider = __webpack_require__(/*! @smithy/util-config-provider */ \"(rsc)/./node_modules/@smithy/util-config-provider/dist-cjs/index.js\");\nvar S3_EXPRESS_BUCKET_TYPE = \"Directory\";\nvar S3_EXPRESS_BACKEND = \"S3Express\";\nvar S3_EXPRESS_AUTH_SCHEME = \"sigv4-s3express\";\nvar SESSION_TOKEN_QUERY_PARAM = \"X-Amz-S3session-Token\";\nvar SESSION_TOKEN_HEADER = SESSION_TOKEN_QUERY_PARAM.toLowerCase();\nvar NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_ENV_NAME = \"AWS_S3_DISABLE_EXPRESS_SESSION_AUTH\";\nvar NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_INI_NAME = \"s3_disable_express_session_auth\";\nvar NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_OPTIONS = {\n    environmentVariableSelector: (env)=>(0, import_util_config_provider.booleanSelector)(env, NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_ENV_NAME, import_util_config_provider.SelectorType.ENV),\n    configFileSelector: (profile)=>(0, import_util_config_provider.booleanSelector)(profile, NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_INI_NAME, import_util_config_provider.SelectorType.CONFIG),\n    default: false\n};\n// src/s3-express/classes/SignatureV4S3Express.ts\nvar _SignatureV4S3Express = class _SignatureV4S3Express extends import_signature_v4.SignatureV4 {\n    /**\n   * Signs with alternate provided credentials instead of those provided in the\n   * constructor.\n   *\n   * Additionally omits the credential sessionToken and assigns it to the\n   * alternate header field for S3 Express.\n   */ async signWithCredentials(requestToSign, credentials, options) {\n        const credentialsWithoutSessionToken = getCredentialsWithoutSessionToken(credentials);\n        requestToSign.headers[SESSION_TOKEN_HEADER] = credentials.sessionToken;\n        const privateAccess = this;\n        setSingleOverride(privateAccess, credentialsWithoutSessionToken);\n        return privateAccess.signRequest(requestToSign, options ?? {});\n    }\n    /**\n   * Similar to {@link SignatureV4S3Express#signWithCredentials} but for presigning.\n   */ async presignWithCredentials(requestToSign, credentials, options) {\n        const credentialsWithoutSessionToken = getCredentialsWithoutSessionToken(credentials);\n        delete requestToSign.headers[SESSION_TOKEN_HEADER];\n        requestToSign.headers[SESSION_TOKEN_QUERY_PARAM] = credentials.sessionToken;\n        requestToSign.query = requestToSign.query ?? {};\n        requestToSign.query[SESSION_TOKEN_QUERY_PARAM] = credentials.sessionToken;\n        const privateAccess = this;\n        setSingleOverride(privateAccess, credentialsWithoutSessionToken);\n        return this.presign(requestToSign, options);\n    }\n};\n__name(_SignatureV4S3Express, \"SignatureV4S3Express\");\nvar SignatureV4S3Express = _SignatureV4S3Express;\nfunction getCredentialsWithoutSessionToken(credentials) {\n    const credentialsWithoutSessionToken = {\n        accessKeyId: credentials.accessKeyId,\n        secretAccessKey: credentials.secretAccessKey,\n        expiration: credentials.expiration\n    };\n    return credentialsWithoutSessionToken;\n}\n__name(getCredentialsWithoutSessionToken, \"getCredentialsWithoutSessionToken\");\nfunction setSingleOverride(privateAccess, credentialsWithoutSessionToken) {\n    const id = setTimeout(()=>{\n        throw new Error(\"SignatureV4S3Express credential override was created but not called.\");\n    }, 10);\n    const currentCredentialProvider = privateAccess.credentialProvider;\n    const overrideCredentialsProviderOnce = /* @__PURE__ */ __name(()=>{\n        clearTimeout(id);\n        privateAccess.credentialProvider = currentCredentialProvider;\n        return Promise.resolve(credentialsWithoutSessionToken);\n    }, \"overrideCredentialsProviderOnce\");\n    privateAccess.credentialProvider = overrideCredentialsProviderOnce;\n}\n__name(setSingleOverride, \"setSingleOverride\");\n// src/s3-express/functions/s3ExpressMiddleware.ts\nvar s3ExpressMiddleware = /* @__PURE__ */ __name((options)=>{\n    return (next, context)=>async (args)=>{\n            var _a, _b, _c, _d, _e;\n            if (context.endpointV2) {\n                const endpoint = context.endpointV2;\n                const isS3ExpressAuth = ((_c = (_b = (_a = endpoint.properties) == null ? void 0 : _a.authSchemes) == null ? void 0 : _b[0]) == null ? void 0 : _c.name) === S3_EXPRESS_AUTH_SCHEME;\n                const isS3ExpressBucket = ((_d = endpoint.properties) == null ? void 0 : _d.backend) === S3_EXPRESS_BACKEND || ((_e = endpoint.properties) == null ? void 0 : _e.bucketType) === S3_EXPRESS_BUCKET_TYPE;\n                if (isS3ExpressBucket) {\n                    context.isS3ExpressBucket = true;\n                }\n                if (isS3ExpressAuth) {\n                    const requestBucket = args.input.Bucket;\n                    if (requestBucket) {\n                        const s3ExpressIdentity = await options.s3ExpressIdentityProvider.getS3ExpressIdentity(await options.credentials(), {\n                            Bucket: requestBucket\n                        });\n                        context.s3ExpressIdentity = s3ExpressIdentity;\n                        if (import_protocol_http.HttpRequest.isInstance(args.request) && s3ExpressIdentity.sessionToken) {\n                            args.request.headers[SESSION_TOKEN_HEADER] = s3ExpressIdentity.sessionToken;\n                        }\n                    }\n                }\n            }\n            return next(args);\n        };\n}, \"s3ExpressMiddleware\");\nvar s3ExpressMiddlewareOptions = {\n    name: \"s3ExpressMiddleware\",\n    step: \"build\",\n    tags: [\n        \"S3\",\n        \"S3_EXPRESS\"\n    ],\n    override: true\n};\nvar getS3ExpressPlugin = /* @__PURE__ */ __name((options)=>({\n        applyToStack: (clientStack)=>{\n            clientStack.add(s3ExpressMiddleware(options), s3ExpressMiddlewareOptions);\n        }\n    }), \"getS3ExpressPlugin\");\n// src/s3Configuration.ts\nvar resolveS3Config = /* @__PURE__ */ __name((input, { session })=>{\n    const [s3ClientProvider, CreateSessionCommandCtor] = session;\n    return {\n        ...input,\n        forcePathStyle: input.forcePathStyle ?? false,\n        useAccelerateEndpoint: input.useAccelerateEndpoint ?? false,\n        disableMultiregionAccessPoints: input.disableMultiregionAccessPoints ?? false,\n        followRegionRedirects: input.followRegionRedirects ?? false,\n        s3ExpressIdentityProvider: input.s3ExpressIdentityProvider ?? new S3ExpressIdentityProviderImpl(async (key)=>s3ClientProvider().send(new CreateSessionCommandCtor({\n                Bucket: key,\n                SessionMode: \"ReadWrite\"\n            }))),\n        bucketEndpoint: input.bucketEndpoint ?? false\n    };\n}, \"resolveS3Config\");\n// src/throw-200-exceptions.ts\nvar throw200ExceptionsMiddleware = /* @__PURE__ */ __name((config)=>(next)=>async (args)=>{\n            const result = await next(args);\n            const { response } = result;\n            if (!import_protocol_http.HttpResponse.isInstance(response)) return result;\n            const { statusCode, body } = response;\n            if (statusCode < 200 || statusCode >= 300) return result;\n            const bodyBytes = await collectBody(body, config);\n            const bodyString = await collectBodyString(bodyBytes, config);\n            if (bodyBytes.length === 0) {\n                const err = new Error(\"S3 aborted request\");\n                err.name = \"InternalError\";\n                throw err;\n            }\n            if (bodyString && bodyString.match(\"<Error>\")) {\n                response.statusCode = 400;\n            }\n            response.body = bodyBytes;\n            return result;\n        }, \"throw200ExceptionsMiddleware\");\nvar collectBody = /* @__PURE__ */ __name((streamBody = new Uint8Array(), context)=>{\n    if (streamBody instanceof Uint8Array) {\n        return Promise.resolve(streamBody);\n    }\n    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n}, \"collectBody\");\nvar collectBodyString = /* @__PURE__ */ __name((streamBody, context)=>collectBody(streamBody, context).then((body)=>context.utf8Encoder(body)), \"collectBodyString\");\nvar throw200ExceptionsMiddlewareOptions = {\n    relation: \"after\",\n    toMiddleware: \"deserializerMiddleware\",\n    tags: [\n        \"THROW_200_EXCEPTIONS\",\n        \"S3\"\n    ],\n    name: \"throw200ExceptionsMiddleware\",\n    override: true\n};\nvar getThrow200ExceptionsPlugin = /* @__PURE__ */ __name((config)=>({\n        applyToStack: (clientStack)=>{\n            clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);\n        }\n    }), \"getThrow200ExceptionsPlugin\");\n// src/validate-bucket-name.ts\nvar import_util_arn_parser = __webpack_require__(/*! @aws-sdk/util-arn-parser */ \"(rsc)/./node_modules/@aws-sdk/util-arn-parser/dist-cjs/index.js\");\n// src/bucket-endpoint-middleware.ts\nfunction bucketEndpointMiddleware(options) {\n    return (next, context)=>async (args)=>{\n            var _a, _b, _c, _d;\n            if (options.bucketEndpoint) {\n                const endpoint = context.endpointV2;\n                if (endpoint) {\n                    const bucket = args.input.Bucket;\n                    if (typeof bucket === \"string\") {\n                        try {\n                            const bucketEndpointUrl = new URL(bucket);\n                            endpoint.url = bucketEndpointUrl;\n                        } catch (e) {\n                            const warning = `@aws-sdk/middleware-sdk-s3: bucketEndpoint=true was set but Bucket=${bucket} could not be parsed as URL.`;\n                            if (((_b = (_a = context.logger) == null ? void 0 : _a.constructor) == null ? void 0 : _b.name) === \"NoOpLogger\") {\n                                console.warn(warning);\n                            } else {\n                                (_d = (_c = context.logger) == null ? void 0 : _c.warn) == null ? void 0 : _d.call(_c, warning);\n                            }\n                            throw e;\n                        }\n                    }\n                }\n            }\n            return next(args);\n        };\n}\n__name(bucketEndpointMiddleware, \"bucketEndpointMiddleware\");\nvar bucketEndpointMiddlewareOptions = {\n    name: \"bucketEndpointMiddleware\",\n    override: true,\n    relation: \"after\",\n    toMiddleware: \"endpointV2Middleware\"\n};\n// src/validate-bucket-name.ts\nfunction validateBucketNameMiddleware({ bucketEndpoint }) {\n    return (next)=>async (args)=>{\n            const { input: { Bucket } } = args;\n            if (!bucketEndpoint && typeof Bucket === \"string\" && !(0, import_util_arn_parser.validate)(Bucket) && Bucket.indexOf(\"/\") >= 0) {\n                const err = new Error(`Bucket name shouldn't contain '/', received '${Bucket}'`);\n                err.name = \"InvalidBucketName\";\n                throw err;\n            }\n            return next({\n                ...args\n            });\n        };\n}\n__name(validateBucketNameMiddleware, \"validateBucketNameMiddleware\");\nvar validateBucketNameMiddlewareOptions = {\n    step: \"initialize\",\n    tags: [\n        \"VALIDATE_BUCKET_NAME\"\n    ],\n    name: \"validateBucketNameMiddleware\",\n    override: true\n};\nvar getValidateBucketNamePlugin = /* @__PURE__ */ __name((options)=>({\n        applyToStack: (clientStack)=>{\n            clientStack.add(validateBucketNameMiddleware(options), validateBucketNameMiddlewareOptions);\n            clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);\n        }\n    }), \"getValidateBucketNamePlugin\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@aws-sdk/middleware-sdk-s3/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@aws-sdk/s3-request-presigner/dist-cjs/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@aws-sdk/s3-request-presigner/dist-cjs/index.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    S3RequestPresigner: ()=>S3RequestPresigner,\n    getSignedUrl: ()=>getSignedUrl\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/getSignedUrl.ts\nvar import_util_format_url = __webpack_require__(/*! @aws-sdk/util-format-url */ \"(rsc)/./node_modules/@aws-sdk/util-format-url/dist-cjs/index.js\");\nvar import_middleware_endpoint = __webpack_require__(/*! @smithy/middleware-endpoint */ \"(rsc)/./node_modules/@smithy/middleware-endpoint/dist-cjs/index.js\");\nvar import_protocol_http = __webpack_require__(/*! @smithy/protocol-http */ \"(rsc)/./node_modules/@smithy/protocol-http/dist-cjs/index.js\");\n// src/presigner.ts\nvar import_signature_v4_multi_region = __webpack_require__(/*! @aws-sdk/signature-v4-multi-region */ \"(rsc)/./node_modules/@aws-sdk/signature-v4-multi-region/dist-cjs/index.js\");\n// src/constants.ts\nvar UNSIGNED_PAYLOAD = \"UNSIGNED-PAYLOAD\";\nvar SHA256_HEADER = \"X-Amz-Content-Sha256\";\n// src/presigner.ts\nvar _S3RequestPresigner = class _S3RequestPresigner {\n    constructor(options){\n        const resolvedOptions = {\n            // Allow `signingName` because we want to support usecase of supply client's resolved config\n            // directly. Where service equals signingName.\n            service: options.signingName || options.service || \"s3\",\n            uriEscapePath: options.uriEscapePath || false,\n            applyChecksum: options.applyChecksum || false,\n            ...options\n        };\n        this.signer = new import_signature_v4_multi_region.SignatureV4MultiRegion(resolvedOptions);\n    }\n    presign(requestToSign, { unsignableHeaders = /* @__PURE__ */ new Set(), unhoistableHeaders = /* @__PURE__ */ new Set(), ...options } = {}) {\n        this.prepareRequest(requestToSign, {\n            unsignableHeaders,\n            unhoistableHeaders\n        });\n        return this.signer.presign(requestToSign, {\n            expiresIn: 900,\n            unsignableHeaders,\n            unhoistableHeaders,\n            ...options\n        });\n    }\n    presignWithCredentials(requestToSign, credentials, { unsignableHeaders = /* @__PURE__ */ new Set(), unhoistableHeaders = /* @__PURE__ */ new Set(), ...options } = {}) {\n        this.prepareRequest(requestToSign, {\n            unsignableHeaders,\n            unhoistableHeaders\n        });\n        return this.signer.presignWithCredentials(requestToSign, credentials, {\n            expiresIn: 900,\n            unsignableHeaders,\n            unhoistableHeaders,\n            ...options\n        });\n    }\n    prepareRequest(requestToSign, { unsignableHeaders = /* @__PURE__ */ new Set(), unhoistableHeaders = /* @__PURE__ */ new Set() } = {}) {\n        unsignableHeaders.add(\"content-type\");\n        Object.keys(requestToSign.headers).map((header)=>header.toLowerCase()).filter((header)=>header.startsWith(\"x-amz-server-side-encryption\")).forEach((header)=>{\n            unhoistableHeaders.add(header);\n        });\n        requestToSign.headers[SHA256_HEADER] = UNSIGNED_PAYLOAD;\n        const currentHostHeader = requestToSign.headers.host;\n        const port = requestToSign.port;\n        const expectedHostHeader = `${requestToSign.hostname}${requestToSign.port != null ? \":\" + port : \"\"}`;\n        if (!currentHostHeader || currentHostHeader === requestToSign.hostname && requestToSign.port != null) {\n            requestToSign.headers.host = expectedHostHeader;\n        }\n    }\n};\n__name(_S3RequestPresigner, \"S3RequestPresigner\");\nvar S3RequestPresigner = _S3RequestPresigner;\n// src/getSignedUrl.ts\nvar getSignedUrl = /* @__PURE__ */ __name(async (client, command, options = {})=>{\n    var _a, _b, _c;\n    let s3Presigner;\n    let region;\n    if (typeof client.config.endpointProvider === \"function\") {\n        const endpointV2 = await (0, import_middleware_endpoint.getEndpointFromInstructions)(command.input, command.constructor, client.config);\n        const authScheme = (_b = (_a = endpointV2.properties) == null ? void 0 : _a.authSchemes) == null ? void 0 : _b[0];\n        if ((authScheme == null ? void 0 : authScheme.name) === \"sigv4a\") {\n            region = (_c = authScheme == null ? void 0 : authScheme.signingRegionSet) == null ? void 0 : _c.join(\",\");\n        } else {\n            region = authScheme == null ? void 0 : authScheme.signingRegion;\n        }\n        s3Presigner = new S3RequestPresigner({\n            ...client.config,\n            signingName: authScheme == null ? void 0 : authScheme.signingName,\n            region: async ()=>region\n        });\n    } else {\n        s3Presigner = new S3RequestPresigner(client.config);\n    }\n    const presignInterceptMiddleware = /* @__PURE__ */ __name((next, context)=>async (args)=>{\n            const { request } = args;\n            if (!import_protocol_http.HttpRequest.isInstance(request)) {\n                throw new Error(\"Request to be presigned is not an valid HTTP request.\");\n            }\n            delete request.headers[\"amz-sdk-invocation-id\"];\n            delete request.headers[\"amz-sdk-request\"];\n            delete request.headers[\"x-amz-user-agent\"];\n            let presigned2;\n            const presignerOptions = {\n                ...options,\n                signingRegion: options.signingRegion ?? context[\"signing_region\"] ?? region,\n                signingService: options.signingService ?? context[\"signing_service\"]\n            };\n            if (context.s3ExpressIdentity) {\n                presigned2 = await s3Presigner.presignWithCredentials(request, context.s3ExpressIdentity, presignerOptions);\n            } else {\n                presigned2 = await s3Presigner.presign(request, presignerOptions);\n            }\n            return {\n                // Intercept the middleware stack by returning fake response\n                response: {},\n                output: {\n                    $metadata: {\n                        httpStatusCode: 200\n                    },\n                    presigned: presigned2\n                }\n            };\n        }, \"presignInterceptMiddleware\");\n    const middlewareName = \"presignInterceptMiddleware\";\n    const clientStack = client.middlewareStack.clone();\n    clientStack.addRelativeTo(presignInterceptMiddleware, {\n        name: middlewareName,\n        relation: \"before\",\n        toMiddleware: \"awsAuthMiddleware\",\n        override: true\n    });\n    const handler = command.resolveMiddleware(clientStack, client.config, {});\n    const { output } = await handler({\n        input: command.input\n    });\n    const { presigned } = output;\n    return (0, import_util_format_url.formatUrl)(presigned);\n}, \"getSignedUrl\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@aws-sdk/s3-request-presigner/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@aws-sdk/signature-v4-multi-region/dist-cjs/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4-multi-region/dist-cjs/index.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    SignatureV4MultiRegion: ()=>SignatureV4MultiRegion,\n    signatureV4CrtContainer: ()=>signatureV4CrtContainer\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/SignatureV4MultiRegion.ts\nvar import_middleware_sdk_s3 = __webpack_require__(/*! @aws-sdk/middleware-sdk-s3 */ \"(rsc)/./node_modules/@aws-sdk/middleware-sdk-s3/dist-cjs/index.js\");\n// src/signature-v4-crt-container.ts\nvar signatureV4CrtContainer = {\n    CrtSignerV4: null\n};\n// src/SignatureV4MultiRegion.ts\nvar _SignatureV4MultiRegion = class _SignatureV4MultiRegion {\n    constructor(options){\n        this.sigv4Signer = new import_middleware_sdk_s3.SignatureV4S3Express(options);\n        this.signerOptions = options;\n    }\n    async sign(requestToSign, options = {}) {\n        if (options.signingRegion === \"*\") {\n            if (this.signerOptions.runtime !== \"node\") throw new Error(\"This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js\");\n            return this.getSigv4aSigner().sign(requestToSign, options);\n        }\n        return this.sigv4Signer.sign(requestToSign, options);\n    }\n    /**\n   * Sign with alternate credentials to the ones provided in the constructor.\n   */ async signWithCredentials(requestToSign, credentials, options = {}) {\n        if (options.signingRegion === \"*\") {\n            if (this.signerOptions.runtime !== \"node\") throw new Error(\"This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js\");\n            return this.getSigv4aSigner().signWithCredentials(requestToSign, credentials, options);\n        }\n        return this.sigv4Signer.signWithCredentials(requestToSign, credentials, options);\n    }\n    async presign(originalRequest, options = {}) {\n        if (options.signingRegion === \"*\") {\n            if (this.signerOptions.runtime !== \"node\") throw new Error(\"This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js\");\n            return this.getSigv4aSigner().presign(originalRequest, options);\n        }\n        return this.sigv4Signer.presign(originalRequest, options);\n    }\n    async presignWithCredentials(originalRequest, credentials, options = {}) {\n        if (options.signingRegion === \"*\") {\n            throw new Error(\"Method presignWithCredentials is not supported for [signingRegion=*].\");\n        }\n        return this.sigv4Signer.presignWithCredentials(originalRequest, credentials, options);\n    }\n    getSigv4aSigner() {\n        if (!this.sigv4aSigner) {\n            let CrtSignerV4 = null;\n            try {\n                CrtSignerV4 = signatureV4CrtContainer.CrtSignerV4;\n                if (typeof CrtSignerV4 !== \"function\") throw new Error();\n            } catch (e) {\n                e.message = `${e.message}\nPlease check whether you have installed the \"@aws-sdk/signature-v4-crt\" package explicitly. \nYou must also register the package by calling [require(\"@aws-sdk/signature-v4-crt\");] or an ESM equivalent such as [import \"@aws-sdk/signature-v4-crt\";]. \nFor more information please go to https://github.com/aws/aws-sdk-js-v3#functionality-requiring-aws-common-runtime-crt`;\n                throw e;\n            }\n            this.sigv4aSigner = new CrtSignerV4({\n                ...this.signerOptions,\n                signingAlgorithm: 1\n            });\n        }\n        return this.sigv4aSigner;\n    }\n};\n__name(_SignatureV4MultiRegion, \"SignatureV4MultiRegion\");\nvar SignatureV4MultiRegion = _SignatureV4MultiRegion;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@aws-sdk/signature-v4-multi-region/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@aws-sdk/util-arn-parser/dist-cjs/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-arn-parser/dist-cjs/index.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    build: ()=>build,\n    parse: ()=>parse,\n    validate: ()=>validate\n});\nmodule.exports = __toCommonJS(src_exports);\nvar validate = /* @__PURE__ */ __name((str)=>typeof str === \"string\" && str.indexOf(\"arn:\") === 0 && str.split(\":\").length >= 6, \"validate\");\nvar parse = /* @__PURE__ */ __name((arn)=>{\n    const segments = arn.split(\":\");\n    if (segments.length < 6 || segments[0] !== \"arn\") throw new Error(\"Malformed ARN\");\n    const [, //Skip \"arn\" literal\n    partition, service, region, accountId, ...resource] = segments;\n    return {\n        partition,\n        service,\n        region,\n        accountId,\n        resource: resource.join(\":\")\n    };\n}, \"parse\");\nvar build = /* @__PURE__ */ __name((arnObject)=>{\n    const { partition = \"aws\", service, region, accountId, resource } = arnObject;\n    if ([\n        service,\n        region,\n        accountId,\n        resource\n    ].some((segment)=>typeof segment !== \"string\")) {\n        throw new Error(\"Input ARN object is invalid\");\n    }\n    return `arn:${partition}:${service}:${region}:${accountId}:${resource}`;\n}, \"build\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvdXRpbC1hcm4tcGFyc2VyL2Rpc3QtY2pzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxZQUFZQyxPQUFPQyxjQUFjO0FBQ3JDLElBQUlDLG1CQUFtQkYsT0FBT0csd0JBQXdCO0FBQ3RELElBQUlDLG9CQUFvQkosT0FBT0ssbUJBQW1CO0FBQ2xELElBQUlDLGVBQWVOLE9BQU9PLFNBQVMsQ0FBQ0MsY0FBYztBQUNsRCxJQUFJQyxTQUFTLENBQUNDLFFBQVFDLFFBQVVaLFVBQVVXLFFBQVEsUUFBUTtRQUFFQztRQUFPQyxjQUFjO0lBQUs7QUFDdEYsSUFBSUMsV0FBVyxDQUFDSCxRQUFRSTtJQUN0QixJQUFLLElBQUlDLFFBQVFELElBQ2ZmLFVBQVVXLFFBQVFLLE1BQU07UUFBRUMsS0FBS0YsR0FBRyxDQUFDQyxLQUFLO1FBQUVFLFlBQVk7SUFBSztBQUMvRDtBQUNBLElBQUlDLGNBQWMsQ0FBQ0MsSUFBSUMsTUFBTUMsUUFBUUM7SUFDbkMsSUFBSUYsUUFBUSxPQUFPQSxTQUFTLFlBQVksT0FBT0EsU0FBUyxZQUFZO1FBQ2xFLEtBQUssSUFBSUcsT0FBT25CLGtCQUFrQmdCLE1BQ2hDLElBQUksQ0FBQ2QsYUFBYWtCLElBQUksQ0FBQ0wsSUFBSUksUUFBUUEsUUFBUUYsUUFDekN0QixVQUFVb0IsSUFBSUksS0FBSztZQUFFUCxLQUFLLElBQU1JLElBQUksQ0FBQ0csSUFBSTtZQUFFTixZQUFZLENBQUVLLENBQUFBLE9BQU9wQixpQkFBaUJrQixNQUFNRyxJQUFHLEtBQU1ELEtBQUtMLFVBQVU7UUFBQztJQUN0SDtJQUNBLE9BQU9FO0FBQ1Q7QUFDQSxJQUFJTSxlQUFlLENBQUNDLE1BQVFSLFlBQVluQixVQUFVLENBQUMsR0FBRyxjQUFjO1FBQUVZLE9BQU87SUFBSyxJQUFJZTtBQUV0RixlQUFlO0FBQ2YsSUFBSUMsY0FBYyxDQUFDO0FBQ25CZCxTQUFTYyxhQUFhO0lBQ3BCQyxPQUFPLElBQU1BO0lBQ2JDLE9BQU8sSUFBTUE7SUFDYkMsVUFBVSxJQUFNQTtBQUNsQjtBQUNBQyxPQUFPQyxPQUFPLEdBQUdQLGFBQWFFO0FBQzlCLElBQUlHLFdBQVcsYUFBYSxHQUFHckIsT0FBTyxDQUFDd0IsTUFBUSxPQUFPQSxRQUFRLFlBQVlBLElBQUlDLE9BQU8sQ0FBQyxZQUFZLEtBQUtELElBQUlFLEtBQUssQ0FBQyxLQUFLQyxNQUFNLElBQUksR0FBRztBQUNuSSxJQUFJUCxRQUFRLGFBQWEsR0FBR3BCLE9BQU8sQ0FBQzRCO0lBQ2xDLE1BQU1DLFdBQVdELElBQUlGLEtBQUssQ0FBQztJQUMzQixJQUFJRyxTQUFTRixNQUFNLEdBQUcsS0FBS0UsUUFBUSxDQUFDLEVBQUUsS0FBSyxPQUN6QyxNQUFNLElBQUlDLE1BQU07SUFDbEIsTUFBTSxHQUVKLG9CQUFvQjtJQUNwQkMsV0FDQUMsU0FDQUMsUUFDQUMsV0FDQSxHQUFHQyxTQUNKLEdBQUdOO0lBQ0osT0FBTztRQUNMRTtRQUNBQztRQUNBQztRQUNBQztRQUNBQyxVQUFVQSxTQUFTQyxJQUFJLENBQUM7SUFDMUI7QUFDRixHQUFHO0FBQ0gsSUFBSWpCLFFBQVEsYUFBYSxHQUFHbkIsT0FBTyxDQUFDcUM7SUFDbEMsTUFBTSxFQUFFTixZQUFZLEtBQUssRUFBRUMsT0FBTyxFQUFFQyxNQUFNLEVBQUVDLFNBQVMsRUFBRUMsUUFBUSxFQUFFLEdBQUdFO0lBQ3BFLElBQUk7UUFBQ0w7UUFBU0M7UUFBUUM7UUFBV0M7S0FBUyxDQUFDRyxJQUFJLENBQUMsQ0FBQ0MsVUFBWSxPQUFPQSxZQUFZLFdBQVc7UUFDekYsTUFBTSxJQUFJVCxNQUFNO0lBQ2xCO0lBQ0EsT0FBTyxDQUFDLElBQUksRUFBRUMsVUFBVSxDQUFDLEVBQUVDLFFBQVEsQ0FBQyxFQUFFQyxPQUFPLENBQUMsRUFBRUMsVUFBVSxDQUFDLEVBQUVDLFNBQVMsQ0FBQztBQUN6RSxHQUFHO0FBQ0gsNkRBQTZEO0FBRTdELEtBQU1iLENBQUFBLENBSU4iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb29kLWJsb2cvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvdXRpbC1hcm4tcGFyc2VyL2Rpc3QtY2pzL2luZGV4LmpzPzI4OTIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIGJ1aWxkOiAoKSA9PiBidWlsZCxcbiAgcGFyc2U6ICgpID0+IHBhcnNlLFxuICB2YWxpZGF0ZTogKCkgPT4gdmFsaWRhdGVcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xudmFyIHZhbGlkYXRlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoc3RyKSA9PiB0eXBlb2Ygc3RyID09PSBcInN0cmluZ1wiICYmIHN0ci5pbmRleE9mKFwiYXJuOlwiKSA9PT0gMCAmJiBzdHIuc3BsaXQoXCI6XCIpLmxlbmd0aCA+PSA2LCBcInZhbGlkYXRlXCIpO1xudmFyIHBhcnNlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoYXJuKSA9PiB7XG4gIGNvbnN0IHNlZ21lbnRzID0gYXJuLnNwbGl0KFwiOlwiKTtcbiAgaWYgKHNlZ21lbnRzLmxlbmd0aCA8IDYgfHwgc2VnbWVudHNbMF0gIT09IFwiYXJuXCIpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTWFsZm9ybWVkIEFSTlwiKTtcbiAgY29uc3QgW1xuICAgICxcbiAgICAvL1NraXAgXCJhcm5cIiBsaXRlcmFsXG4gICAgcGFydGl0aW9uLFxuICAgIHNlcnZpY2UsXG4gICAgcmVnaW9uLFxuICAgIGFjY291bnRJZCxcbiAgICAuLi5yZXNvdXJjZVxuICBdID0gc2VnbWVudHM7XG4gIHJldHVybiB7XG4gICAgcGFydGl0aW9uLFxuICAgIHNlcnZpY2UsXG4gICAgcmVnaW9uLFxuICAgIGFjY291bnRJZCxcbiAgICByZXNvdXJjZTogcmVzb3VyY2Uuam9pbihcIjpcIilcbiAgfTtcbn0sIFwicGFyc2VcIik7XG52YXIgYnVpbGQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChhcm5PYmplY3QpID0+IHtcbiAgY29uc3QgeyBwYXJ0aXRpb24gPSBcImF3c1wiLCBzZXJ2aWNlLCByZWdpb24sIGFjY291bnRJZCwgcmVzb3VyY2UgfSA9IGFybk9iamVjdDtcbiAgaWYgKFtzZXJ2aWNlLCByZWdpb24sIGFjY291bnRJZCwgcmVzb3VyY2VdLnNvbWUoKHNlZ21lbnQpID0+IHR5cGVvZiBzZWdtZW50ICE9PSBcInN0cmluZ1wiKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIklucHV0IEFSTiBvYmplY3QgaXMgaW52YWxpZFwiKTtcbiAgfVxuICByZXR1cm4gYGFybjoke3BhcnRpdGlvbn06JHtzZXJ2aWNlfToke3JlZ2lvbn06JHthY2NvdW50SWR9OiR7cmVzb3VyY2V9YDtcbn0sIFwiYnVpbGRcIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICB2YWxpZGF0ZSxcbiAgcGFyc2UsXG4gIGJ1aWxkXG59KTtcblxuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9faGFzT3duUHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX19uYW1lIiwidGFyZ2V0IiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJfX2V4cG9ydCIsImFsbCIsIm5hbWUiLCJnZXQiLCJlbnVtZXJhYmxlIiwiX19jb3B5UHJvcHMiLCJ0byIsImZyb20iLCJleGNlcHQiLCJkZXNjIiwia2V5IiwiY2FsbCIsIl9fdG9Db21tb25KUyIsIm1vZCIsInNyY19leHBvcnRzIiwiYnVpbGQiLCJwYXJzZSIsInZhbGlkYXRlIiwibW9kdWxlIiwiZXhwb3J0cyIsInN0ciIsImluZGV4T2YiLCJzcGxpdCIsImxlbmd0aCIsImFybiIsInNlZ21lbnRzIiwiRXJyb3IiLCJwYXJ0aXRpb24iLCJzZXJ2aWNlIiwicmVnaW9uIiwiYWNjb3VudElkIiwicmVzb3VyY2UiLCJqb2luIiwiYXJuT2JqZWN0Iiwic29tZSIsInNlZ21lbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@aws-sdk/util-arn-parser/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@aws-sdk/util-format-url/dist-cjs/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-format-url/dist-cjs/index.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    formatUrl: ()=>formatUrl\n});\nmodule.exports = __toCommonJS(src_exports);\nvar import_querystring_builder = __webpack_require__(/*! @smithy/querystring-builder */ \"(rsc)/./node_modules/@smithy/querystring-builder/dist-cjs/index.js\");\nfunction formatUrl(request) {\n    const { port, query } = request;\n    let { protocol, path, hostname } = request;\n    if (protocol && protocol.slice(-1) !== \":\") {\n        protocol += \":\";\n    }\n    if (port) {\n        hostname += `:${port}`;\n    }\n    if (path && path.charAt(0) !== \"/\") {\n        path = `/${path}`;\n    }\n    let queryString = query ? (0, import_querystring_builder.buildQueryString)(query) : \"\";\n    if (queryString && queryString[0] !== \"?\") {\n        queryString = `?${queryString}`;\n    }\n    let auth = \"\";\n    if (request.username != null || request.password != null) {\n        const username = request.username ?? \"\";\n        const password = request.password ?? \"\";\n        auth = `${username}:${password}@`;\n    }\n    let fragment = \"\";\n    if (request.fragment) {\n        fragment = `#${request.fragment}`;\n    }\n    return `${protocol}//${auth}${hostname}${path}${queryString}${fragment}`;\n}\n__name(formatUrl, \"formatUrl\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvdXRpbC1mb3JtYXQtdXJsL2Rpc3QtY2pzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxZQUFZQyxPQUFPQyxjQUFjO0FBQ3JDLElBQUlDLG1CQUFtQkYsT0FBT0csd0JBQXdCO0FBQ3RELElBQUlDLG9CQUFvQkosT0FBT0ssbUJBQW1CO0FBQ2xELElBQUlDLGVBQWVOLE9BQU9PLFNBQVMsQ0FBQ0MsY0FBYztBQUNsRCxJQUFJQyxTQUFTLENBQUNDLFFBQVFDLFFBQVVaLFVBQVVXLFFBQVEsUUFBUTtRQUFFQztRQUFPQyxjQUFjO0lBQUs7QUFDdEYsSUFBSUMsV0FBVyxDQUFDSCxRQUFRSTtJQUN0QixJQUFLLElBQUlDLFFBQVFELElBQ2ZmLFVBQVVXLFFBQVFLLE1BQU07UUFBRUMsS0FBS0YsR0FBRyxDQUFDQyxLQUFLO1FBQUVFLFlBQVk7SUFBSztBQUMvRDtBQUNBLElBQUlDLGNBQWMsQ0FBQ0MsSUFBSUMsTUFBTUMsUUFBUUM7SUFDbkMsSUFBSUYsUUFBUSxPQUFPQSxTQUFTLFlBQVksT0FBT0EsU0FBUyxZQUFZO1FBQ2xFLEtBQUssSUFBSUcsT0FBT25CLGtCQUFrQmdCLE1BQ2hDLElBQUksQ0FBQ2QsYUFBYWtCLElBQUksQ0FBQ0wsSUFBSUksUUFBUUEsUUFBUUYsUUFDekN0QixVQUFVb0IsSUFBSUksS0FBSztZQUFFUCxLQUFLLElBQU1JLElBQUksQ0FBQ0csSUFBSTtZQUFFTixZQUFZLENBQUVLLENBQUFBLE9BQU9wQixpQkFBaUJrQixNQUFNRyxJQUFHLEtBQU1ELEtBQUtMLFVBQVU7UUFBQztJQUN0SDtJQUNBLE9BQU9FO0FBQ1Q7QUFDQSxJQUFJTSxlQUFlLENBQUNDLE1BQVFSLFlBQVluQixVQUFVLENBQUMsR0FBRyxjQUFjO1FBQUVZLE9BQU87SUFBSyxJQUFJZTtBQUV0RixlQUFlO0FBQ2YsSUFBSUMsY0FBYyxDQUFDO0FBQ25CZCxTQUFTYyxhQUFhO0lBQ3BCQyxXQUFXLElBQU1BO0FBQ25CO0FBQ0FDLE9BQU9DLE9BQU8sR0FBR0wsYUFBYUU7QUFDOUIsSUFBSUksNkJBQTZCQyxtQkFBT0EsQ0FBQyx1R0FBNkI7QUFDdEUsU0FBU0osVUFBVUssT0FBTztJQUN4QixNQUFNLEVBQUVDLElBQUksRUFBRUMsS0FBSyxFQUFFLEdBQUdGO0lBQ3hCLElBQUksRUFBRUcsUUFBUSxFQUFFQyxJQUFJLEVBQUVDLFFBQVEsRUFBRSxHQUFHTDtJQUNuQyxJQUFJRyxZQUFZQSxTQUFTRyxLQUFLLENBQUMsQ0FBQyxPQUFPLEtBQUs7UUFDMUNILFlBQVk7SUFDZDtJQUNBLElBQUlGLE1BQU07UUFDUkksWUFBWSxDQUFDLENBQUMsRUFBRUosS0FBSyxDQUFDO0lBQ3hCO0lBQ0EsSUFBSUcsUUFBUUEsS0FBS0csTUFBTSxDQUFDLE9BQU8sS0FBSztRQUNsQ0gsT0FBTyxDQUFDLENBQUMsRUFBRUEsS0FBSyxDQUFDO0lBQ25CO0lBQ0EsSUFBSUksY0FBY04sUUFBUSxDQUFDLEdBQUdKLDJCQUEyQlcsZ0JBQWdCLEVBQUVQLFNBQVM7SUFDcEYsSUFBSU0sZUFBZUEsV0FBVyxDQUFDLEVBQUUsS0FBSyxLQUFLO1FBQ3pDQSxjQUFjLENBQUMsQ0FBQyxFQUFFQSxZQUFZLENBQUM7SUFDakM7SUFDQSxJQUFJRSxPQUFPO0lBQ1gsSUFBSVYsUUFBUVcsUUFBUSxJQUFJLFFBQVFYLFFBQVFZLFFBQVEsSUFBSSxNQUFNO1FBQ3hELE1BQU1ELFdBQVdYLFFBQVFXLFFBQVEsSUFBSTtRQUNyQyxNQUFNQyxXQUFXWixRQUFRWSxRQUFRLElBQUk7UUFDckNGLE9BQU8sQ0FBQyxFQUFFQyxTQUFTLENBQUMsRUFBRUMsU0FBUyxDQUFDLENBQUM7SUFDbkM7SUFDQSxJQUFJQyxXQUFXO0lBQ2YsSUFBSWIsUUFBUWEsUUFBUSxFQUFFO1FBQ3BCQSxXQUFXLENBQUMsQ0FBQyxFQUFFYixRQUFRYSxRQUFRLENBQUMsQ0FBQztJQUNuQztJQUNBLE9BQU8sQ0FBQyxFQUFFVixTQUFTLEVBQUUsRUFBRU8sS0FBSyxFQUFFTCxTQUFTLEVBQUVELEtBQUssRUFBRUksWUFBWSxFQUFFSyxTQUFTLENBQUM7QUFDMUU7QUFDQXJDLE9BQU9tQixXQUFXO0FBQ2xCLDZEQUE2RDtBQUU3RCxLQUFNQyxDQUFBQSxDQUVOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vZC1ibG9nLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL3V0aWwtZm9ybWF0LXVybC9kaXN0LWNqcy9pbmRleC5qcz9iZmYzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fbmFtZSA9ICh0YXJnZXQsIHZhbHVlKSA9PiBfX2RlZlByb3AodGFyZ2V0LCBcIm5hbWVcIiwgeyB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIHNyY19leHBvcnRzID0ge307XG5fX2V4cG9ydChzcmNfZXhwb3J0cywge1xuICBmb3JtYXRVcmw6ICgpID0+IGZvcm1hdFVybFxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzcmNfZXhwb3J0cyk7XG52YXIgaW1wb3J0X3F1ZXJ5c3RyaW5nX2J1aWxkZXIgPSByZXF1aXJlKFwiQHNtaXRoeS9xdWVyeXN0cmluZy1idWlsZGVyXCIpO1xuZnVuY3Rpb24gZm9ybWF0VXJsKHJlcXVlc3QpIHtcbiAgY29uc3QgeyBwb3J0LCBxdWVyeSB9ID0gcmVxdWVzdDtcbiAgbGV0IHsgcHJvdG9jb2wsIHBhdGgsIGhvc3RuYW1lIH0gPSByZXF1ZXN0O1xuICBpZiAocHJvdG9jb2wgJiYgcHJvdG9jb2wuc2xpY2UoLTEpICE9PSBcIjpcIikge1xuICAgIHByb3RvY29sICs9IFwiOlwiO1xuICB9XG4gIGlmIChwb3J0KSB7XG4gICAgaG9zdG5hbWUgKz0gYDoke3BvcnR9YDtcbiAgfVxuICBpZiAocGF0aCAmJiBwYXRoLmNoYXJBdCgwKSAhPT0gXCIvXCIpIHtcbiAgICBwYXRoID0gYC8ke3BhdGh9YDtcbiAgfVxuICBsZXQgcXVlcnlTdHJpbmcgPSBxdWVyeSA/ICgwLCBpbXBvcnRfcXVlcnlzdHJpbmdfYnVpbGRlci5idWlsZFF1ZXJ5U3RyaW5nKShxdWVyeSkgOiBcIlwiO1xuICBpZiAocXVlcnlTdHJpbmcgJiYgcXVlcnlTdHJpbmdbMF0gIT09IFwiP1wiKSB7XG4gICAgcXVlcnlTdHJpbmcgPSBgPyR7cXVlcnlTdHJpbmd9YDtcbiAgfVxuICBsZXQgYXV0aCA9IFwiXCI7XG4gIGlmIChyZXF1ZXN0LnVzZXJuYW1lICE9IG51bGwgfHwgcmVxdWVzdC5wYXNzd29yZCAhPSBudWxsKSB7XG4gICAgY29uc3QgdXNlcm5hbWUgPSByZXF1ZXN0LnVzZXJuYW1lID8/IFwiXCI7XG4gICAgY29uc3QgcGFzc3dvcmQgPSByZXF1ZXN0LnBhc3N3b3JkID8/IFwiXCI7XG4gICAgYXV0aCA9IGAke3VzZXJuYW1lfToke3Bhc3N3b3JkfUBgO1xuICB9XG4gIGxldCBmcmFnbWVudCA9IFwiXCI7XG4gIGlmIChyZXF1ZXN0LmZyYWdtZW50KSB7XG4gICAgZnJhZ21lbnQgPSBgIyR7cmVxdWVzdC5mcmFnbWVudH1gO1xuICB9XG4gIHJldHVybiBgJHtwcm90b2NvbH0vLyR7YXV0aH0ke2hvc3RuYW1lfSR7cGF0aH0ke3F1ZXJ5U3RyaW5nfSR7ZnJhZ21lbnR9YDtcbn1cbl9fbmFtZShmb3JtYXRVcmwsIFwiZm9ybWF0VXJsXCIpO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuXG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZm9ybWF0VXJsXG59KTtcblxuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9faGFzT3duUHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX19uYW1lIiwidGFyZ2V0IiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJfX2V4cG9ydCIsImFsbCIsIm5hbWUiLCJnZXQiLCJlbnVtZXJhYmxlIiwiX19jb3B5UHJvcHMiLCJ0byIsImZyb20iLCJleGNlcHQiLCJkZXNjIiwia2V5IiwiY2FsbCIsIl9fdG9Db21tb25KUyIsIm1vZCIsInNyY19leHBvcnRzIiwiZm9ybWF0VXJsIiwibW9kdWxlIiwiZXhwb3J0cyIsImltcG9ydF9xdWVyeXN0cmluZ19idWlsZGVyIiwicmVxdWlyZSIsInJlcXVlc3QiLCJwb3J0IiwicXVlcnkiLCJwcm90b2NvbCIsInBhdGgiLCJob3N0bmFtZSIsInNsaWNlIiwiY2hhckF0IiwicXVlcnlTdHJpbmciLCJidWlsZFF1ZXJ5U3RyaW5nIiwiYXV0aCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJmcmFnbWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@aws-sdk/util-format-url/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/is-array-buffer/dist-cjs/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@smithy/is-array-buffer/dist-cjs/index.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    isArrayBuffer: ()=>isArrayBuffer\n});\nmodule.exports = __toCommonJS(src_exports);\nvar isArrayBuffer = /* @__PURE__ */ __name((arg)=>typeof ArrayBuffer === \"function\" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === \"[object ArrayBuffer]\", \"isArrayBuffer\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9pcy1hcnJheS1idWZmZXIvZGlzdC1janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFlBQVlDLE9BQU9DLGNBQWM7QUFDckMsSUFBSUMsbUJBQW1CRixPQUFPRyx3QkFBd0I7QUFDdEQsSUFBSUMsb0JBQW9CSixPQUFPSyxtQkFBbUI7QUFDbEQsSUFBSUMsZUFBZU4sT0FBT08sU0FBUyxDQUFDQyxjQUFjO0FBQ2xELElBQUlDLFNBQVMsQ0FBQ0MsUUFBUUMsUUFBVVosVUFBVVcsUUFBUSxRQUFRO1FBQUVDO1FBQU9DLGNBQWM7SUFBSztBQUN0RixJQUFJQyxXQUFXLENBQUNILFFBQVFJO0lBQ3RCLElBQUssSUFBSUMsUUFBUUQsSUFDZmYsVUFBVVcsUUFBUUssTUFBTTtRQUFFQyxLQUFLRixHQUFHLENBQUNDLEtBQUs7UUFBRUUsWUFBWTtJQUFLO0FBQy9EO0FBQ0EsSUFBSUMsY0FBYyxDQUFDQyxJQUFJQyxNQUFNQyxRQUFRQztJQUNuQyxJQUFJRixRQUFRLE9BQU9BLFNBQVMsWUFBWSxPQUFPQSxTQUFTLFlBQVk7UUFDbEUsS0FBSyxJQUFJRyxPQUFPbkIsa0JBQWtCZ0IsTUFDaEMsSUFBSSxDQUFDZCxhQUFha0IsSUFBSSxDQUFDTCxJQUFJSSxRQUFRQSxRQUFRRixRQUN6Q3RCLFVBQVVvQixJQUFJSSxLQUFLO1lBQUVQLEtBQUssSUFBTUksSUFBSSxDQUFDRyxJQUFJO1lBQUVOLFlBQVksQ0FBRUssQ0FBQUEsT0FBT3BCLGlCQUFpQmtCLE1BQU1HLElBQUcsS0FBTUQsS0FBS0wsVUFBVTtRQUFDO0lBQ3RIO0lBQ0EsT0FBT0U7QUFDVDtBQUNBLElBQUlNLGVBQWUsQ0FBQ0MsTUFBUVIsWUFBWW5CLFVBQVUsQ0FBQyxHQUFHLGNBQWM7UUFBRVksT0FBTztJQUFLLElBQUllO0FBRXRGLGVBQWU7QUFDZixJQUFJQyxjQUFjLENBQUM7QUFDbkJkLFNBQVNjLGFBQWE7SUFDcEJDLGVBQWUsSUFBTUE7QUFDdkI7QUFDQUMsT0FBT0MsT0FBTyxHQUFHTCxhQUFhRTtBQUM5QixJQUFJQyxnQkFBZ0IsYUFBYSxHQUFHbkIsT0FBTyxDQUFDc0IsTUFBUSxPQUFPQyxnQkFBZ0IsY0FBY0QsZUFBZUMsZUFBZWhDLE9BQU9PLFNBQVMsQ0FBQzBCLFFBQVEsQ0FBQ1QsSUFBSSxDQUFDTyxTQUFTLHdCQUF3QjtBQUN2TCw2REFBNkQ7QUFFN0QsS0FBTUYsQ0FBQUEsQ0FFTiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2QtYmxvZy8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2lzLWFycmF5LWJ1ZmZlci9kaXN0LWNqcy9pbmRleC5qcz83MzVmIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fbmFtZSA9ICh0YXJnZXQsIHZhbHVlKSA9PiBfX2RlZlByb3AodGFyZ2V0LCBcIm5hbWVcIiwgeyB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIHNyY19leHBvcnRzID0ge307XG5fX2V4cG9ydChzcmNfZXhwb3J0cywge1xuICBpc0FycmF5QnVmZmVyOiAoKSA9PiBpc0FycmF5QnVmZmVyXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHNyY19leHBvcnRzKTtcbnZhciBpc0FycmF5QnVmZmVyID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoYXJnKSA9PiB0eXBlb2YgQXJyYXlCdWZmZXIgPT09IFwiZnVuY3Rpb25cIiAmJiBhcmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJnKSA9PT0gXCJbb2JqZWN0IEFycmF5QnVmZmVyXVwiLCBcImlzQXJyYXlCdWZmZXJcIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5QnVmZmVyXG59KTtcblxuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9faGFzT3duUHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX19uYW1lIiwidGFyZ2V0IiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJfX2V4cG9ydCIsImFsbCIsIm5hbWUiLCJnZXQiLCJlbnVtZXJhYmxlIiwiX19jb3B5UHJvcHMiLCJ0byIsImZyb20iLCJleGNlcHQiLCJkZXNjIiwia2V5IiwiY2FsbCIsIl9fdG9Db21tb25KUyIsIm1vZCIsInNyY19leHBvcnRzIiwiaXNBcnJheUJ1ZmZlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcmciLCJBcnJheUJ1ZmZlciIsInRvU3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/is-array-buffer/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointFromConfig.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointFromConfig.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getEndpointFromConfig = void 0;\nconst node_config_provider_1 = __webpack_require__(/*! @smithy/node-config-provider */ \"(rsc)/./node_modules/@smithy/node-config-provider/dist-cjs/index.js\");\nconst getEndpointUrlConfig_1 = __webpack_require__(/*! ./getEndpointUrlConfig */ \"(rsc)/./node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointUrlConfig.js\");\nconst getEndpointFromConfig = async (serviceId)=>(0, node_config_provider_1.loadConfig)((0, getEndpointUrlConfig_1.getEndpointUrlConfig)(serviceId))();\nexports.getEndpointFromConfig = getEndpointFromConfig;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLWVuZHBvaW50L2Rpc3QtY2pzL2FkYXB0b3JzL2dldEVuZHBvaW50RnJvbUNvbmZpZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsNkJBQTZCLEdBQUcsS0FBSztBQUNyQyxNQUFNRyx5QkFBeUJDLG1CQUFPQSxDQUFDLHlHQUE4QjtBQUNyRSxNQUFNQyx5QkFBeUJELG1CQUFPQSxDQUFDLDBIQUF3QjtBQUMvRCxNQUFNRix3QkFBd0IsT0FBT0ksWUFBYyxDQUFDLEdBQUdILHVCQUF1QkksVUFBVSxFQUFFLENBQUMsR0FBR0YsdUJBQXVCRyxvQkFBb0IsRUFBRUY7QUFDM0lOLDZCQUE2QixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2QtYmxvZy8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L21pZGRsZXdhcmUtZW5kcG9pbnQvZGlzdC1janMvYWRhcHRvcnMvZ2V0RW5kcG9pbnRGcm9tQ29uZmlnLmpzPzFjMzMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldEVuZHBvaW50RnJvbUNvbmZpZyA9IHZvaWQgMDtcbmNvbnN0IG5vZGVfY29uZmlnX3Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiQHNtaXRoeS9ub2RlLWNvbmZpZy1wcm92aWRlclwiKTtcbmNvbnN0IGdldEVuZHBvaW50VXJsQ29uZmlnXzEgPSByZXF1aXJlKFwiLi9nZXRFbmRwb2ludFVybENvbmZpZ1wiKTtcbmNvbnN0IGdldEVuZHBvaW50RnJvbUNvbmZpZyA9IGFzeW5jIChzZXJ2aWNlSWQpID0+ICgwLCBub2RlX2NvbmZpZ19wcm92aWRlcl8xLmxvYWRDb25maWcpKCgwLCBnZXRFbmRwb2ludFVybENvbmZpZ18xLmdldEVuZHBvaW50VXJsQ29uZmlnKShzZXJ2aWNlSWQpKSgpO1xuZXhwb3J0cy5nZXRFbmRwb2ludEZyb21Db25maWcgPSBnZXRFbmRwb2ludEZyb21Db25maWc7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXRFbmRwb2ludEZyb21Db25maWciLCJub2RlX2NvbmZpZ19wcm92aWRlcl8xIiwicmVxdWlyZSIsImdldEVuZHBvaW50VXJsQ29uZmlnXzEiLCJzZXJ2aWNlSWQiLCJsb2FkQ29uZmlnIiwiZ2V0RW5kcG9pbnRVcmxDb25maWciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointFromConfig.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointUrlConfig.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointUrlConfig.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getEndpointUrlConfig = void 0;\nconst shared_ini_file_loader_1 = __webpack_require__(/*! @smithy/shared-ini-file-loader */ \"(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js\");\nconst ENV_ENDPOINT_URL = \"AWS_ENDPOINT_URL\";\nconst CONFIG_ENDPOINT_URL = \"endpoint_url\";\nconst getEndpointUrlConfig = (serviceId)=>({\n        environmentVariableSelector: (env)=>{\n            const serviceSuffixParts = serviceId.split(\" \").map((w)=>w.toUpperCase());\n            const serviceEndpointUrl = env[[\n                ENV_ENDPOINT_URL,\n                ...serviceSuffixParts\n            ].join(\"_\")];\n            if (serviceEndpointUrl) return serviceEndpointUrl;\n            const endpointUrl = env[ENV_ENDPOINT_URL];\n            if (endpointUrl) return endpointUrl;\n            return undefined;\n        },\n        configFileSelector: (profile, config)=>{\n            if (config && profile.services) {\n                const servicesSection = config[[\n                    \"services\",\n                    profile.services\n                ].join(shared_ini_file_loader_1.CONFIG_PREFIX_SEPARATOR)];\n                if (servicesSection) {\n                    const servicePrefixParts = serviceId.split(\" \").map((w)=>w.toLowerCase());\n                    const endpointUrl = servicesSection[[\n                        servicePrefixParts.join(\"_\"),\n                        CONFIG_ENDPOINT_URL\n                    ].join(shared_ini_file_loader_1.CONFIG_PREFIX_SEPARATOR)];\n                    if (endpointUrl) return endpointUrl;\n                }\n            }\n            const endpointUrl = profile[CONFIG_ENDPOINT_URL];\n            if (endpointUrl) return endpointUrl;\n            return undefined;\n        },\n        default: undefined\n    });\nexports.getEndpointUrlConfig = getEndpointUrlConfig;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLWVuZHBvaW50L2Rpc3QtY2pzL2FkYXB0b3JzL2dldEVuZHBvaW50VXJsQ29uZmlnLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCw0QkFBNEIsR0FBRyxLQUFLO0FBQ3BDLE1BQU1HLDJCQUEyQkMsbUJBQU9BLENBQUMsNkdBQWdDO0FBQ3pFLE1BQU1DLG1CQUFtQjtBQUN6QixNQUFNQyxzQkFBc0I7QUFDNUIsTUFBTUosdUJBQXVCLENBQUNLLFlBQWU7UUFDekNDLDZCQUE2QixDQUFDQztZQUMxQixNQUFNQyxxQkFBcUJILFVBQVVJLEtBQUssQ0FBQyxLQUFLQyxHQUFHLENBQUMsQ0FBQ0MsSUFBTUEsRUFBRUMsV0FBVztZQUN4RSxNQUFNQyxxQkFBcUJOLEdBQUcsQ0FBQztnQkFBQ0o7bUJBQXFCSzthQUFtQixDQUFDTSxJQUFJLENBQUMsS0FBSztZQUNuRixJQUFJRCxvQkFDQSxPQUFPQTtZQUNYLE1BQU1FLGNBQWNSLEdBQUcsQ0FBQ0osaUJBQWlCO1lBQ3pDLElBQUlZLGFBQ0EsT0FBT0E7WUFDWCxPQUFPQztRQUNYO1FBQ0FDLG9CQUFvQixDQUFDQyxTQUFTQztZQUMxQixJQUFJQSxVQUFVRCxRQUFRRSxRQUFRLEVBQUU7Z0JBQzVCLE1BQU1DLGtCQUFrQkYsTUFBTSxDQUFDO29CQUFDO29CQUFZRCxRQUFRRSxRQUFRO2lCQUFDLENBQUNOLElBQUksQ0FBQ2IseUJBQXlCcUIsdUJBQXVCLEVBQUU7Z0JBQ3JILElBQUlELGlCQUFpQjtvQkFDakIsTUFBTUUscUJBQXFCbEIsVUFBVUksS0FBSyxDQUFDLEtBQUtDLEdBQUcsQ0FBQyxDQUFDQyxJQUFNQSxFQUFFYSxXQUFXO29CQUN4RSxNQUFNVCxjQUFjTSxlQUFlLENBQUM7d0JBQUNFLG1CQUFtQlQsSUFBSSxDQUFDO3dCQUFNVjtxQkFBb0IsQ0FBQ1UsSUFBSSxDQUFDYix5QkFBeUJxQix1QkFBdUIsRUFBRTtvQkFDL0ksSUFBSVAsYUFDQSxPQUFPQTtnQkFDZjtZQUNKO1lBQ0EsTUFBTUEsY0FBY0csT0FBTyxDQUFDZCxvQkFBb0I7WUFDaEQsSUFBSVcsYUFDQSxPQUFPQTtZQUNYLE9BQU9DO1FBQ1g7UUFDQVMsU0FBU1Q7SUFDYjtBQUNBbEIsNEJBQTRCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vZC1ibG9nLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbWlkZGxld2FyZS1lbmRwb2ludC9kaXN0LWNqcy9hZGFwdG9ycy9nZXRFbmRwb2ludFVybENvbmZpZy5qcz9kOGEyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRFbmRwb2ludFVybENvbmZpZyA9IHZvaWQgMDtcbmNvbnN0IHNoYXJlZF9pbmlfZmlsZV9sb2FkZXJfMSA9IHJlcXVpcmUoXCJAc21pdGh5L3NoYXJlZC1pbmktZmlsZS1sb2FkZXJcIik7XG5jb25zdCBFTlZfRU5EUE9JTlRfVVJMID0gXCJBV1NfRU5EUE9JTlRfVVJMXCI7XG5jb25zdCBDT05GSUdfRU5EUE9JTlRfVVJMID0gXCJlbmRwb2ludF91cmxcIjtcbmNvbnN0IGdldEVuZHBvaW50VXJsQ29uZmlnID0gKHNlcnZpY2VJZCkgPT4gKHtcbiAgICBlbnZpcm9ubWVudFZhcmlhYmxlU2VsZWN0b3I6IChlbnYpID0+IHtcbiAgICAgICAgY29uc3Qgc2VydmljZVN1ZmZpeFBhcnRzID0gc2VydmljZUlkLnNwbGl0KFwiIFwiKS5tYXAoKHcpID0+IHcudG9VcHBlckNhc2UoKSk7XG4gICAgICAgIGNvbnN0IHNlcnZpY2VFbmRwb2ludFVybCA9IGVudltbRU5WX0VORFBPSU5UX1VSTCwgLi4uc2VydmljZVN1ZmZpeFBhcnRzXS5qb2luKFwiX1wiKV07XG4gICAgICAgIGlmIChzZXJ2aWNlRW5kcG9pbnRVcmwpXG4gICAgICAgICAgICByZXR1cm4gc2VydmljZUVuZHBvaW50VXJsO1xuICAgICAgICBjb25zdCBlbmRwb2ludFVybCA9IGVudltFTlZfRU5EUE9JTlRfVVJMXTtcbiAgICAgICAgaWYgKGVuZHBvaW50VXJsKVxuICAgICAgICAgICAgcmV0dXJuIGVuZHBvaW50VXJsO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sXG4gICAgY29uZmlnRmlsZVNlbGVjdG9yOiAocHJvZmlsZSwgY29uZmlnKSA9PiB7XG4gICAgICAgIGlmIChjb25maWcgJiYgcHJvZmlsZS5zZXJ2aWNlcykge1xuICAgICAgICAgICAgY29uc3Qgc2VydmljZXNTZWN0aW9uID0gY29uZmlnW1tcInNlcnZpY2VzXCIsIHByb2ZpbGUuc2VydmljZXNdLmpvaW4oc2hhcmVkX2luaV9maWxlX2xvYWRlcl8xLkNPTkZJR19QUkVGSVhfU0VQQVJBVE9SKV07XG4gICAgICAgICAgICBpZiAoc2VydmljZXNTZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VydmljZVByZWZpeFBhcnRzID0gc2VydmljZUlkLnNwbGl0KFwiIFwiKS5tYXAoKHcpID0+IHcudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZW5kcG9pbnRVcmwgPSBzZXJ2aWNlc1NlY3Rpb25bW3NlcnZpY2VQcmVmaXhQYXJ0cy5qb2luKFwiX1wiKSwgQ09ORklHX0VORFBPSU5UX1VSTF0uam9pbihzaGFyZWRfaW5pX2ZpbGVfbG9hZGVyXzEuQ09ORklHX1BSRUZJWF9TRVBBUkFUT1IpXTtcbiAgICAgICAgICAgICAgICBpZiAoZW5kcG9pbnRVcmwpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbmRwb2ludFVybDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbmRwb2ludFVybCA9IHByb2ZpbGVbQ09ORklHX0VORFBPSU5UX1VSTF07XG4gICAgICAgIGlmIChlbmRwb2ludFVybClcbiAgICAgICAgICAgIHJldHVybiBlbmRwb2ludFVybDtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9LFxuICAgIGRlZmF1bHQ6IHVuZGVmaW5lZCxcbn0pO1xuZXhwb3J0cy5nZXRFbmRwb2ludFVybENvbmZpZyA9IGdldEVuZHBvaW50VXJsQ29uZmlnO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0RW5kcG9pbnRVcmxDb25maWciLCJzaGFyZWRfaW5pX2ZpbGVfbG9hZGVyXzEiLCJyZXF1aXJlIiwiRU5WX0VORFBPSU5UX1VSTCIsIkNPTkZJR19FTkRQT0lOVF9VUkwiLCJzZXJ2aWNlSWQiLCJlbnZpcm9ubWVudFZhcmlhYmxlU2VsZWN0b3IiLCJlbnYiLCJzZXJ2aWNlU3VmZml4UGFydHMiLCJzcGxpdCIsIm1hcCIsInciLCJ0b1VwcGVyQ2FzZSIsInNlcnZpY2VFbmRwb2ludFVybCIsImpvaW4iLCJlbmRwb2ludFVybCIsInVuZGVmaW5lZCIsImNvbmZpZ0ZpbGVTZWxlY3RvciIsInByb2ZpbGUiLCJjb25maWciLCJzZXJ2aWNlcyIsInNlcnZpY2VzU2VjdGlvbiIsIkNPTkZJR19QUkVGSVhfU0VQQVJBVE9SIiwic2VydmljZVByZWZpeFBhcnRzIiwidG9Mb3dlckNhc2UiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointUrlConfig.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/middleware-endpoint/dist-cjs/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@smithy/middleware-endpoint/dist-cjs/index.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    endpointMiddleware: ()=>endpointMiddleware,\n    endpointMiddlewareOptions: ()=>endpointMiddlewareOptions,\n    getEndpointFromInstructions: ()=>getEndpointFromInstructions,\n    getEndpointPlugin: ()=>getEndpointPlugin,\n    resolveEndpointConfig: ()=>resolveEndpointConfig,\n    resolveParams: ()=>resolveParams,\n    toEndpointV1: ()=>toEndpointV1\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/service-customizations/s3.ts\nvar resolveParamsForS3 = /* @__PURE__ */ __name(async (endpointParams)=>{\n    const bucket = (endpointParams == null ? void 0 : endpointParams.Bucket) || \"\";\n    if (typeof endpointParams.Bucket === \"string\") {\n        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent(\"#\")).replace(/\\?/g, encodeURIComponent(\"?\"));\n    }\n    if (isArnBucketName(bucket)) {\n        if (endpointParams.ForcePathStyle === true) {\n            throw new Error(\"Path-style addressing cannot be used with ARN buckets\");\n        }\n    } else if (!isDnsCompatibleBucketName(bucket) || bucket.indexOf(\".\") !== -1 && !String(endpointParams.Endpoint).startsWith(\"http:\") || bucket.toLowerCase() !== bucket || bucket.length < 3) {\n        endpointParams.ForcePathStyle = true;\n    }\n    if (endpointParams.DisableMultiRegionAccessPoints) {\n        endpointParams.disableMultiRegionAccessPoints = true;\n        endpointParams.DisableMRAP = true;\n    }\n    return endpointParams;\n}, \"resolveParamsForS3\");\nvar DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/;\nvar IP_ADDRESS_PATTERN = /(\\d+\\.){3}\\d+/;\nvar DOTS_PATTERN = /\\.\\./;\nvar isDnsCompatibleBucketName = /* @__PURE__ */ __name((bucketName)=>DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName), \"isDnsCompatibleBucketName\");\nvar isArnBucketName = /* @__PURE__ */ __name((bucketName)=>{\n    const [arn, partition, service, , , bucket] = bucketName.split(\":\");\n    const isArn = arn === \"arn\" && bucketName.split(\":\").length >= 6;\n    const isValidArn = Boolean(isArn && partition && service && bucket);\n    if (isArn && !isValidArn) {\n        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);\n    }\n    return isValidArn;\n}, \"isArnBucketName\");\n// src/adaptors/createConfigValueProvider.ts\nvar createConfigValueProvider = /* @__PURE__ */ __name((configKey, canonicalEndpointParamKey, config)=>{\n    const configProvider = /* @__PURE__ */ __name(async ()=>{\n        const configValue = config[configKey] ?? config[canonicalEndpointParamKey];\n        if (typeof configValue === \"function\") {\n            return configValue();\n        }\n        return configValue;\n    }, \"configProvider\");\n    if (configKey === \"credentialScope\" || canonicalEndpointParamKey === \"CredentialScope\") {\n        return async ()=>{\n            const credentials = typeof config.credentials === \"function\" ? await config.credentials() : config.credentials;\n            const configValue = (credentials == null ? void 0 : credentials.credentialScope) ?? (credentials == null ? void 0 : credentials.CredentialScope);\n            return configValue;\n        };\n    }\n    if (configKey === \"endpoint\" || canonicalEndpointParamKey === \"endpoint\") {\n        return async ()=>{\n            const endpoint = await configProvider();\n            if (endpoint && typeof endpoint === \"object\") {\n                if (\"url\" in endpoint) {\n                    return endpoint.url.href;\n                }\n                if (\"hostname\" in endpoint) {\n                    const { protocol, hostname, port, path } = endpoint;\n                    return `${protocol}//${hostname}${port ? \":\" + port : \"\"}${path}`;\n                }\n            }\n            return endpoint;\n        };\n    }\n    return configProvider;\n}, \"createConfigValueProvider\");\n// src/adaptors/getEndpointFromInstructions.ts\nvar import_getEndpointFromConfig = __webpack_require__(/*! ./adaptors/getEndpointFromConfig */ \"(rsc)/./node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointFromConfig.js\");\n// src/adaptors/toEndpointV1.ts\nvar import_url_parser = __webpack_require__(/*! @smithy/url-parser */ \"(rsc)/./node_modules/@smithy/url-parser/dist-cjs/index.js\");\nvar toEndpointV1 = /* @__PURE__ */ __name((endpoint)=>{\n    if (typeof endpoint === \"object\") {\n        if (\"url\" in endpoint) {\n            return (0, import_url_parser.parseUrl)(endpoint.url);\n        }\n        return endpoint;\n    }\n    return (0, import_url_parser.parseUrl)(endpoint);\n}, \"toEndpointV1\");\n// src/adaptors/getEndpointFromInstructions.ts\nvar getEndpointFromInstructions = /* @__PURE__ */ __name(async (commandInput, instructionsSupplier, clientConfig, context)=>{\n    if (!clientConfig.endpoint) {\n        const endpointFromConfig = await (0, import_getEndpointFromConfig.getEndpointFromConfig)(clientConfig.serviceId || \"\");\n        if (endpointFromConfig) {\n            clientConfig.endpoint = ()=>Promise.resolve(toEndpointV1(endpointFromConfig));\n        }\n    }\n    const endpointParams = await resolveParams(commandInput, instructionsSupplier, clientConfig);\n    if (typeof clientConfig.endpointProvider !== \"function\") {\n        throw new Error(\"config.endpointProvider is not set.\");\n    }\n    const endpoint = clientConfig.endpointProvider(endpointParams, context);\n    return endpoint;\n}, \"getEndpointFromInstructions\");\nvar resolveParams = /* @__PURE__ */ __name(async (commandInput, instructionsSupplier, clientConfig)=>{\n    var _a;\n    const endpointParams = {};\n    const instructions = ((_a = instructionsSupplier == null ? void 0 : instructionsSupplier.getEndpointParameterInstructions) == null ? void 0 : _a.call(instructionsSupplier)) || {};\n    for (const [name, instruction] of Object.entries(instructions)){\n        switch(instruction.type){\n            case \"staticContextParams\":\n                endpointParams[name] = instruction.value;\n                break;\n            case \"contextParams\":\n                endpointParams[name] = commandInput[instruction.name];\n                break;\n            case \"clientContextParams\":\n            case \"builtInParams\":\n                endpointParams[name] = await createConfigValueProvider(instruction.name, name, clientConfig)();\n                break;\n            default:\n                throw new Error(\"Unrecognized endpoint parameter instruction: \" + JSON.stringify(instruction));\n        }\n    }\n    if (Object.keys(instructions).length === 0) {\n        Object.assign(endpointParams, clientConfig);\n    }\n    if (String(clientConfig.serviceId).toLowerCase() === \"s3\") {\n        await resolveParamsForS3(endpointParams);\n    }\n    return endpointParams;\n}, \"resolveParams\");\n// src/endpointMiddleware.ts\nvar import_util_middleware = __webpack_require__(/*! @smithy/util-middleware */ \"(rsc)/./node_modules/@smithy/util-middleware/dist-cjs/index.js\");\nvar endpointMiddleware = /* @__PURE__ */ __name(({ config, instructions })=>{\n    return (next, context)=>async (args)=>{\n            var _a, _b, _c;\n            const endpoint = await getEndpointFromInstructions(args.input, {\n                getEndpointParameterInstructions () {\n                    return instructions;\n                }\n            }, {\n                ...config\n            }, context);\n            context.endpointV2 = endpoint;\n            context.authSchemes = (_a = endpoint.properties) == null ? void 0 : _a.authSchemes;\n            const authScheme = (_b = context.authSchemes) == null ? void 0 : _b[0];\n            if (authScheme) {\n                context[\"signing_region\"] = authScheme.signingRegion;\n                context[\"signing_service\"] = authScheme.signingName;\n                const smithyContext = (0, import_util_middleware.getSmithyContext)(context);\n                const httpAuthOption = (_c = smithyContext == null ? void 0 : smithyContext.selectedHttpAuthScheme) == null ? void 0 : _c.httpAuthOption;\n                if (httpAuthOption) {\n                    httpAuthOption.signingProperties = Object.assign(httpAuthOption.signingProperties || {}, {\n                        signing_region: authScheme.signingRegion,\n                        signingRegion: authScheme.signingRegion,\n                        signing_service: authScheme.signingName,\n                        signingName: authScheme.signingName,\n                        signingRegionSet: authScheme.signingRegionSet\n                    }, authScheme.properties);\n                }\n            }\n            return next({\n                ...args\n            });\n        };\n}, \"endpointMiddleware\");\n// src/getEndpointPlugin.ts\nvar import_middleware_serde = __webpack_require__(/*! @smithy/middleware-serde */ \"(rsc)/./node_modules/@smithy/middleware-serde/dist-cjs/index.js\");\nvar endpointMiddlewareOptions = {\n    step: \"serialize\",\n    tags: [\n        \"ENDPOINT_PARAMETERS\",\n        \"ENDPOINT_V2\",\n        \"ENDPOINT\"\n    ],\n    name: \"endpointV2Middleware\",\n    override: true,\n    relation: \"before\",\n    toMiddleware: import_middleware_serde.serializerMiddlewareOption.name\n};\nvar getEndpointPlugin = /* @__PURE__ */ __name((config, instructions)=>({\n        applyToStack: (clientStack)=>{\n            clientStack.addRelativeTo(endpointMiddleware({\n                config,\n                instructions\n            }), endpointMiddlewareOptions);\n        }\n    }), \"getEndpointPlugin\");\n// src/resolveEndpointConfig.ts\nvar resolveEndpointConfig = /* @__PURE__ */ __name((input)=>{\n    const tls = input.tls ?? true;\n    const { endpoint } = input;\n    const customEndpointProvider = endpoint != null ? async ()=>toEndpointV1(await (0, import_util_middleware.normalizeProvider)(endpoint)()) : void 0;\n    const isCustomEndpoint = !!endpoint;\n    return {\n        ...input,\n        endpoint: customEndpointProvider,\n        tls,\n        isCustomEndpoint,\n        useDualstackEndpoint: (0, import_util_middleware.normalizeProvider)(input.useDualstackEndpoint ?? false),\n        useFipsEndpoint: (0, import_util_middleware.normalizeProvider)(input.useFipsEndpoint ?? false)\n    };\n}, \"resolveEndpointConfig\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/middleware-endpoint/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/middleware-serde/dist-cjs/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@smithy/middleware-serde/dist-cjs/index.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    deserializerMiddleware: ()=>deserializerMiddleware,\n    deserializerMiddlewareOption: ()=>deserializerMiddlewareOption,\n    getSerdePlugin: ()=>getSerdePlugin,\n    serializerMiddleware: ()=>serializerMiddleware,\n    serializerMiddlewareOption: ()=>serializerMiddlewareOption\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/deserializerMiddleware.ts\nvar deserializerMiddleware = /* @__PURE__ */ __name((options, deserializer)=>(next, context)=>async (args)=>{\n            const { response } = await next(args);\n            try {\n                const parsed = await deserializer(response, options);\n                return {\n                    response,\n                    output: parsed\n                };\n            } catch (error) {\n                Object.defineProperty(error, \"$response\", {\n                    value: response\n                });\n                if (!(\"$metadata\" in error)) {\n                    const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;\n                    error.message += \"\\n  \" + hint;\n                    if (typeof error.$responseBodyText !== \"undefined\") {\n                        if (error.$response) {\n                            error.$response.body = error.$responseBodyText;\n                        }\n                    }\n                }\n                throw error;\n            }\n        }, \"deserializerMiddleware\");\n// src/serializerMiddleware.ts\nvar serializerMiddleware = /* @__PURE__ */ __name((options, serializer)=>(next, context)=>async (args)=>{\n            var _a;\n            const endpoint = ((_a = context.endpointV2) == null ? void 0 : _a.url) && options.urlParser ? async ()=>options.urlParser(context.endpointV2.url) : options.endpoint;\n            if (!endpoint) {\n                throw new Error(\"No valid endpoint provider available.\");\n            }\n            const request = await serializer(args.input, {\n                ...options,\n                endpoint\n            });\n            return next({\n                ...args,\n                request\n            });\n        }, \"serializerMiddleware\");\n// src/serdePlugin.ts\nvar deserializerMiddlewareOption = {\n    name: \"deserializerMiddleware\",\n    step: \"deserialize\",\n    tags: [\n        \"DESERIALIZER\"\n    ],\n    override: true\n};\nvar serializerMiddlewareOption = {\n    name: \"serializerMiddleware\",\n    step: \"serialize\",\n    tags: [\n        \"SERIALIZER\"\n    ],\n    override: true\n};\nfunction getSerdePlugin(config, serializer, deserializer) {\n    return {\n        applyToStack: (commandStack)=>{\n            commandStack.add(deserializerMiddleware(config, deserializer), deserializerMiddlewareOption);\n            commandStack.add(serializerMiddleware(config, serializer), serializerMiddlewareOption);\n        }\n    };\n}\n__name(getSerdePlugin, \"getSerdePlugin\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLXNlcmRlL2Rpc3QtY2pzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxZQUFZQyxPQUFPQyxjQUFjO0FBQ3JDLElBQUlDLG1CQUFtQkYsT0FBT0csd0JBQXdCO0FBQ3RELElBQUlDLG9CQUFvQkosT0FBT0ssbUJBQW1CO0FBQ2xELElBQUlDLGVBQWVOLE9BQU9PLFNBQVMsQ0FBQ0MsY0FBYztBQUNsRCxJQUFJQyxTQUFTLENBQUNDLFFBQVFDLFFBQVVaLFVBQVVXLFFBQVEsUUFBUTtRQUFFQztRQUFPQyxjQUFjO0lBQUs7QUFDdEYsSUFBSUMsV0FBVyxDQUFDSCxRQUFRSTtJQUN0QixJQUFLLElBQUlDLFFBQVFELElBQ2ZmLFVBQVVXLFFBQVFLLE1BQU07UUFBRUMsS0FBS0YsR0FBRyxDQUFDQyxLQUFLO1FBQUVFLFlBQVk7SUFBSztBQUMvRDtBQUNBLElBQUlDLGNBQWMsQ0FBQ0MsSUFBSUMsTUFBTUMsUUFBUUM7SUFDbkMsSUFBSUYsUUFBUSxPQUFPQSxTQUFTLFlBQVksT0FBT0EsU0FBUyxZQUFZO1FBQ2xFLEtBQUssSUFBSUcsT0FBT25CLGtCQUFrQmdCLE1BQ2hDLElBQUksQ0FBQ2QsYUFBYWtCLElBQUksQ0FBQ0wsSUFBSUksUUFBUUEsUUFBUUYsUUFDekN0QixVQUFVb0IsSUFBSUksS0FBSztZQUFFUCxLQUFLLElBQU1JLElBQUksQ0FBQ0csSUFBSTtZQUFFTixZQUFZLENBQUVLLENBQUFBLE9BQU9wQixpQkFBaUJrQixNQUFNRyxJQUFHLEtBQU1ELEtBQUtMLFVBQVU7UUFBQztJQUN0SDtJQUNBLE9BQU9FO0FBQ1Q7QUFDQSxJQUFJTSxlQUFlLENBQUNDLE1BQVFSLFlBQVluQixVQUFVLENBQUMsR0FBRyxjQUFjO1FBQUVZLE9BQU87SUFBSyxJQUFJZTtBQUV0RixlQUFlO0FBQ2YsSUFBSUMsY0FBYyxDQUFDO0FBQ25CZCxTQUFTYyxhQUFhO0lBQ3BCQyx3QkFBd0IsSUFBTUE7SUFDOUJDLDhCQUE4QixJQUFNQTtJQUNwQ0MsZ0JBQWdCLElBQU1BO0lBQ3RCQyxzQkFBc0IsSUFBTUE7SUFDNUJDLDRCQUE0QixJQUFNQTtBQUNwQztBQUNBQyxPQUFPQyxPQUFPLEdBQUdULGFBQWFFO0FBRTlCLGdDQUFnQztBQUNoQyxJQUFJQyx5QkFBeUIsYUFBYSxHQUFHbkIsT0FBTyxDQUFDMEIsU0FBU0MsZUFBaUIsQ0FBQ0MsTUFBTUMsVUFBWSxPQUFPQztZQUN2RyxNQUFNLEVBQUVDLFFBQVEsRUFBRSxHQUFHLE1BQU1ILEtBQUtFO1lBQ2hDLElBQUk7Z0JBQ0YsTUFBTUUsU0FBUyxNQUFNTCxhQUFhSSxVQUFVTDtnQkFDNUMsT0FBTztvQkFDTEs7b0JBQ0FFLFFBQVFEO2dCQUNWO1lBQ0YsRUFBRSxPQUFPRSxPQUFPO2dCQUNkM0MsT0FBT0MsY0FBYyxDQUFDMEMsT0FBTyxhQUFhO29CQUN4Q2hDLE9BQU82QjtnQkFDVDtnQkFDQSxJQUFJLENBQUUsZ0JBQWVHLEtBQUksR0FBSTtvQkFDM0IsTUFBTUMsT0FBTyxDQUFDLDBHQUEwRyxDQUFDO29CQUN6SEQsTUFBTUUsT0FBTyxJQUFJLFNBQVNEO29CQUMxQixJQUFJLE9BQU9ELE1BQU1HLGlCQUFpQixLQUFLLGFBQWE7d0JBQ2xELElBQUlILE1BQU1JLFNBQVMsRUFBRTs0QkFDbkJKLE1BQU1JLFNBQVMsQ0FBQ0MsSUFBSSxHQUFHTCxNQUFNRyxpQkFBaUI7d0JBQ2hEO29CQUNGO2dCQUNGO2dCQUNBLE1BQU1IO1lBQ1I7UUFDRixHQUFHO0FBRUgsOEJBQThCO0FBQzlCLElBQUlaLHVCQUF1QixhQUFhLEdBQUd0QixPQUFPLENBQUMwQixTQUFTYyxhQUFlLENBQUNaLE1BQU1DLFVBQVksT0FBT0M7WUFDbkcsSUFBSVc7WUFDSixNQUFNQyxXQUFXLENBQUMsQ0FBQ0QsS0FBS1osUUFBUWMsVUFBVSxLQUFLLE9BQU8sS0FBSyxJQUFJRixHQUFHRyxHQUFHLEtBQUtsQixRQUFRbUIsU0FBUyxHQUFHLFVBQVluQixRQUFRbUIsU0FBUyxDQUFDaEIsUUFBUWMsVUFBVSxDQUFDQyxHQUFHLElBQUlsQixRQUFRZ0IsUUFBUTtZQUN0SyxJQUFJLENBQUNBLFVBQVU7Z0JBQ2IsTUFBTSxJQUFJSSxNQUFNO1lBQ2xCO1lBQ0EsTUFBTUMsVUFBVSxNQUFNUCxXQUFXVixLQUFLa0IsS0FBSyxFQUFFO2dCQUFFLEdBQUd0QixPQUFPO2dCQUFFZ0I7WUFBUztZQUNwRSxPQUFPZCxLQUFLO2dCQUNWLEdBQUdFLElBQUk7Z0JBQ1BpQjtZQUNGO1FBQ0YsR0FBRztBQUVILHFCQUFxQjtBQUNyQixJQUFJM0IsK0JBQStCO0lBQ2pDZCxNQUFNO0lBQ04yQyxNQUFNO0lBQ05DLE1BQU07UUFBQztLQUFlO0lBQ3RCQyxVQUFVO0FBQ1o7QUFDQSxJQUFJNUIsNkJBQTZCO0lBQy9CakIsTUFBTTtJQUNOMkMsTUFBTTtJQUNOQyxNQUFNO1FBQUM7S0FBYTtJQUNwQkMsVUFBVTtBQUNaO0FBQ0EsU0FBUzlCLGVBQWUrQixNQUFNLEVBQUVaLFVBQVUsRUFBRWIsWUFBWTtJQUN0RCxPQUFPO1FBQ0wwQixjQUFjLENBQUNDO1lBQ2JBLGFBQWFDLEdBQUcsQ0FBQ3BDLHVCQUF1QmlDLFFBQVF6QixlQUFlUDtZQUMvRGtDLGFBQWFDLEdBQUcsQ0FBQ2pDLHFCQUFxQjhCLFFBQVFaLGFBQWFqQjtRQUM3RDtJQUNGO0FBQ0Y7QUFDQXZCLE9BQU9xQixnQkFBZ0I7QUFDdkIsNkRBQTZEO0FBRTdELEtBQU1HLENBQUFBLENBTU4iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb29kLWJsb2cvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLXNlcmRlL2Rpc3QtY2pzL2luZGV4LmpzPzk4NGUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIGRlc2VyaWFsaXplck1pZGRsZXdhcmU6ICgpID0+IGRlc2VyaWFsaXplck1pZGRsZXdhcmUsXG4gIGRlc2VyaWFsaXplck1pZGRsZXdhcmVPcHRpb246ICgpID0+IGRlc2VyaWFsaXplck1pZGRsZXdhcmVPcHRpb24sXG4gIGdldFNlcmRlUGx1Z2luOiAoKSA9PiBnZXRTZXJkZVBsdWdpbixcbiAgc2VyaWFsaXplck1pZGRsZXdhcmU6ICgpID0+IHNlcmlhbGl6ZXJNaWRkbGV3YXJlLFxuICBzZXJpYWxpemVyTWlkZGxld2FyZU9wdGlvbjogKCkgPT4gc2VyaWFsaXplck1pZGRsZXdhcmVPcHRpb25cbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xuXG4vLyBzcmMvZGVzZXJpYWxpemVyTWlkZGxld2FyZS50c1xudmFyIGRlc2VyaWFsaXplck1pZGRsZXdhcmUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvcHRpb25zLCBkZXNlcmlhbGl6ZXIpID0+IChuZXh0LCBjb250ZXh0KSA9PiBhc3luYyAoYXJncykgPT4ge1xuICBjb25zdCB7IHJlc3BvbnNlIH0gPSBhd2FpdCBuZXh0KGFyZ3MpO1xuICB0cnkge1xuICAgIGNvbnN0IHBhcnNlZCA9IGF3YWl0IGRlc2VyaWFsaXplcihyZXNwb25zZSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3BvbnNlLFxuICAgICAgb3V0cHV0OiBwYXJzZWRcbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlcnJvciwgXCIkcmVzcG9uc2VcIiwge1xuICAgICAgdmFsdWU6IHJlc3BvbnNlXG4gICAgfSk7XG4gICAgaWYgKCEoXCIkbWV0YWRhdGFcIiBpbiBlcnJvcikpIHtcbiAgICAgIGNvbnN0IGhpbnQgPSBgRGVzZXJpYWxpemF0aW9uIGVycm9yOiB0byBzZWUgdGhlIHJhdyByZXNwb25zZSwgaW5zcGVjdCB0aGUgaGlkZGVuIGZpZWxkIHtlcnJvcn0uJHJlc3BvbnNlIG9uIHRoaXMgb2JqZWN0LmA7XG4gICAgICBlcnJvci5tZXNzYWdlICs9IFwiXFxuICBcIiArIGhpbnQ7XG4gICAgICBpZiAodHlwZW9mIGVycm9yLiRyZXNwb25zZUJvZHlUZXh0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmIChlcnJvci4kcmVzcG9uc2UpIHtcbiAgICAgICAgICBlcnJvci4kcmVzcG9uc2UuYm9keSA9IGVycm9yLiRyZXNwb25zZUJvZHlUZXh0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRocm93IGVycm9yO1xuICB9XG59LCBcImRlc2VyaWFsaXplck1pZGRsZXdhcmVcIik7XG5cbi8vIHNyYy9zZXJpYWxpemVyTWlkZGxld2FyZS50c1xudmFyIHNlcmlhbGl6ZXJNaWRkbGV3YXJlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3B0aW9ucywgc2VyaWFsaXplcikgPT4gKG5leHQsIGNvbnRleHQpID0+IGFzeW5jIChhcmdzKSA9PiB7XG4gIHZhciBfYTtcbiAgY29uc3QgZW5kcG9pbnQgPSAoKF9hID0gY29udGV4dC5lbmRwb2ludFYyKSA9PSBudWxsID8gdm9pZCAwIDogX2EudXJsKSAmJiBvcHRpb25zLnVybFBhcnNlciA/IGFzeW5jICgpID0+IG9wdGlvbnMudXJsUGFyc2VyKGNvbnRleHQuZW5kcG9pbnRWMi51cmwpIDogb3B0aW9ucy5lbmRwb2ludDtcbiAgaWYgKCFlbmRwb2ludCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHZhbGlkIGVuZHBvaW50IHByb3ZpZGVyIGF2YWlsYWJsZS5cIik7XG4gIH1cbiAgY29uc3QgcmVxdWVzdCA9IGF3YWl0IHNlcmlhbGl6ZXIoYXJncy5pbnB1dCwgeyAuLi5vcHRpb25zLCBlbmRwb2ludCB9KTtcbiAgcmV0dXJuIG5leHQoe1xuICAgIC4uLmFyZ3MsXG4gICAgcmVxdWVzdFxuICB9KTtcbn0sIFwic2VyaWFsaXplck1pZGRsZXdhcmVcIik7XG5cbi8vIHNyYy9zZXJkZVBsdWdpbi50c1xudmFyIGRlc2VyaWFsaXplck1pZGRsZXdhcmVPcHRpb24gPSB7XG4gIG5hbWU6IFwiZGVzZXJpYWxpemVyTWlkZGxld2FyZVwiLFxuICBzdGVwOiBcImRlc2VyaWFsaXplXCIsXG4gIHRhZ3M6IFtcIkRFU0VSSUFMSVpFUlwiXSxcbiAgb3ZlcnJpZGU6IHRydWVcbn07XG52YXIgc2VyaWFsaXplck1pZGRsZXdhcmVPcHRpb24gPSB7XG4gIG5hbWU6IFwic2VyaWFsaXplck1pZGRsZXdhcmVcIixcbiAgc3RlcDogXCJzZXJpYWxpemVcIixcbiAgdGFnczogW1wiU0VSSUFMSVpFUlwiXSxcbiAgb3ZlcnJpZGU6IHRydWVcbn07XG5mdW5jdGlvbiBnZXRTZXJkZVBsdWdpbihjb25maWcsIHNlcmlhbGl6ZXIsIGRlc2VyaWFsaXplcikge1xuICByZXR1cm4ge1xuICAgIGFwcGx5VG9TdGFjazogKGNvbW1hbmRTdGFjaykgPT4ge1xuICAgICAgY29tbWFuZFN0YWNrLmFkZChkZXNlcmlhbGl6ZXJNaWRkbGV3YXJlKGNvbmZpZywgZGVzZXJpYWxpemVyKSwgZGVzZXJpYWxpemVyTWlkZGxld2FyZU9wdGlvbik7XG4gICAgICBjb21tYW5kU3RhY2suYWRkKHNlcmlhbGl6ZXJNaWRkbGV3YXJlKGNvbmZpZywgc2VyaWFsaXplciksIHNlcmlhbGl6ZXJNaWRkbGV3YXJlT3B0aW9uKTtcbiAgICB9XG4gIH07XG59XG5fX25hbWUoZ2V0U2VyZGVQbHVnaW4sIFwiZ2V0U2VyZGVQbHVnaW5cIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBkZXNlcmlhbGl6ZXJNaWRkbGV3YXJlLFxuICBkZXNlcmlhbGl6ZXJNaWRkbGV3YXJlT3B0aW9uLFxuICBzZXJpYWxpemVyTWlkZGxld2FyZU9wdGlvbixcbiAgZ2V0U2VyZGVQbHVnaW4sXG4gIHNlcmlhbGl6ZXJNaWRkbGV3YXJlXG59KTtcblxuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9faGFzT3duUHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX19uYW1lIiwidGFyZ2V0IiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJfX2V4cG9ydCIsImFsbCIsIm5hbWUiLCJnZXQiLCJlbnVtZXJhYmxlIiwiX19jb3B5UHJvcHMiLCJ0byIsImZyb20iLCJleGNlcHQiLCJkZXNjIiwia2V5IiwiY2FsbCIsIl9fdG9Db21tb25KUyIsIm1vZCIsInNyY19leHBvcnRzIiwiZGVzZXJpYWxpemVyTWlkZGxld2FyZSIsImRlc2VyaWFsaXplck1pZGRsZXdhcmVPcHRpb24iLCJnZXRTZXJkZVBsdWdpbiIsInNlcmlhbGl6ZXJNaWRkbGV3YXJlIiwic2VyaWFsaXplck1pZGRsZXdhcmVPcHRpb24iLCJtb2R1bGUiLCJleHBvcnRzIiwib3B0aW9ucyIsImRlc2VyaWFsaXplciIsIm5leHQiLCJjb250ZXh0IiwiYXJncyIsInJlc3BvbnNlIiwicGFyc2VkIiwib3V0cHV0IiwiZXJyb3IiLCJoaW50IiwibWVzc2FnZSIsIiRyZXNwb25zZUJvZHlUZXh0IiwiJHJlc3BvbnNlIiwiYm9keSIsInNlcmlhbGl6ZXIiLCJfYSIsImVuZHBvaW50IiwiZW5kcG9pbnRWMiIsInVybCIsInVybFBhcnNlciIsIkVycm9yIiwicmVxdWVzdCIsImlucHV0Iiwic3RlcCIsInRhZ3MiLCJvdmVycmlkZSIsImNvbmZpZyIsImFwcGx5VG9TdGFjayIsImNvbW1hbmRTdGFjayIsImFkZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/middleware-serde/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/middleware-stack/dist-cjs/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@smithy/middleware-stack/dist-cjs/index.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    constructStack: ()=>constructStack\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/MiddlewareStack.ts\nvar getAllAliases = /* @__PURE__ */ __name((name, aliases)=>{\n    const _aliases = [];\n    if (name) {\n        _aliases.push(name);\n    }\n    if (aliases) {\n        for (const alias of aliases){\n            _aliases.push(alias);\n        }\n    }\n    return _aliases;\n}, \"getAllAliases\");\nvar getMiddlewareNameWithAliases = /* @__PURE__ */ __name((name, aliases)=>{\n    return `${name || \"anonymous\"}${aliases && aliases.length > 0 ? ` (a.k.a. ${aliases.join(\",\")})` : \"\"}`;\n}, \"getMiddlewareNameWithAliases\");\nvar constructStack = /* @__PURE__ */ __name(()=>{\n    let absoluteEntries = [];\n    let relativeEntries = [];\n    let identifyOnResolve = false;\n    const entriesNameSet = /* @__PURE__ */ new Set();\n    const sort = /* @__PURE__ */ __name((entries)=>entries.sort((a, b)=>stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"]), \"sort\");\n    const removeByName = /* @__PURE__ */ __name((toRemove)=>{\n        let isRemoved = false;\n        const filterCb = /* @__PURE__ */ __name((entry)=>{\n            const aliases = getAllAliases(entry.name, entry.aliases);\n            if (aliases.includes(toRemove)) {\n                isRemoved = true;\n                for (const alias of aliases){\n                    entriesNameSet.delete(alias);\n                }\n                return false;\n            }\n            return true;\n        }, \"filterCb\");\n        absoluteEntries = absoluteEntries.filter(filterCb);\n        relativeEntries = relativeEntries.filter(filterCb);\n        return isRemoved;\n    }, \"removeByName\");\n    const removeByReference = /* @__PURE__ */ __name((toRemove)=>{\n        let isRemoved = false;\n        const filterCb = /* @__PURE__ */ __name((entry)=>{\n            if (entry.middleware === toRemove) {\n                isRemoved = true;\n                for (const alias of getAllAliases(entry.name, entry.aliases)){\n                    entriesNameSet.delete(alias);\n                }\n                return false;\n            }\n            return true;\n        }, \"filterCb\");\n        absoluteEntries = absoluteEntries.filter(filterCb);\n        relativeEntries = relativeEntries.filter(filterCb);\n        return isRemoved;\n    }, \"removeByReference\");\n    const cloneTo = /* @__PURE__ */ __name((toStack)=>{\n        var _a;\n        absoluteEntries.forEach((entry)=>{\n            toStack.add(entry.middleware, {\n                ...entry\n            });\n        });\n        relativeEntries.forEach((entry)=>{\n            toStack.addRelativeTo(entry.middleware, {\n                ...entry\n            });\n        });\n        (_a = toStack.identifyOnResolve) == null ? void 0 : _a.call(toStack, stack.identifyOnResolve());\n        return toStack;\n    }, \"cloneTo\");\n    const expandRelativeMiddlewareList = /* @__PURE__ */ __name((from)=>{\n        const expandedMiddlewareList = [];\n        from.before.forEach((entry)=>{\n            if (entry.before.length === 0 && entry.after.length === 0) {\n                expandedMiddlewareList.push(entry);\n            } else {\n                expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n            }\n        });\n        expandedMiddlewareList.push(from);\n        from.after.reverse().forEach((entry)=>{\n            if (entry.before.length === 0 && entry.after.length === 0) {\n                expandedMiddlewareList.push(entry);\n            } else {\n                expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n            }\n        });\n        return expandedMiddlewareList;\n    }, \"expandRelativeMiddlewareList\");\n    const getMiddlewareList = /* @__PURE__ */ __name((debug = false)=>{\n        const normalizedAbsoluteEntries = [];\n        const normalizedRelativeEntries = [];\n        const normalizedEntriesNameMap = {};\n        absoluteEntries.forEach((entry)=>{\n            const normalizedEntry = {\n                ...entry,\n                before: [],\n                after: []\n            };\n            for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)){\n                normalizedEntriesNameMap[alias] = normalizedEntry;\n            }\n            normalizedAbsoluteEntries.push(normalizedEntry);\n        });\n        relativeEntries.forEach((entry)=>{\n            const normalizedEntry = {\n                ...entry,\n                before: [],\n                after: []\n            };\n            for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)){\n                normalizedEntriesNameMap[alias] = normalizedEntry;\n            }\n            normalizedRelativeEntries.push(normalizedEntry);\n        });\n        normalizedRelativeEntries.forEach((entry)=>{\n            if (entry.toMiddleware) {\n                const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];\n                if (toMiddleware === void 0) {\n                    if (debug) {\n                        return;\n                    }\n                    throw new Error(`${entry.toMiddleware} is not found when adding ${getMiddlewareNameWithAliases(entry.name, entry.aliases)} middleware ${entry.relation} ${entry.toMiddleware}`);\n                }\n                if (entry.relation === \"after\") {\n                    toMiddleware.after.push(entry);\n                }\n                if (entry.relation === \"before\") {\n                    toMiddleware.before.push(entry);\n                }\n            }\n        });\n        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expandedMiddlewareList)=>{\n            wholeList.push(...expandedMiddlewareList);\n            return wholeList;\n        }, []);\n        return mainChain;\n    }, \"getMiddlewareList\");\n    const stack = {\n        add: (middleware, options = {})=>{\n            const { name, override, aliases: _aliases } = options;\n            const entry = {\n                step: \"initialize\",\n                priority: \"normal\",\n                middleware,\n                ...options\n            };\n            const aliases = getAllAliases(name, _aliases);\n            if (aliases.length > 0) {\n                if (aliases.some((alias)=>entriesNameSet.has(alias))) {\n                    if (!override) throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);\n                    for (const alias of aliases){\n                        const toOverrideIndex = absoluteEntries.findIndex((entry2)=>{\n                            var _a;\n                            return entry2.name === alias || ((_a = entry2.aliases) == null ? void 0 : _a.some((a)=>a === alias));\n                        });\n                        if (toOverrideIndex === -1) {\n                            continue;\n                        }\n                        const toOverride = absoluteEntries[toOverrideIndex];\n                        if (toOverride.step !== entry.step || entry.priority !== toOverride.priority) {\n                            throw new Error(`\"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}\" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by \"${getMiddlewareNameWithAliases(name, _aliases)}\" middleware with ${entry.priority} priority in ${entry.step} step.`);\n                        }\n                        absoluteEntries.splice(toOverrideIndex, 1);\n                    }\n                }\n                for (const alias of aliases){\n                    entriesNameSet.add(alias);\n                }\n            }\n            absoluteEntries.push(entry);\n        },\n        addRelativeTo: (middleware, options)=>{\n            const { name, override, aliases: _aliases } = options;\n            const entry = {\n                middleware,\n                ...options\n            };\n            const aliases = getAllAliases(name, _aliases);\n            if (aliases.length > 0) {\n                if (aliases.some((alias)=>entriesNameSet.has(alias))) {\n                    if (!override) throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);\n                    for (const alias of aliases){\n                        const toOverrideIndex = relativeEntries.findIndex((entry2)=>{\n                            var _a;\n                            return entry2.name === alias || ((_a = entry2.aliases) == null ? void 0 : _a.some((a)=>a === alias));\n                        });\n                        if (toOverrideIndex === -1) {\n                            continue;\n                        }\n                        const toOverride = relativeEntries[toOverrideIndex];\n                        if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {\n                            throw new Error(`\"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}\" middleware ${toOverride.relation} \"${toOverride.toMiddleware}\" middleware cannot be overridden by \"${getMiddlewareNameWithAliases(name, _aliases)}\" middleware ${entry.relation} \"${entry.toMiddleware}\" middleware.`);\n                        }\n                        relativeEntries.splice(toOverrideIndex, 1);\n                    }\n                }\n                for (const alias of aliases){\n                    entriesNameSet.add(alias);\n                }\n            }\n            relativeEntries.push(entry);\n        },\n        clone: ()=>cloneTo(constructStack()),\n        use: (plugin)=>{\n            plugin.applyToStack(stack);\n        },\n        remove: (toRemove)=>{\n            if (typeof toRemove === \"string\") return removeByName(toRemove);\n            else return removeByReference(toRemove);\n        },\n        removeByTag: (toRemove)=>{\n            let isRemoved = false;\n            const filterCb = /* @__PURE__ */ __name((entry)=>{\n                const { tags, name, aliases: _aliases } = entry;\n                if (tags && tags.includes(toRemove)) {\n                    const aliases = getAllAliases(name, _aliases);\n                    for (const alias of aliases){\n                        entriesNameSet.delete(alias);\n                    }\n                    isRemoved = true;\n                    return false;\n                }\n                return true;\n            }, \"filterCb\");\n            absoluteEntries = absoluteEntries.filter(filterCb);\n            relativeEntries = relativeEntries.filter(filterCb);\n            return isRemoved;\n        },\n        concat: (from)=>{\n            var _a;\n            const cloned = cloneTo(constructStack());\n            cloned.use(from);\n            cloned.identifyOnResolve(identifyOnResolve || cloned.identifyOnResolve() || (((_a = from.identifyOnResolve) == null ? void 0 : _a.call(from)) ?? false));\n            return cloned;\n        },\n        applyToStack: cloneTo,\n        identify: ()=>{\n            return getMiddlewareList(true).map((mw)=>{\n                const step = mw.step ?? mw.relation + \" \" + mw.toMiddleware;\n                return getMiddlewareNameWithAliases(mw.name, mw.aliases) + \" - \" + step;\n            });\n        },\n        identifyOnResolve (toggle) {\n            if (typeof toggle === \"boolean\") identifyOnResolve = toggle;\n            return identifyOnResolve;\n        },\n        resolve: (handler, context)=>{\n            for (const middleware of getMiddlewareList().map((entry)=>entry.middleware).reverse()){\n                handler = middleware(handler, context);\n            }\n            if (identifyOnResolve) {\n                console.log(stack.identify());\n            }\n            return handler;\n        }\n    };\n    return stack;\n}, \"constructStack\");\nvar stepWeights = {\n    initialize: 5,\n    serialize: 4,\n    build: 3,\n    finalizeRequest: 2,\n    deserialize: 1\n};\nvar priorityWeights = {\n    high: 3,\n    normal: 2,\n    low: 1\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/middleware-stack/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/node-config-provider/dist-cjs/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@smithy/node-config-provider/dist-cjs/index.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    loadConfig: ()=>loadConfig\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/configLoader.ts\n// src/fromEnv.ts\nvar import_property_provider = __webpack_require__(/*! @smithy/property-provider */ \"(rsc)/./node_modules/@smithy/property-provider/dist-cjs/index.js\");\nvar fromEnv = /* @__PURE__ */ __name((envVarSelector)=>async ()=>{\n        try {\n            const config = envVarSelector(process.env);\n            if (config === void 0) {\n                throw new Error();\n            }\n            return config;\n        } catch (e) {\n            throw new import_property_provider.CredentialsProviderError(e.message || `Cannot load config from environment variables with getter: ${envVarSelector}`);\n        }\n    }, \"fromEnv\");\n// src/fromSharedConfigFiles.ts\nvar import_shared_ini_file_loader = __webpack_require__(/*! @smithy/shared-ini-file-loader */ \"(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js\");\nvar fromSharedConfigFiles = /* @__PURE__ */ __name((configSelector, { preferredFile = \"config\", ...init } = {})=>async ()=>{\n        const profile = (0, import_shared_ini_file_loader.getProfileName)(init);\n        const { configFile, credentialsFile } = await (0, import_shared_ini_file_loader.loadSharedConfigFiles)(init);\n        const profileFromCredentials = credentialsFile[profile] || {};\n        const profileFromConfig = configFile[profile] || {};\n        const mergedProfile = preferredFile === \"config\" ? {\n            ...profileFromCredentials,\n            ...profileFromConfig\n        } : {\n            ...profileFromConfig,\n            ...profileFromCredentials\n        };\n        try {\n            const cfgFile = preferredFile === \"config\" ? configFile : credentialsFile;\n            const configValue = configSelector(mergedProfile, cfgFile);\n            if (configValue === void 0) {\n                throw new Error();\n            }\n            return configValue;\n        } catch (e) {\n            throw new import_property_provider.CredentialsProviderError(e.message || `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`);\n        }\n    }, \"fromSharedConfigFiles\");\n// src/fromStatic.ts\nvar isFunction = /* @__PURE__ */ __name((func)=>typeof func === \"function\", \"isFunction\");\nvar fromStatic = /* @__PURE__ */ __name((defaultValue)=>isFunction(defaultValue) ? async ()=>await defaultValue() : (0, import_property_provider.fromStatic)(defaultValue), \"fromStatic\");\n// src/configLoader.ts\nvar loadConfig = /* @__PURE__ */ __name(({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {})=>(0, import_property_provider.memoize)((0, import_property_provider.chain)(fromEnv(environmentVariableSelector), fromSharedConfigFiles(configFileSelector, configuration), fromStatic(defaultValue))), \"loadConfig\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/node-config-provider/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/node-http-handler/dist-cjs/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@smithy/node-http-handler/dist-cjs/index.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    DEFAULT_REQUEST_TIMEOUT: ()=>DEFAULT_REQUEST_TIMEOUT,\n    NodeHttp2Handler: ()=>NodeHttp2Handler,\n    NodeHttpHandler: ()=>NodeHttpHandler,\n    streamCollector: ()=>streamCollector\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/node-http-handler.ts\nvar import_protocol_http = __webpack_require__(/*! @smithy/protocol-http */ \"(rsc)/./node_modules/@smithy/protocol-http/dist-cjs/index.js\");\nvar import_querystring_builder = __webpack_require__(/*! @smithy/querystring-builder */ \"(rsc)/./node_modules/@smithy/querystring-builder/dist-cjs/index.js\");\nvar import_http = __webpack_require__(/*! http */ \"http\");\nvar import_https = __webpack_require__(/*! https */ \"https\");\n// src/constants.ts\nvar NODEJS_TIMEOUT_ERROR_CODES = [\n    \"ECONNRESET\",\n    \"EPIPE\",\n    \"ETIMEDOUT\"\n];\n// src/get-transformed-headers.ts\nvar getTransformedHeaders = /* @__PURE__ */ __name((headers)=>{\n    const transformedHeaders = {};\n    for (const name of Object.keys(headers)){\n        const headerValues = headers[name];\n        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(\",\") : headerValues;\n    }\n    return transformedHeaders;\n}, \"getTransformedHeaders\");\n// src/set-connection-timeout.ts\nvar setConnectionTimeout = /* @__PURE__ */ __name((request, reject, timeoutInMs = 0)=>{\n    if (!timeoutInMs) {\n        return;\n    }\n    const timeoutId = setTimeout(()=>{\n        request.destroy();\n        reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {\n            name: \"TimeoutError\"\n        }));\n    }, timeoutInMs);\n    request.on(\"socket\", (socket)=>{\n        if (socket.connecting) {\n            socket.on(\"connect\", ()=>{\n                clearTimeout(timeoutId);\n            });\n        } else {\n            clearTimeout(timeoutId);\n        }\n    });\n}, \"setConnectionTimeout\");\n// src/set-socket-keep-alive.ts\nvar setSocketKeepAlive = /* @__PURE__ */ __name((request, { keepAlive, keepAliveMsecs })=>{\n    if (keepAlive !== true) {\n        return;\n    }\n    request.on(\"socket\", (socket)=>{\n        socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);\n    });\n}, \"setSocketKeepAlive\");\n// src/set-socket-timeout.ts\nvar setSocketTimeout = /* @__PURE__ */ __name((request, reject, timeoutInMs = 0)=>{\n    request.setTimeout(timeoutInMs, ()=>{\n        request.destroy();\n        reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), {\n            name: \"TimeoutError\"\n        }));\n    });\n}, \"setSocketTimeout\");\n// src/write-request-body.ts\nvar import_stream = __webpack_require__(/*! stream */ \"stream\");\nvar MIN_WAIT_TIME = 1e3;\nasync function writeRequestBody(httpRequest, request, maxContinueTimeoutMs = MIN_WAIT_TIME) {\n    const headers = request.headers ?? {};\n    const expect = headers[\"Expect\"] || headers[\"expect\"];\n    let timeoutId = -1;\n    let hasError = false;\n    if (expect === \"100-continue\") {\n        await Promise.race([\n            new Promise((resolve)=>{\n                timeoutId = Number(setTimeout(resolve, Math.max(MIN_WAIT_TIME, maxContinueTimeoutMs)));\n            }),\n            new Promise((resolve)=>{\n                httpRequest.on(\"continue\", ()=>{\n                    clearTimeout(timeoutId);\n                    resolve();\n                });\n                httpRequest.on(\"error\", ()=>{\n                    hasError = true;\n                    clearTimeout(timeoutId);\n                    resolve();\n                });\n            })\n        ]);\n    }\n    if (!hasError) {\n        writeBody(httpRequest, request.body);\n    }\n}\n__name(writeRequestBody, \"writeRequestBody\");\nfunction writeBody(httpRequest, body) {\n    if (body instanceof import_stream.Readable) {\n        body.pipe(httpRequest);\n        return;\n    }\n    if (body) {\n        if (Buffer.isBuffer(body) || typeof body === \"string\") {\n            httpRequest.end(body);\n            return;\n        }\n        const uint8 = body;\n        if (typeof uint8 === \"object\" && uint8.buffer && typeof uint8.byteOffset === \"number\" && typeof uint8.byteLength === \"number\") {\n            httpRequest.end(Buffer.from(uint8.buffer, uint8.byteOffset, uint8.byteLength));\n            return;\n        }\n        httpRequest.end(Buffer.from(body));\n        return;\n    }\n    httpRequest.end();\n}\n__name(writeBody, \"writeBody\");\n// src/node-http-handler.ts\nvar DEFAULT_REQUEST_TIMEOUT = 0;\nvar _NodeHttpHandler = class _NodeHttpHandler {\n    constructor(options){\n        this.socketWarningTimestamp = 0;\n        // Node http handler is hard-coded to http/1.1: https://github.com/nodejs/node/blob/ff5664b83b89c55e4ab5d5f60068fb457f1f5872/lib/_http_server.js#L286\n        this.metadata = {\n            handlerProtocol: \"http/1.1\"\n        };\n        this.configProvider = new Promise((resolve, reject)=>{\n            if (typeof options === \"function\") {\n                options().then((_options)=>{\n                    resolve(this.resolveDefaultConfig(_options));\n                }).catch(reject);\n            } else {\n                resolve(this.resolveDefaultConfig(options));\n            }\n        });\n    }\n    /**\n   * @returns the input if it is an HttpHandler of any class,\n   * or instantiates a new instance of this handler.\n   */ static create(instanceOrOptions) {\n        if (typeof (instanceOrOptions == null ? void 0 : instanceOrOptions.handle) === \"function\") {\n            return instanceOrOptions;\n        }\n        return new _NodeHttpHandler(instanceOrOptions);\n    }\n    /**\n   * @internal\n   *\n   * @param agent - http(s) agent in use by the NodeHttpHandler instance.\n   * @returns timestamp of last emitted warning.\n   */ static checkSocketUsage(agent, socketWarningTimestamp) {\n        var _a, _b;\n        const { sockets, requests, maxSockets } = agent;\n        if (typeof maxSockets !== \"number\" || maxSockets === Infinity) {\n            return socketWarningTimestamp;\n        }\n        const interval = 15e3;\n        if (Date.now() - interval < socketWarningTimestamp) {\n            return socketWarningTimestamp;\n        }\n        if (sockets && requests) {\n            for(const origin in sockets){\n                const socketsInUse = ((_a = sockets[origin]) == null ? void 0 : _a.length) ?? 0;\n                const requestsEnqueued = ((_b = requests[origin]) == null ? void 0 : _b.length) ?? 0;\n                if (socketsInUse >= maxSockets && requestsEnqueued >= 2 * maxSockets) {\n                    console.warn(\"@smithy/node-http-handler:WARN\", `socket usage at capacity=${socketsInUse} and ${requestsEnqueued} additional requests are enqueued.`, \"See https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/node-configuring-maxsockets.html\", \"or increase socketAcquisitionWarningTimeout=(millis) in the NodeHttpHandler config.\");\n                    return Date.now();\n                }\n            }\n        }\n        return socketWarningTimestamp;\n    }\n    resolveDefaultConfig(options) {\n        const { requestTimeout, connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};\n        const keepAlive = true;\n        const maxSockets = 50;\n        return {\n            connectionTimeout,\n            requestTimeout: requestTimeout ?? socketTimeout,\n            httpAgent: (()=>{\n                if (httpAgent instanceof import_http.Agent || typeof (httpAgent == null ? void 0 : httpAgent.destroy) === \"function\") {\n                    return httpAgent;\n                }\n                return new import_http.Agent({\n                    keepAlive,\n                    maxSockets,\n                    ...httpAgent\n                });\n            })(),\n            httpsAgent: (()=>{\n                if (httpsAgent instanceof import_https.Agent || typeof (httpsAgent == null ? void 0 : httpsAgent.destroy) === \"function\") {\n                    return httpsAgent;\n                }\n                return new import_https.Agent({\n                    keepAlive,\n                    maxSockets,\n                    ...httpsAgent\n                });\n            })()\n        };\n    }\n    destroy() {\n        var _a, _b, _c, _d;\n        (_b = (_a = this.config) == null ? void 0 : _a.httpAgent) == null ? void 0 : _b.destroy();\n        (_d = (_c = this.config) == null ? void 0 : _c.httpsAgent) == null ? void 0 : _d.destroy();\n    }\n    async handle(request, { abortSignal } = {}) {\n        if (!this.config) {\n            this.config = await this.configProvider;\n        }\n        let socketCheckTimeoutId;\n        return new Promise((_resolve, _reject)=>{\n            let writeRequestBodyPromise = void 0;\n            const resolve = /* @__PURE__ */ __name(async (arg)=>{\n                await writeRequestBodyPromise;\n                clearTimeout(socketCheckTimeoutId);\n                _resolve(arg);\n            }, \"resolve\");\n            const reject = /* @__PURE__ */ __name(async (arg)=>{\n                await writeRequestBodyPromise;\n                _reject(arg);\n            }, \"reject\");\n            if (!this.config) {\n                throw new Error(\"Node HTTP request handler config is not resolved\");\n            }\n            if (abortSignal == null ? void 0 : abortSignal.aborted) {\n                const abortError = new Error(\"Request aborted\");\n                abortError.name = \"AbortError\";\n                reject(abortError);\n                return;\n            }\n            const isSSL = request.protocol === \"https:\";\n            const agent = isSSL ? this.config.httpsAgent : this.config.httpAgent;\n            socketCheckTimeoutId = setTimeout(()=>{\n                this.socketWarningTimestamp = _NodeHttpHandler.checkSocketUsage(agent, this.socketWarningTimestamp);\n            }, this.config.socketAcquisitionWarningTimeout ?? (this.config.requestTimeout ?? 2e3) + (this.config.connectionTimeout ?? 1e3));\n            const queryString = (0, import_querystring_builder.buildQueryString)(request.query || {});\n            let auth = void 0;\n            if (request.username != null || request.password != null) {\n                const username = request.username ?? \"\";\n                const password = request.password ?? \"\";\n                auth = `${username}:${password}`;\n            }\n            let path = request.path;\n            if (queryString) {\n                path += `?${queryString}`;\n            }\n            if (request.fragment) {\n                path += `#${request.fragment}`;\n            }\n            const nodeHttpsOptions = {\n                headers: request.headers,\n                host: request.hostname,\n                method: request.method,\n                path,\n                port: request.port,\n                agent,\n                auth\n            };\n            const requestFunc = isSSL ? import_https.request : import_http.request;\n            const req = requestFunc(nodeHttpsOptions, (res)=>{\n                const httpResponse = new import_protocol_http.HttpResponse({\n                    statusCode: res.statusCode || -1,\n                    reason: res.statusMessage,\n                    headers: getTransformedHeaders(res.headers),\n                    body: res\n                });\n                resolve({\n                    response: httpResponse\n                });\n            });\n            req.on(\"error\", (err)=>{\n                if (NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {\n                    reject(Object.assign(err, {\n                        name: \"TimeoutError\"\n                    }));\n                } else {\n                    reject(err);\n                }\n            });\n            setConnectionTimeout(req, reject, this.config.connectionTimeout);\n            setSocketTimeout(req, reject, this.config.requestTimeout);\n            if (abortSignal) {\n                abortSignal.onabort = ()=>{\n                    req.abort();\n                    const abortError = new Error(\"Request aborted\");\n                    abortError.name = \"AbortError\";\n                    reject(abortError);\n                };\n            }\n            const httpAgent = nodeHttpsOptions.agent;\n            if (typeof httpAgent === \"object\" && \"keepAlive\" in httpAgent) {\n                setSocketKeepAlive(req, {\n                    // @ts-expect-error keepAlive is not public on httpAgent.\n                    keepAlive: httpAgent.keepAlive,\n                    // @ts-expect-error keepAliveMsecs is not public on httpAgent.\n                    keepAliveMsecs: httpAgent.keepAliveMsecs\n                });\n            }\n            writeRequestBodyPromise = writeRequestBody(req, request, this.config.requestTimeout).catch(_reject);\n        });\n    }\n    updateHttpClientConfig(key, value) {\n        this.config = void 0;\n        this.configProvider = this.configProvider.then((config)=>{\n            return {\n                ...config,\n                [key]: value\n            };\n        });\n    }\n    httpHandlerConfigs() {\n        return this.config ?? {};\n    }\n};\n__name(_NodeHttpHandler, \"NodeHttpHandler\");\nvar NodeHttpHandler = _NodeHttpHandler;\n// src/node-http2-handler.ts\nvar import_http22 = __webpack_require__(/*! http2 */ \"http2\");\n// src/node-http2-connection-manager.ts\nvar import_http2 = __toESM(__webpack_require__(/*! http2 */ \"http2\"));\n// src/node-http2-connection-pool.ts\nvar _NodeHttp2ConnectionPool = class _NodeHttp2ConnectionPool {\n    constructor(sessions){\n        this.sessions = [];\n        this.sessions = sessions ?? [];\n    }\n    poll() {\n        if (this.sessions.length > 0) {\n            return this.sessions.shift();\n        }\n    }\n    offerLast(session) {\n        this.sessions.push(session);\n    }\n    contains(session) {\n        return this.sessions.includes(session);\n    }\n    remove(session) {\n        this.sessions = this.sessions.filter((s)=>s !== session);\n    }\n    [Symbol.iterator]() {\n        return this.sessions[Symbol.iterator]();\n    }\n    destroy(connection) {\n        for (const session of this.sessions){\n            if (session === connection) {\n                if (!session.destroyed) {\n                    session.destroy();\n                }\n            }\n        }\n    }\n};\n__name(_NodeHttp2ConnectionPool, \"NodeHttp2ConnectionPool\");\nvar NodeHttp2ConnectionPool = _NodeHttp2ConnectionPool;\n// src/node-http2-connection-manager.ts\nvar _NodeHttp2ConnectionManager = class _NodeHttp2ConnectionManager {\n    constructor(config){\n        this.sessionCache = /* @__PURE__ */ new Map();\n        this.config = config;\n        if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {\n            throw new RangeError(\"maxConcurrency must be greater than zero.\");\n        }\n    }\n    lease(requestContext, connectionConfiguration) {\n        const url = this.getUrlString(requestContext);\n        const existingPool = this.sessionCache.get(url);\n        if (existingPool) {\n            const existingSession = existingPool.poll();\n            if (existingSession && !this.config.disableConcurrency) {\n                return existingSession;\n            }\n        }\n        const session = import_http2.default.connect(url);\n        if (this.config.maxConcurrency) {\n            session.settings({\n                maxConcurrentStreams: this.config.maxConcurrency\n            }, (err)=>{\n                if (err) {\n                    throw new Error(\"Fail to set maxConcurrentStreams to \" + this.config.maxConcurrency + \"when creating new session for \" + requestContext.destination.toString());\n                }\n            });\n        }\n        session.unref();\n        const destroySessionCb = /* @__PURE__ */ __name(()=>{\n            session.destroy();\n            this.deleteSession(url, session);\n        }, \"destroySessionCb\");\n        session.on(\"goaway\", destroySessionCb);\n        session.on(\"error\", destroySessionCb);\n        session.on(\"frameError\", destroySessionCb);\n        session.on(\"close\", ()=>this.deleteSession(url, session));\n        if (connectionConfiguration.requestTimeout) {\n            session.setTimeout(connectionConfiguration.requestTimeout, destroySessionCb);\n        }\n        const connectionPool = this.sessionCache.get(url) || new NodeHttp2ConnectionPool();\n        connectionPool.offerLast(session);\n        this.sessionCache.set(url, connectionPool);\n        return session;\n    }\n    /**\n   * Delete a session from the connection pool.\n   * @param authority The authority of the session to delete.\n   * @param session The session to delete.\n   */ deleteSession(authority, session) {\n        const existingConnectionPool = this.sessionCache.get(authority);\n        if (!existingConnectionPool) {\n            return;\n        }\n        if (!existingConnectionPool.contains(session)) {\n            return;\n        }\n        existingConnectionPool.remove(session);\n        this.sessionCache.set(authority, existingConnectionPool);\n    }\n    release(requestContext, session) {\n        var _a;\n        const cacheKey = this.getUrlString(requestContext);\n        (_a = this.sessionCache.get(cacheKey)) == null ? void 0 : _a.offerLast(session);\n    }\n    destroy() {\n        for (const [key, connectionPool] of this.sessionCache){\n            for (const session of connectionPool){\n                if (!session.destroyed) {\n                    session.destroy();\n                }\n                connectionPool.remove(session);\n            }\n            this.sessionCache.delete(key);\n        }\n    }\n    setMaxConcurrentStreams(maxConcurrentStreams) {\n        if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {\n            throw new RangeError(\"maxConcurrentStreams must be greater than zero.\");\n        }\n        this.config.maxConcurrency = maxConcurrentStreams;\n    }\n    setDisableConcurrentStreams(disableConcurrentStreams) {\n        this.config.disableConcurrency = disableConcurrentStreams;\n    }\n    getUrlString(request) {\n        return request.destination.toString();\n    }\n};\n__name(_NodeHttp2ConnectionManager, \"NodeHttp2ConnectionManager\");\nvar NodeHttp2ConnectionManager = _NodeHttp2ConnectionManager;\n// src/node-http2-handler.ts\nvar _NodeHttp2Handler = class _NodeHttp2Handler {\n    constructor(options){\n        this.metadata = {\n            handlerProtocol: \"h2\"\n        };\n        this.connectionManager = new NodeHttp2ConnectionManager({});\n        this.configProvider = new Promise((resolve, reject)=>{\n            if (typeof options === \"function\") {\n                options().then((opts)=>{\n                    resolve(opts || {});\n                }).catch(reject);\n            } else {\n                resolve(options || {});\n            }\n        });\n    }\n    /**\n   * @returns the input if it is an HttpHandler of any class,\n   * or instantiates a new instance of this handler.\n   */ static create(instanceOrOptions) {\n        if (typeof (instanceOrOptions == null ? void 0 : instanceOrOptions.handle) === \"function\") {\n            return instanceOrOptions;\n        }\n        return new _NodeHttp2Handler(instanceOrOptions);\n    }\n    destroy() {\n        this.connectionManager.destroy();\n    }\n    async handle(request, { abortSignal } = {}) {\n        if (!this.config) {\n            this.config = await this.configProvider;\n            this.connectionManager.setDisableConcurrentStreams(this.config.disableConcurrentStreams || false);\n            if (this.config.maxConcurrentStreams) {\n                this.connectionManager.setMaxConcurrentStreams(this.config.maxConcurrentStreams);\n            }\n        }\n        const { requestTimeout, disableConcurrentStreams } = this.config;\n        return new Promise((_resolve, _reject)=>{\n            var _a;\n            let fulfilled = false;\n            let writeRequestBodyPromise = void 0;\n            const resolve = /* @__PURE__ */ __name(async (arg)=>{\n                await writeRequestBodyPromise;\n                _resolve(arg);\n            }, \"resolve\");\n            const reject = /* @__PURE__ */ __name(async (arg)=>{\n                await writeRequestBodyPromise;\n                _reject(arg);\n            }, \"reject\");\n            if (abortSignal == null ? void 0 : abortSignal.aborted) {\n                fulfilled = true;\n                const abortError = new Error(\"Request aborted\");\n                abortError.name = \"AbortError\";\n                reject(abortError);\n                return;\n            }\n            const { hostname, method, port, protocol, query } = request;\n            let auth = \"\";\n            if (request.username != null || request.password != null) {\n                const username = request.username ?? \"\";\n                const password = request.password ?? \"\";\n                auth = `${username}:${password}@`;\n            }\n            const authority = `${protocol}//${auth}${hostname}${port ? `:${port}` : \"\"}`;\n            const requestContext = {\n                destination: new URL(authority)\n            };\n            const session = this.connectionManager.lease(requestContext, {\n                requestTimeout: (_a = this.config) == null ? void 0 : _a.sessionTimeout,\n                disableConcurrentStreams: disableConcurrentStreams || false\n            });\n            const rejectWithDestroy = /* @__PURE__ */ __name((err)=>{\n                if (disableConcurrentStreams) {\n                    this.destroySession(session);\n                }\n                fulfilled = true;\n                reject(err);\n            }, \"rejectWithDestroy\");\n            const queryString = (0, import_querystring_builder.buildQueryString)(query || {});\n            let path = request.path;\n            if (queryString) {\n                path += `?${queryString}`;\n            }\n            if (request.fragment) {\n                path += `#${request.fragment}`;\n            }\n            const req = session.request({\n                ...request.headers,\n                [import_http22.constants.HTTP2_HEADER_PATH]: path,\n                [import_http22.constants.HTTP2_HEADER_METHOD]: method\n            });\n            session.ref();\n            req.on(\"response\", (headers)=>{\n                const httpResponse = new import_protocol_http.HttpResponse({\n                    statusCode: headers[\":status\"] || -1,\n                    headers: getTransformedHeaders(headers),\n                    body: req\n                });\n                fulfilled = true;\n                resolve({\n                    response: httpResponse\n                });\n                if (disableConcurrentStreams) {\n                    session.close();\n                    this.connectionManager.deleteSession(authority, session);\n                }\n            });\n            if (requestTimeout) {\n                req.setTimeout(requestTimeout, ()=>{\n                    req.close();\n                    const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);\n                    timeoutError.name = \"TimeoutError\";\n                    rejectWithDestroy(timeoutError);\n                });\n            }\n            if (abortSignal) {\n                abortSignal.onabort = ()=>{\n                    req.close();\n                    const abortError = new Error(\"Request aborted\");\n                    abortError.name = \"AbortError\";\n                    rejectWithDestroy(abortError);\n                };\n            }\n            req.on(\"frameError\", (type, code, id)=>{\n                rejectWithDestroy(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));\n            });\n            req.on(\"error\", rejectWithDestroy);\n            req.on(\"aborted\", ()=>{\n                rejectWithDestroy(new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`));\n            });\n            req.on(\"close\", ()=>{\n                session.unref();\n                if (disableConcurrentStreams) {\n                    session.destroy();\n                }\n                if (!fulfilled) {\n                    rejectWithDestroy(new Error(\"Unexpected error: http2 request did not get a response\"));\n                }\n            });\n            writeRequestBodyPromise = writeRequestBody(req, request, requestTimeout);\n        });\n    }\n    updateHttpClientConfig(key, value) {\n        this.config = void 0;\n        this.configProvider = this.configProvider.then((config)=>{\n            return {\n                ...config,\n                [key]: value\n            };\n        });\n    }\n    httpHandlerConfigs() {\n        return this.config ?? {};\n    }\n    /**\n   * Destroys a session.\n   * @param session The session to destroy.\n   */ destroySession(session) {\n        if (!session.destroyed) {\n            session.destroy();\n        }\n    }\n};\n__name(_NodeHttp2Handler, \"NodeHttp2Handler\");\nvar NodeHttp2Handler = _NodeHttp2Handler;\n// src/stream-collector/collector.ts\nvar _Collector = class _Collector extends import_stream.Writable {\n    constructor(){\n        super(...arguments);\n        this.bufferedBytes = [];\n    }\n    _write(chunk, encoding, callback) {\n        this.bufferedBytes.push(chunk);\n        callback();\n    }\n};\n__name(_Collector, \"Collector\");\nvar Collector = _Collector;\n// src/stream-collector/index.ts\nvar streamCollector = /* @__PURE__ */ __name((stream)=>new Promise((resolve, reject)=>{\n        const collector = new Collector();\n        stream.pipe(collector);\n        stream.on(\"error\", (err)=>{\n            collector.end();\n            reject(err);\n        });\n        collector.on(\"error\", reject);\n        collector.on(\"finish\", function() {\n            const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));\n            resolve(bytes);\n        });\n    }), \"streamCollector\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/node-http-handler/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/property-provider/dist-cjs/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@smithy/property-provider/dist-cjs/index.js ***!
  \******************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    CredentialsProviderError: ()=>CredentialsProviderError,\n    ProviderError: ()=>ProviderError,\n    TokenProviderError: ()=>TokenProviderError,\n    chain: ()=>chain,\n    fromStatic: ()=>fromStatic,\n    memoize: ()=>memoize\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/ProviderError.ts\nvar _ProviderError = class _ProviderError extends Error {\n    constructor(message, tryNextLink = true){\n        super(message);\n        this.tryNextLink = tryNextLink;\n        this.name = \"ProviderError\";\n        Object.setPrototypeOf(this, _ProviderError.prototype);\n    }\n    static from(error, tryNextLink = true) {\n        return Object.assign(new this(error.message, tryNextLink), error);\n    }\n};\n__name(_ProviderError, \"ProviderError\");\nvar ProviderError = _ProviderError;\n// src/CredentialsProviderError.ts\nvar _CredentialsProviderError = class _CredentialsProviderError extends ProviderError {\n    constructor(message, tryNextLink = true){\n        super(message, tryNextLink);\n        this.tryNextLink = tryNextLink;\n        this.name = \"CredentialsProviderError\";\n        Object.setPrototypeOf(this, _CredentialsProviderError.prototype);\n    }\n};\n__name(_CredentialsProviderError, \"CredentialsProviderError\");\nvar CredentialsProviderError = _CredentialsProviderError;\n// src/TokenProviderError.ts\nvar _TokenProviderError = class _TokenProviderError extends ProviderError {\n    constructor(message, tryNextLink = true){\n        super(message, tryNextLink);\n        this.tryNextLink = tryNextLink;\n        this.name = \"TokenProviderError\";\n        Object.setPrototypeOf(this, _TokenProviderError.prototype);\n    }\n};\n__name(_TokenProviderError, \"TokenProviderError\");\nvar TokenProviderError = _TokenProviderError;\n// src/chain.ts\nvar chain = /* @__PURE__ */ __name((...providers)=>async ()=>{\n        if (providers.length === 0) {\n            throw new ProviderError(\"No providers in chain\");\n        }\n        let lastProviderError;\n        for (const provider of providers){\n            try {\n                const credentials = await provider();\n                return credentials;\n            } catch (err) {\n                lastProviderError = err;\n                if (err == null ? void 0 : err.tryNextLink) {\n                    continue;\n                }\n                throw err;\n            }\n        }\n        throw lastProviderError;\n    }, \"chain\");\n// src/fromStatic.ts\nvar fromStatic = /* @__PURE__ */ __name((staticValue)=>()=>Promise.resolve(staticValue), \"fromStatic\");\n// src/memoize.ts\nvar memoize = /* @__PURE__ */ __name((provider, isExpired, requiresRefresh)=>{\n    let resolved;\n    let pending;\n    let hasResult;\n    let isConstant = false;\n    const coalesceProvider = /* @__PURE__ */ __name(async ()=>{\n        if (!pending) {\n            pending = provider();\n        }\n        try {\n            resolved = await pending;\n            hasResult = true;\n            isConstant = false;\n        } finally{\n            pending = void 0;\n        }\n        return resolved;\n    }, \"coalesceProvider\");\n    if (isExpired === void 0) {\n        return async (options)=>{\n            if (!hasResult || (options == null ? void 0 : options.forceRefresh)) {\n                resolved = await coalesceProvider();\n            }\n            return resolved;\n        };\n    }\n    return async (options)=>{\n        if (!hasResult || (options == null ? void 0 : options.forceRefresh)) {\n            resolved = await coalesceProvider();\n        }\n        if (isConstant) {\n            return resolved;\n        }\n        if (requiresRefresh && !requiresRefresh(resolved)) {\n            isConstant = true;\n            return resolved;\n        }\n        if (isExpired(resolved)) {\n            await coalesceProvider();\n            return resolved;\n        }\n        return resolved;\n    };\n}, \"memoize\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/property-provider/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/protocol-http/dist-cjs/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@smithy/protocol-http/dist-cjs/index.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    Field: ()=>Field,\n    Fields: ()=>Fields,\n    HttpRequest: ()=>HttpRequest,\n    HttpResponse: ()=>HttpResponse,\n    getHttpHandlerExtensionConfiguration: ()=>getHttpHandlerExtensionConfiguration,\n    isValidHostname: ()=>isValidHostname,\n    resolveHttpHandlerRuntimeConfig: ()=>resolveHttpHandlerRuntimeConfig\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/extensions/httpExtensionConfiguration.ts\nvar getHttpHandlerExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig)=>{\n    let httpHandler = runtimeConfig.httpHandler;\n    return {\n        setHttpHandler (handler) {\n            httpHandler = handler;\n        },\n        httpHandler () {\n            return httpHandler;\n        },\n        updateHttpClientConfig (key, value) {\n            httpHandler.updateHttpClientConfig(key, value);\n        },\n        httpHandlerConfigs () {\n            return httpHandler.httpHandlerConfigs();\n        }\n    };\n}, \"getHttpHandlerExtensionConfiguration\");\nvar resolveHttpHandlerRuntimeConfig = /* @__PURE__ */ __name((httpHandlerExtensionConfiguration)=>{\n    return {\n        httpHandler: httpHandlerExtensionConfiguration.httpHandler()\n    };\n}, \"resolveHttpHandlerRuntimeConfig\");\n// src/Field.ts\nvar import_types = __webpack_require__(/*! @smithy/types */ \"(rsc)/./node_modules/@smithy/types/dist-cjs/index.js\");\nvar _Field = class _Field {\n    constructor({ name, kind = import_types.FieldPosition.HEADER, values = [] }){\n        this.name = name;\n        this.kind = kind;\n        this.values = values;\n    }\n    /**\n   * Appends a value to the field.\n   *\n   * @param value The value to append.\n   */ add(value) {\n        this.values.push(value);\n    }\n    /**\n   * Overwrite existing field values.\n   *\n   * @param values The new field values.\n   */ set(values) {\n        this.values = values;\n    }\n    /**\n   * Remove all matching entries from list.\n   *\n   * @param value Value to remove.\n   */ remove(value) {\n        this.values = this.values.filter((v)=>v !== value);\n    }\n    /**\n   * Get comma-delimited string.\n   *\n   * @returns String representation of {@link Field}.\n   */ toString() {\n        return this.values.map((v)=>v.includes(\",\") || v.includes(\" \") ? `\"${v}\"` : v).join(\", \");\n    }\n    /**\n   * Get string values as a list\n   *\n   * @returns Values in {@link Field} as a list.\n   */ get() {\n        return this.values;\n    }\n};\n__name(_Field, \"Field\");\nvar Field = _Field;\n// src/Fields.ts\nvar _Fields = class _Fields {\n    constructor({ fields = [], encoding = \"utf-8\" }){\n        this.entries = {};\n        fields.forEach(this.setField.bind(this));\n        this.encoding = encoding;\n    }\n    /**\n   * Set entry for a {@link Field} name. The `name`\n   * attribute will be used to key the collection.\n   *\n   * @param field The {@link Field} to set.\n   */ setField(field) {\n        this.entries[field.name.toLowerCase()] = field;\n    }\n    /**\n   *  Retrieve {@link Field} entry by name.\n   *\n   * @param name The name of the {@link Field} entry\n   *  to retrieve\n   * @returns The {@link Field} if it exists.\n   */ getField(name) {\n        return this.entries[name.toLowerCase()];\n    }\n    /**\n   * Delete entry from collection.\n   *\n   * @param name Name of the entry to delete.\n   */ removeField(name) {\n        delete this.entries[name.toLowerCase()];\n    }\n    /**\n   * Helper function for retrieving specific types of fields.\n   * Used to grab all headers or all trailers.\n   *\n   * @param kind {@link FieldPosition} of entries to retrieve.\n   * @returns The {@link Field} entries with the specified\n   *  {@link FieldPosition}.\n   */ getByType(kind) {\n        return Object.values(this.entries).filter((field)=>field.kind === kind);\n    }\n};\n__name(_Fields, \"Fields\");\nvar Fields = _Fields;\n// src/httpRequest.ts\nvar _HttpRequest = class _HttpRequest {\n    constructor(options){\n        this.method = options.method || \"GET\";\n        this.hostname = options.hostname || \"localhost\";\n        this.port = options.port;\n        this.query = options.query || {};\n        this.headers = options.headers || {};\n        this.body = options.body;\n        this.protocol = options.protocol ? options.protocol.slice(-1) !== \":\" ? `${options.protocol}:` : options.protocol : \"https:\";\n        this.path = options.path ? options.path.charAt(0) !== \"/\" ? `/${options.path}` : options.path : \"/\";\n        this.username = options.username;\n        this.password = options.password;\n        this.fragment = options.fragment;\n    }\n    static isInstance(request) {\n        if (!request) return false;\n        const req = request;\n        return \"method\" in req && \"protocol\" in req && \"hostname\" in req && \"path\" in req && typeof req[\"query\"] === \"object\" && typeof req[\"headers\"] === \"object\";\n    }\n    clone() {\n        const cloned = new _HttpRequest({\n            ...this,\n            headers: {\n                ...this.headers\n            }\n        });\n        if (cloned.query) cloned.query = cloneQuery(cloned.query);\n        return cloned;\n    }\n};\n__name(_HttpRequest, \"HttpRequest\");\nvar HttpRequest = _HttpRequest;\nfunction cloneQuery(query) {\n    return Object.keys(query).reduce((carry, paramName)=>{\n        const param = query[paramName];\n        return {\n            ...carry,\n            [paramName]: Array.isArray(param) ? [\n                ...param\n            ] : param\n        };\n    }, {});\n}\n__name(cloneQuery, \"cloneQuery\");\n// src/httpResponse.ts\nvar _HttpResponse = class _HttpResponse {\n    constructor(options){\n        this.statusCode = options.statusCode;\n        this.reason = options.reason;\n        this.headers = options.headers || {};\n        this.body = options.body;\n    }\n    static isInstance(response) {\n        if (!response) return false;\n        const resp = response;\n        return typeof resp.statusCode === \"number\" && typeof resp.headers === \"object\";\n    }\n};\n__name(_HttpResponse, \"HttpResponse\");\nvar HttpResponse = _HttpResponse;\n// src/isValidHostname.ts\nfunction isValidHostname(hostname) {\n    const hostPattern = /^[a-z0-9][a-z0-9\\.\\-]*[a-z0-9]$/;\n    return hostPattern.test(hostname);\n}\n__name(isValidHostname, \"isValidHostname\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/protocol-http/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/querystring-builder/dist-cjs/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@smithy/querystring-builder/dist-cjs/index.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    buildQueryString: ()=>buildQueryString\n});\nmodule.exports = __toCommonJS(src_exports);\nvar import_util_uri_escape = __webpack_require__(/*! @smithy/util-uri-escape */ \"(rsc)/./node_modules/@smithy/util-uri-escape/dist-cjs/index.js\");\nfunction buildQueryString(query) {\n    const parts = [];\n    for (let key of Object.keys(query).sort()){\n        const value = query[key];\n        key = (0, import_util_uri_escape.escapeUri)(key);\n        if (Array.isArray(value)) {\n            for(let i = 0, iLen = value.length; i < iLen; i++){\n                parts.push(`${key}=${(0, import_util_uri_escape.escapeUri)(value[i])}`);\n            }\n        } else {\n            let qsEntry = key;\n            if (value || typeof value === \"string\") {\n                qsEntry += `=${(0, import_util_uri_escape.escapeUri)(value)}`;\n            }\n            parts.push(qsEntry);\n        }\n    }\n    return parts.join(\"&\");\n}\n__name(buildQueryString, \"buildQueryString\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9xdWVyeXN0cmluZy1idWlsZGVyL2Rpc3QtY2pzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxZQUFZQyxPQUFPQyxjQUFjO0FBQ3JDLElBQUlDLG1CQUFtQkYsT0FBT0csd0JBQXdCO0FBQ3RELElBQUlDLG9CQUFvQkosT0FBT0ssbUJBQW1CO0FBQ2xELElBQUlDLGVBQWVOLE9BQU9PLFNBQVMsQ0FBQ0MsY0FBYztBQUNsRCxJQUFJQyxTQUFTLENBQUNDLFFBQVFDLFFBQVVaLFVBQVVXLFFBQVEsUUFBUTtRQUFFQztRQUFPQyxjQUFjO0lBQUs7QUFDdEYsSUFBSUMsV0FBVyxDQUFDSCxRQUFRSTtJQUN0QixJQUFLLElBQUlDLFFBQVFELElBQ2ZmLFVBQVVXLFFBQVFLLE1BQU07UUFBRUMsS0FBS0YsR0FBRyxDQUFDQyxLQUFLO1FBQUVFLFlBQVk7SUFBSztBQUMvRDtBQUNBLElBQUlDLGNBQWMsQ0FBQ0MsSUFBSUMsTUFBTUMsUUFBUUM7SUFDbkMsSUFBSUYsUUFBUSxPQUFPQSxTQUFTLFlBQVksT0FBT0EsU0FBUyxZQUFZO1FBQ2xFLEtBQUssSUFBSUcsT0FBT25CLGtCQUFrQmdCLE1BQ2hDLElBQUksQ0FBQ2QsYUFBYWtCLElBQUksQ0FBQ0wsSUFBSUksUUFBUUEsUUFBUUYsUUFDekN0QixVQUFVb0IsSUFBSUksS0FBSztZQUFFUCxLQUFLLElBQU1JLElBQUksQ0FBQ0csSUFBSTtZQUFFTixZQUFZLENBQUVLLENBQUFBLE9BQU9wQixpQkFBaUJrQixNQUFNRyxJQUFHLEtBQU1ELEtBQUtMLFVBQVU7UUFBQztJQUN0SDtJQUNBLE9BQU9FO0FBQ1Q7QUFDQSxJQUFJTSxlQUFlLENBQUNDLE1BQVFSLFlBQVluQixVQUFVLENBQUMsR0FBRyxjQUFjO1FBQUVZLE9BQU87SUFBSyxJQUFJZTtBQUV0RixlQUFlO0FBQ2YsSUFBSUMsY0FBYyxDQUFDO0FBQ25CZCxTQUFTYyxhQUFhO0lBQ3BCQyxrQkFBa0IsSUFBTUE7QUFDMUI7QUFDQUMsT0FBT0MsT0FBTyxHQUFHTCxhQUFhRTtBQUM5QixJQUFJSSx5QkFBeUJDLG1CQUFPQSxDQUFDLCtGQUF5QjtBQUM5RCxTQUFTSixpQkFBaUJLLEtBQUs7SUFDN0IsTUFBTUMsUUFBUSxFQUFFO0lBQ2hCLEtBQUssSUFBSVgsT0FBT3ZCLE9BQU9tQyxJQUFJLENBQUNGLE9BQU9HLElBQUksR0FBSTtRQUN6QyxNQUFNekIsUUFBUXNCLEtBQUssQ0FBQ1YsSUFBSTtRQUN4QkEsTUFBTSxDQUFDLEdBQUdRLHVCQUF1Qk0sU0FBUyxFQUFFZDtRQUM1QyxJQUFJZSxNQUFNQyxPQUFPLENBQUM1QixRQUFRO1lBQ3hCLElBQUssSUFBSTZCLElBQUksR0FBR0MsT0FBTzlCLE1BQU0rQixNQUFNLEVBQUVGLElBQUlDLE1BQU1ELElBQUs7Z0JBQ2xETixNQUFNUyxJQUFJLENBQUMsQ0FBQyxFQUFFcEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHUSx1QkFBdUJNLFNBQVMsRUFBRTFCLEtBQUssQ0FBQzZCLEVBQUUsRUFBRSxDQUFDO1lBQ3hFO1FBQ0YsT0FBTztZQUNMLElBQUlJLFVBQVVyQjtZQUNkLElBQUlaLFNBQVMsT0FBT0EsVUFBVSxVQUFVO2dCQUN0Q2lDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHYix1QkFBdUJNLFNBQVMsRUFBRTFCLE9BQU8sQ0FBQztZQUMvRDtZQUNBdUIsTUFBTVMsSUFBSSxDQUFDQztRQUNiO0lBQ0Y7SUFDQSxPQUFPVixNQUFNVyxJQUFJLENBQUM7QUFDcEI7QUFDQXBDLE9BQU9tQixrQkFBa0I7QUFDekIsNkRBQTZEO0FBRTdELEtBQU1DLENBQUFBLENBRU4iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb29kLWJsb2cvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9xdWVyeXN0cmluZy1idWlsZGVyL2Rpc3QtY2pzL2luZGV4LmpzP2FmYzIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIGJ1aWxkUXVlcnlTdHJpbmc6ICgpID0+IGJ1aWxkUXVlcnlTdHJpbmdcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xudmFyIGltcG9ydF91dGlsX3VyaV9lc2NhcGUgPSByZXF1aXJlKFwiQHNtaXRoeS91dGlsLXVyaS1lc2NhcGVcIik7XG5mdW5jdGlvbiBidWlsZFF1ZXJ5U3RyaW5nKHF1ZXJ5KSB7XG4gIGNvbnN0IHBhcnRzID0gW107XG4gIGZvciAobGV0IGtleSBvZiBPYmplY3Qua2V5cyhxdWVyeSkuc29ydCgpKSB7XG4gICAgY29uc3QgdmFsdWUgPSBxdWVyeVtrZXldO1xuICAgIGtleSA9ICgwLCBpbXBvcnRfdXRpbF91cmlfZXNjYXBlLmVzY2FwZVVyaSkoa2V5KTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBpTGVuID0gdmFsdWUubGVuZ3RoOyBpIDwgaUxlbjsgaSsrKSB7XG4gICAgICAgIHBhcnRzLnB1c2goYCR7a2V5fT0keygwLCBpbXBvcnRfdXRpbF91cmlfZXNjYXBlLmVzY2FwZVVyaSkodmFsdWVbaV0pfWApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgcXNFbnRyeSA9IGtleTtcbiAgICAgIGlmICh2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcXNFbnRyeSArPSBgPSR7KDAsIGltcG9ydF91dGlsX3VyaV9lc2NhcGUuZXNjYXBlVXJpKSh2YWx1ZSl9YDtcbiAgICAgIH1cbiAgICAgIHBhcnRzLnB1c2gocXNFbnRyeSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBwYXJ0cy5qb2luKFwiJlwiKTtcbn1cbl9fbmFtZShidWlsZFF1ZXJ5U3RyaW5nLCBcImJ1aWxkUXVlcnlTdHJpbmdcIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBidWlsZFF1ZXJ5U3RyaW5nXG59KTtcblxuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9faGFzT3duUHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX19uYW1lIiwidGFyZ2V0IiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJfX2V4cG9ydCIsImFsbCIsIm5hbWUiLCJnZXQiLCJlbnVtZXJhYmxlIiwiX19jb3B5UHJvcHMiLCJ0byIsImZyb20iLCJleGNlcHQiLCJkZXNjIiwia2V5IiwiY2FsbCIsIl9fdG9Db21tb25KUyIsIm1vZCIsInNyY19leHBvcnRzIiwiYnVpbGRRdWVyeVN0cmluZyIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbXBvcnRfdXRpbF91cmlfZXNjYXBlIiwicmVxdWlyZSIsInF1ZXJ5IiwicGFydHMiLCJrZXlzIiwic29ydCIsImVzY2FwZVVyaSIsIkFycmF5IiwiaXNBcnJheSIsImkiLCJpTGVuIiwibGVuZ3RoIiwicHVzaCIsInFzRW50cnkiLCJqb2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/querystring-builder/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/querystring-parser/dist-cjs/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@smithy/querystring-parser/dist-cjs/index.js ***!
  \*******************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    parseQueryString: ()=>parseQueryString\n});\nmodule.exports = __toCommonJS(src_exports);\nfunction parseQueryString(querystring) {\n    const query = {};\n    querystring = querystring.replace(/^\\?/, \"\");\n    if (querystring) {\n        for (const pair of querystring.split(\"&\")){\n            let [key, value = null] = pair.split(\"=\");\n            key = decodeURIComponent(key);\n            if (value) {\n                value = decodeURIComponent(value);\n            }\n            if (!(key in query)) {\n                query[key] = value;\n            } else if (Array.isArray(query[key])) {\n                query[key].push(value);\n            } else {\n                query[key] = [\n                    query[key],\n                    value\n                ];\n            }\n        }\n    }\n    return query;\n}\n__name(parseQueryString, \"parseQueryString\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9xdWVyeXN0cmluZy1wYXJzZXIvZGlzdC1janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFlBQVlDLE9BQU9DLGNBQWM7QUFDckMsSUFBSUMsbUJBQW1CRixPQUFPRyx3QkFBd0I7QUFDdEQsSUFBSUMsb0JBQW9CSixPQUFPSyxtQkFBbUI7QUFDbEQsSUFBSUMsZUFBZU4sT0FBT08sU0FBUyxDQUFDQyxjQUFjO0FBQ2xELElBQUlDLFNBQVMsQ0FBQ0MsUUFBUUMsUUFBVVosVUFBVVcsUUFBUSxRQUFRO1FBQUVDO1FBQU9DLGNBQWM7SUFBSztBQUN0RixJQUFJQyxXQUFXLENBQUNILFFBQVFJO0lBQ3RCLElBQUssSUFBSUMsUUFBUUQsSUFDZmYsVUFBVVcsUUFBUUssTUFBTTtRQUFFQyxLQUFLRixHQUFHLENBQUNDLEtBQUs7UUFBRUUsWUFBWTtJQUFLO0FBQy9EO0FBQ0EsSUFBSUMsY0FBYyxDQUFDQyxJQUFJQyxNQUFNQyxRQUFRQztJQUNuQyxJQUFJRixRQUFRLE9BQU9BLFNBQVMsWUFBWSxPQUFPQSxTQUFTLFlBQVk7UUFDbEUsS0FBSyxJQUFJRyxPQUFPbkIsa0JBQWtCZ0IsTUFDaEMsSUFBSSxDQUFDZCxhQUFha0IsSUFBSSxDQUFDTCxJQUFJSSxRQUFRQSxRQUFRRixRQUN6Q3RCLFVBQVVvQixJQUFJSSxLQUFLO1lBQUVQLEtBQUssSUFBTUksSUFBSSxDQUFDRyxJQUFJO1lBQUVOLFlBQVksQ0FBRUssQ0FBQUEsT0FBT3BCLGlCQUFpQmtCLE1BQU1HLElBQUcsS0FBTUQsS0FBS0wsVUFBVTtRQUFDO0lBQ3RIO0lBQ0EsT0FBT0U7QUFDVDtBQUNBLElBQUlNLGVBQWUsQ0FBQ0MsTUFBUVIsWUFBWW5CLFVBQVUsQ0FBQyxHQUFHLGNBQWM7UUFBRVksT0FBTztJQUFLLElBQUllO0FBRXRGLGVBQWU7QUFDZixJQUFJQyxjQUFjLENBQUM7QUFDbkJkLFNBQVNjLGFBQWE7SUFDcEJDLGtCQUFrQixJQUFNQTtBQUMxQjtBQUNBQyxPQUFPQyxPQUFPLEdBQUdMLGFBQWFFO0FBQzlCLFNBQVNDLGlCQUFpQkcsV0FBVztJQUNuQyxNQUFNQyxRQUFRLENBQUM7SUFDZkQsY0FBY0EsWUFBWUUsT0FBTyxDQUFDLE9BQU87SUFDekMsSUFBSUYsYUFBYTtRQUNmLEtBQUssTUFBTUcsUUFBUUgsWUFBWUksS0FBSyxDQUFDLEtBQU07WUFDekMsSUFBSSxDQUFDWixLQUFLWixRQUFRLElBQUksQ0FBQyxHQUFHdUIsS0FBS0MsS0FBSyxDQUFDO1lBQ3JDWixNQUFNYSxtQkFBbUJiO1lBQ3pCLElBQUlaLE9BQU87Z0JBQ1RBLFFBQVF5QixtQkFBbUJ6QjtZQUM3QjtZQUNBLElBQUksQ0FBRVksQ0FBQUEsT0FBT1MsS0FBSSxHQUFJO2dCQUNuQkEsS0FBSyxDQUFDVCxJQUFJLEdBQUdaO1lBQ2YsT0FBTyxJQUFJMEIsTUFBTUMsT0FBTyxDQUFDTixLQUFLLENBQUNULElBQUksR0FBRztnQkFDcENTLEtBQUssQ0FBQ1QsSUFBSSxDQUFDZ0IsSUFBSSxDQUFDNUI7WUFDbEIsT0FBTztnQkFDTHFCLEtBQUssQ0FBQ1QsSUFBSSxHQUFHO29CQUFDUyxLQUFLLENBQUNULElBQUk7b0JBQUVaO2lCQUFNO1lBQ2xDO1FBQ0Y7SUFDRjtJQUNBLE9BQU9xQjtBQUNUO0FBQ0F2QixPQUFPbUIsa0JBQWtCO0FBQ3pCLDZEQUE2RDtBQUU3RCxLQUFNQyxDQUFBQSxDQUVOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vZC1ibG9nLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvcXVlcnlzdHJpbmctcGFyc2VyL2Rpc3QtY2pzL2luZGV4LmpzP2Y5ODAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIHBhcnNlUXVlcnlTdHJpbmc6ICgpID0+IHBhcnNlUXVlcnlTdHJpbmdcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xuZnVuY3Rpb24gcGFyc2VRdWVyeVN0cmluZyhxdWVyeXN0cmluZykge1xuICBjb25zdCBxdWVyeSA9IHt9O1xuICBxdWVyeXN0cmluZyA9IHF1ZXJ5c3RyaW5nLnJlcGxhY2UoL15cXD8vLCBcIlwiKTtcbiAgaWYgKHF1ZXJ5c3RyaW5nKSB7XG4gICAgZm9yIChjb25zdCBwYWlyIG9mIHF1ZXJ5c3RyaW5nLnNwbGl0KFwiJlwiKSkge1xuICAgICAgbGV0IFtrZXksIHZhbHVlID0gbnVsbF0gPSBwYWlyLnNwbGl0KFwiPVwiKTtcbiAgICAgIGtleSA9IGRlY29kZVVSSUNvbXBvbmVudChrZXkpO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmICghKGtleSBpbiBxdWVyeSkpIHtcbiAgICAgICAgcXVlcnlba2V5XSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHF1ZXJ5W2tleV0pKSB7XG4gICAgICAgIHF1ZXJ5W2tleV0ucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBxdWVyeVtrZXldID0gW3F1ZXJ5W2tleV0sIHZhbHVlXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHF1ZXJ5O1xufVxuX19uYW1lKHBhcnNlUXVlcnlTdHJpbmcsIFwicGFyc2VRdWVyeVN0cmluZ1wiKTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcblxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBhcnNlUXVlcnlTdHJpbmdcbn0pO1xuXG4iXSwibmFtZXMiOlsiX19kZWZQcm9wIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2dldE93blByb3BEZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19nZXRPd25Qcm9wTmFtZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiX19oYXNPd25Qcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJfX25hbWUiLCJ0YXJnZXQiLCJ2YWx1ZSIsImNvbmZpZ3VyYWJsZSIsIl9fZXhwb3J0IiwiYWxsIiwibmFtZSIsImdldCIsImVudW1lcmFibGUiLCJfX2NvcHlQcm9wcyIsInRvIiwiZnJvbSIsImV4Y2VwdCIsImRlc2MiLCJrZXkiLCJjYWxsIiwiX190b0NvbW1vbkpTIiwibW9kIiwic3JjX2V4cG9ydHMiLCJwYXJzZVF1ZXJ5U3RyaW5nIiwibW9kdWxlIiwiZXhwb3J0cyIsInF1ZXJ5c3RyaW5nIiwicXVlcnkiLCJyZXBsYWNlIiwicGFpciIsInNwbGl0IiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiQXJyYXkiLCJpc0FycmF5IiwicHVzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/querystring-parser/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getHomeDir = void 0;\nconst os_1 = __webpack_require__(/*! os */ \"os\");\nconst path_1 = __webpack_require__(/*! path */ \"path\");\nconst homeDirCache = {};\nconst getHomeDirCacheKey = ()=>{\n    if (process && process.geteuid) {\n        return `${process.geteuid()}`;\n    }\n    return \"DEFAULT\";\n};\nconst getHomeDir = ()=>{\n    const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;\n    if (HOME) return HOME;\n    if (USERPROFILE) return USERPROFILE;\n    if (HOMEPATH) return `${HOMEDRIVE}${HOMEPATH}`;\n    const homeDirCacheKey = getHomeDirCacheKey();\n    if (!homeDirCache[homeDirCacheKey]) homeDirCache[homeDirCacheKey] = (0, os_1.homedir)();\n    return homeDirCache[homeDirCacheKey];\n};\nexports.getHomeDir = getHomeDir;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zaGFyZWQtaW5pLWZpbGUtbG9hZGVyL2Rpc3QtY2pzL2dldEhvbWVEaXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGtCQUFrQixHQUFHLEtBQUs7QUFDMUIsTUFBTUcsT0FBT0MsbUJBQU9BLENBQUMsY0FBSTtBQUN6QixNQUFNQyxTQUFTRCxtQkFBT0EsQ0FBQyxrQkFBTTtBQUM3QixNQUFNRSxlQUFlLENBQUM7QUFDdEIsTUFBTUMscUJBQXFCO0lBQ3ZCLElBQUlDLFdBQVdBLFFBQVFDLE9BQU8sRUFBRTtRQUM1QixPQUFPLENBQUMsRUFBRUQsUUFBUUMsT0FBTyxHQUFHLENBQUM7SUFDakM7SUFDQSxPQUFPO0FBQ1g7QUFDQSxNQUFNUCxhQUFhO0lBQ2YsTUFBTSxFQUFFUSxJQUFJLEVBQUVDLFdBQVcsRUFBRUMsUUFBUSxFQUFFQyxZQUFZLENBQUMsRUFBRSxFQUFFUixPQUFPUyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUdOLFFBQVFPLEdBQUc7SUFDbEYsSUFBSUwsTUFDQSxPQUFPQTtJQUNYLElBQUlDLGFBQ0EsT0FBT0E7SUFDWCxJQUFJQyxVQUNBLE9BQU8sQ0FBQyxFQUFFQyxVQUFVLEVBQUVELFNBQVMsQ0FBQztJQUNwQyxNQUFNSSxrQkFBa0JUO0lBQ3hCLElBQUksQ0FBQ0QsWUFBWSxDQUFDVSxnQkFBZ0IsRUFDOUJWLFlBQVksQ0FBQ1UsZ0JBQWdCLEdBQUcsQ0FBQyxHQUFHYixLQUFLYyxPQUFPO0lBQ3BELE9BQU9YLFlBQVksQ0FBQ1UsZ0JBQWdCO0FBQ3hDO0FBQ0FoQixrQkFBa0IsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb29kLWJsb2cvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zaGFyZWQtaW5pLWZpbGUtbG9hZGVyL2Rpc3QtY2pzL2dldEhvbWVEaXIuanM/YWU5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0SG9tZURpciA9IHZvaWQgMDtcbmNvbnN0IG9zXzEgPSByZXF1aXJlKFwib3NcIik7XG5jb25zdCBwYXRoXzEgPSByZXF1aXJlKFwicGF0aFwiKTtcbmNvbnN0IGhvbWVEaXJDYWNoZSA9IHt9O1xuY29uc3QgZ2V0SG9tZURpckNhY2hlS2V5ID0gKCkgPT4ge1xuICAgIGlmIChwcm9jZXNzICYmIHByb2Nlc3MuZ2V0ZXVpZCkge1xuICAgICAgICByZXR1cm4gYCR7cHJvY2Vzcy5nZXRldWlkKCl9YDtcbiAgICB9XG4gICAgcmV0dXJuIFwiREVGQVVMVFwiO1xufTtcbmNvbnN0IGdldEhvbWVEaXIgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBIT01FLCBVU0VSUFJPRklMRSwgSE9NRVBBVEgsIEhPTUVEUklWRSA9IGBDOiR7cGF0aF8xLnNlcH1gIH0gPSBwcm9jZXNzLmVudjtcbiAgICBpZiAoSE9NRSlcbiAgICAgICAgcmV0dXJuIEhPTUU7XG4gICAgaWYgKFVTRVJQUk9GSUxFKVxuICAgICAgICByZXR1cm4gVVNFUlBST0ZJTEU7XG4gICAgaWYgKEhPTUVQQVRIKVxuICAgICAgICByZXR1cm4gYCR7SE9NRURSSVZFfSR7SE9NRVBBVEh9YDtcbiAgICBjb25zdCBob21lRGlyQ2FjaGVLZXkgPSBnZXRIb21lRGlyQ2FjaGVLZXkoKTtcbiAgICBpZiAoIWhvbWVEaXJDYWNoZVtob21lRGlyQ2FjaGVLZXldKVxuICAgICAgICBob21lRGlyQ2FjaGVbaG9tZURpckNhY2hlS2V5XSA9ICgwLCBvc18xLmhvbWVkaXIpKCk7XG4gICAgcmV0dXJuIGhvbWVEaXJDYWNoZVtob21lRGlyQ2FjaGVLZXldO1xufTtcbmV4cG9ydHMuZ2V0SG9tZURpciA9IGdldEhvbWVEaXI7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXRIb21lRGlyIiwib3NfMSIsInJlcXVpcmUiLCJwYXRoXzEiLCJob21lRGlyQ2FjaGUiLCJnZXRIb21lRGlyQ2FjaGVLZXkiLCJwcm9jZXNzIiwiZ2V0ZXVpZCIsIkhPTUUiLCJVU0VSUFJPRklMRSIsIkhPTUVQQVRIIiwiSE9NRURSSVZFIiwic2VwIiwiZW52IiwiaG9tZURpckNhY2hlS2V5IiwiaG9tZWRpciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getSSOTokenFilepath = void 0;\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst path_1 = __webpack_require__(/*! path */ \"path\");\nconst getHomeDir_1 = __webpack_require__(/*! ./getHomeDir */ \"(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js\");\nconst getSSOTokenFilepath = (id)=>{\n    const hasher = (0, crypto_1.createHash)(\"sha1\");\n    const cacheName = hasher.update(id).digest(\"hex\");\n    return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), \".aws\", \"sso\", \"cache\", `${cacheName}.json`);\n};\nexports.getSSOTokenFilepath = getSSOTokenFilepath;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zaGFyZWQtaW5pLWZpbGUtbG9hZGVyL2Rpc3QtY2pzL2dldFNTT1Rva2VuRmlsZXBhdGguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDJCQUEyQixHQUFHLEtBQUs7QUFDbkMsTUFBTUcsV0FBV0MsbUJBQU9BLENBQUMsc0JBQVE7QUFDakMsTUFBTUMsU0FBU0QsbUJBQU9BLENBQUMsa0JBQU07QUFDN0IsTUFBTUUsZUFBZUYsbUJBQU9BLENBQUMsZ0dBQWM7QUFDM0MsTUFBTUYsc0JBQXNCLENBQUNLO0lBQ3pCLE1BQU1DLFNBQVMsQ0FBQyxHQUFHTCxTQUFTTSxVQUFVLEVBQUU7SUFDeEMsTUFBTUMsWUFBWUYsT0FBT0csTUFBTSxDQUFDSixJQUFJSyxNQUFNLENBQUM7SUFDM0MsT0FBTyxDQUFDLEdBQUdQLE9BQU9RLElBQUksRUFBRSxDQUFDLEdBQUdQLGFBQWFRLFVBQVUsS0FBSyxRQUFRLE9BQU8sU0FBUyxDQUFDLEVBQUVKLFVBQVUsS0FBSyxDQUFDO0FBQ3ZHO0FBQ0FWLDJCQUEyQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2QtYmxvZy8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NoYXJlZC1pbmktZmlsZS1sb2FkZXIvZGlzdC1janMvZ2V0U1NPVG9rZW5GaWxlcGF0aC5qcz9jOWU2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRTU09Ub2tlbkZpbGVwYXRoID0gdm9pZCAwO1xuY29uc3QgY3J5cHRvXzEgPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuY29uc3QgcGF0aF8xID0gcmVxdWlyZShcInBhdGhcIik7XG5jb25zdCBnZXRIb21lRGlyXzEgPSByZXF1aXJlKFwiLi9nZXRIb21lRGlyXCIpO1xuY29uc3QgZ2V0U1NPVG9rZW5GaWxlcGF0aCA9IChpZCkgPT4ge1xuICAgIGNvbnN0IGhhc2hlciA9ICgwLCBjcnlwdG9fMS5jcmVhdGVIYXNoKShcInNoYTFcIik7XG4gICAgY29uc3QgY2FjaGVOYW1lID0gaGFzaGVyLnVwZGF0ZShpZCkuZGlnZXN0KFwiaGV4XCIpO1xuICAgIHJldHVybiAoMCwgcGF0aF8xLmpvaW4pKCgwLCBnZXRIb21lRGlyXzEuZ2V0SG9tZURpcikoKSwgXCIuYXdzXCIsIFwic3NvXCIsIFwiY2FjaGVcIiwgYCR7Y2FjaGVOYW1lfS5qc29uYCk7XG59O1xuZXhwb3J0cy5nZXRTU09Ub2tlbkZpbGVwYXRoID0gZ2V0U1NPVG9rZW5GaWxlcGF0aDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldFNTT1Rva2VuRmlsZXBhdGgiLCJjcnlwdG9fMSIsInJlcXVpcmUiLCJwYXRoXzEiLCJnZXRIb21lRGlyXzEiLCJpZCIsImhhc2hlciIsImNyZWF0ZUhhc2giLCJjYWNoZU5hbWUiLCJ1cGRhdGUiLCJkaWdlc3QiLCJqb2luIiwiZ2V0SG9tZURpciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getSSOTokenFromFile = void 0;\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst getSSOTokenFilepath_1 = __webpack_require__(/*! ./getSSOTokenFilepath */ \"(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js\");\nconst { readFile } = fs_1.promises;\nconst getSSOTokenFromFile = async (id)=>{\n    const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(id);\n    const ssoTokenText = await readFile(ssoTokenFilepath, \"utf8\");\n    return JSON.parse(ssoTokenText);\n};\nexports.getSSOTokenFromFile = getSSOTokenFromFile;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zaGFyZWQtaW5pLWZpbGUtbG9hZGVyL2Rpc3QtY2pzL2dldFNTT1Rva2VuRnJvbUZpbGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDJCQUEyQixHQUFHLEtBQUs7QUFDbkMsTUFBTUcsT0FBT0MsbUJBQU9BLENBQUMsY0FBSTtBQUN6QixNQUFNQyx3QkFBd0JELG1CQUFPQSxDQUFDLGtIQUF1QjtBQUM3RCxNQUFNLEVBQUVFLFFBQVEsRUFBRSxHQUFHSCxLQUFLSSxRQUFRO0FBQ2xDLE1BQU1MLHNCQUFzQixPQUFPTTtJQUMvQixNQUFNQyxtQkFBbUIsQ0FBQyxHQUFHSixzQkFBc0JLLG1CQUFtQixFQUFFRjtJQUN4RSxNQUFNRyxlQUFlLE1BQU1MLFNBQVNHLGtCQUFrQjtJQUN0RCxPQUFPRyxLQUFLQyxLQUFLLENBQUNGO0FBQ3RCO0FBQ0FYLDJCQUEyQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2QtYmxvZy8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NoYXJlZC1pbmktZmlsZS1sb2FkZXIvZGlzdC1janMvZ2V0U1NPVG9rZW5Gcm9tRmlsZS5qcz80MGE5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRTU09Ub2tlbkZyb21GaWxlID0gdm9pZCAwO1xuY29uc3QgZnNfMSA9IHJlcXVpcmUoXCJmc1wiKTtcbmNvbnN0IGdldFNTT1Rva2VuRmlsZXBhdGhfMSA9IHJlcXVpcmUoXCIuL2dldFNTT1Rva2VuRmlsZXBhdGhcIik7XG5jb25zdCB7IHJlYWRGaWxlIH0gPSBmc18xLnByb21pc2VzO1xuY29uc3QgZ2V0U1NPVG9rZW5Gcm9tRmlsZSA9IGFzeW5jIChpZCkgPT4ge1xuICAgIGNvbnN0IHNzb1Rva2VuRmlsZXBhdGggPSAoMCwgZ2V0U1NPVG9rZW5GaWxlcGF0aF8xLmdldFNTT1Rva2VuRmlsZXBhdGgpKGlkKTtcbiAgICBjb25zdCBzc29Ub2tlblRleHQgPSBhd2FpdCByZWFkRmlsZShzc29Ub2tlbkZpbGVwYXRoLCBcInV0ZjhcIik7XG4gICAgcmV0dXJuIEpTT04ucGFyc2Uoc3NvVG9rZW5UZXh0KTtcbn07XG5leHBvcnRzLmdldFNTT1Rva2VuRnJvbUZpbGUgPSBnZXRTU09Ub2tlbkZyb21GaWxlO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0U1NPVG9rZW5Gcm9tRmlsZSIsImZzXzEiLCJyZXF1aXJlIiwiZ2V0U1NPVG9rZW5GaWxlcGF0aF8xIiwicmVhZEZpbGUiLCJwcm9taXNlcyIsImlkIiwic3NvVG9rZW5GaWxlcGF0aCIsImdldFNTT1Rva2VuRmlsZXBhdGgiLCJzc29Ub2tlblRleHQiLCJKU09OIiwicGFyc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __reExport = (target, mod, secondTarget)=>(__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    CONFIG_PREFIX_SEPARATOR: ()=>CONFIG_PREFIX_SEPARATOR,\n    DEFAULT_PROFILE: ()=>DEFAULT_PROFILE,\n    ENV_PROFILE: ()=>ENV_PROFILE,\n    getProfileName: ()=>getProfileName,\n    loadSharedConfigFiles: ()=>loadSharedConfigFiles,\n    loadSsoSessionData: ()=>loadSsoSessionData,\n    parseKnownFiles: ()=>parseKnownFiles\n});\nmodule.exports = __toCommonJS(src_exports);\n__reExport(src_exports, __webpack_require__(/*! ././getHomeDir */ \"(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js\"), module.exports);\n// src/getProfileName.ts\nvar ENV_PROFILE = \"AWS_PROFILE\";\nvar DEFAULT_PROFILE = \"default\";\nvar getProfileName = /* @__PURE__ */ __name((init)=>init.profile || process.env[ENV_PROFILE] || DEFAULT_PROFILE, \"getProfileName\");\n// src/index.ts\n__reExport(src_exports, __webpack_require__(/*! ././getSSOTokenFilepath */ \"(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js\"), module.exports);\n__reExport(src_exports, __webpack_require__(/*! ././getSSOTokenFromFile */ \"(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js\"), module.exports);\n// src/getConfigData.ts\nvar import_types = __webpack_require__(/*! @smithy/types */ \"(rsc)/./node_modules/@smithy/types/dist-cjs/index.js\");\nvar getConfigData = /* @__PURE__ */ __name((data)=>Object.entries(data).filter(([key])=>{\n        const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR);\n        if (indexOfSeparator === -1) {\n            return false;\n        }\n        return Object.values(import_types.IniSectionType).includes(key.substring(0, indexOfSeparator));\n    }).reduce((acc, [key, value])=>{\n        const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR);\n        const updatedKey = key.substring(0, indexOfSeparator) === import_types.IniSectionType.PROFILE ? key.substring(indexOfSeparator + 1) : key;\n        acc[updatedKey] = value;\n        return acc;\n    }, {\n        // Populate default profile, if present.\n        ...data.default && {\n            default: data.default\n        }\n    }), \"getConfigData\");\n// src/getConfigFilepath.ts\nvar import_path = __webpack_require__(/*! path */ \"path\");\nvar import_getHomeDir = __webpack_require__(/*! ././getHomeDir */ \"(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js\");\nvar ENV_CONFIG_PATH = \"AWS_CONFIG_FILE\";\nvar getConfigFilepath = /* @__PURE__ */ __name(()=>process.env[ENV_CONFIG_PATH] || (0, import_path.join)((0, import_getHomeDir.getHomeDir)(), \".aws\", \"config\"), \"getConfigFilepath\");\n// src/getCredentialsFilepath.ts\nvar import_getHomeDir2 = __webpack_require__(/*! ././getHomeDir */ \"(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js\");\nvar ENV_CREDENTIALS_PATH = \"AWS_SHARED_CREDENTIALS_FILE\";\nvar getCredentialsFilepath = /* @__PURE__ */ __name(()=>process.env[ENV_CREDENTIALS_PATH] || (0, import_path.join)((0, import_getHomeDir2.getHomeDir)(), \".aws\", \"credentials\"), \"getCredentialsFilepath\");\n// src/parseIni.ts\nvar prefixKeyRegex = /^([\\w-]+)\\s([\"'])?([\\w-@\\+\\.%:/]+)\\2$/;\nvar profileNameBlockList = [\n    \"__proto__\",\n    \"profile __proto__\"\n];\nvar parseIni = /* @__PURE__ */ __name((iniData)=>{\n    const map = {};\n    let currentSection;\n    let currentSubSection;\n    for (const iniLine of iniData.split(/\\r?\\n/)){\n        const trimmedLine = iniLine.split(/(^|\\s)[;#]/)[0].trim();\n        const isSection = trimmedLine[0] === \"[\" && trimmedLine[trimmedLine.length - 1] === \"]\";\n        if (isSection) {\n            currentSection = void 0;\n            currentSubSection = void 0;\n            const sectionName = trimmedLine.substring(1, trimmedLine.length - 1);\n            const matches = prefixKeyRegex.exec(sectionName);\n            if (matches) {\n                const [, prefix, , name] = matches;\n                if (Object.values(import_types.IniSectionType).includes(prefix)) {\n                    currentSection = [\n                        prefix,\n                        name\n                    ].join(CONFIG_PREFIX_SEPARATOR);\n                }\n            } else {\n                currentSection = sectionName;\n            }\n            if (profileNameBlockList.includes(sectionName)) {\n                throw new Error(`Found invalid profile name \"${sectionName}\"`);\n            }\n        } else if (currentSection) {\n            const indexOfEqualsSign = trimmedLine.indexOf(\"=\");\n            if (![\n                0,\n                -1\n            ].includes(indexOfEqualsSign)) {\n                const [name, value] = [\n                    trimmedLine.substring(0, indexOfEqualsSign).trim(),\n                    trimmedLine.substring(indexOfEqualsSign + 1).trim()\n                ];\n                if (value === \"\") {\n                    currentSubSection = name;\n                } else {\n                    if (currentSubSection && iniLine.trimStart() === iniLine) {\n                        currentSubSection = void 0;\n                    }\n                    map[currentSection] = map[currentSection] || {};\n                    const key = currentSubSection ? [\n                        currentSubSection,\n                        name\n                    ].join(CONFIG_PREFIX_SEPARATOR) : name;\n                    map[currentSection][key] = value;\n                }\n            }\n        }\n    }\n    return map;\n}, \"parseIni\");\n// src/loadSharedConfigFiles.ts\nvar import_slurpFile = __webpack_require__(/*! ././slurpFile */ \"(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js\");\nvar swallowError = /* @__PURE__ */ __name(()=>({}), \"swallowError\");\nvar CONFIG_PREFIX_SEPARATOR = \".\";\nvar loadSharedConfigFiles = /* @__PURE__ */ __name(async (init = {})=>{\n    const { filepath = getCredentialsFilepath(), configFilepath = getConfigFilepath() } = init;\n    const parsedFiles = await Promise.all([\n        (0, import_slurpFile.slurpFile)(configFilepath, {\n            ignoreCache: init.ignoreCache\n        }).then(parseIni).then(getConfigData).catch(swallowError),\n        (0, import_slurpFile.slurpFile)(filepath, {\n            ignoreCache: init.ignoreCache\n        }).then(parseIni).catch(swallowError)\n    ]);\n    return {\n        configFile: parsedFiles[0],\n        credentialsFile: parsedFiles[1]\n    };\n}, \"loadSharedConfigFiles\");\n// src/getSsoSessionData.ts\nvar getSsoSessionData = /* @__PURE__ */ __name((data)=>Object.entries(data).filter(([key])=>key.startsWith(import_types.IniSectionType.SSO_SESSION + CONFIG_PREFIX_SEPARATOR)).reduce((acc, [key, value])=>({\n            ...acc,\n            [key.substring(key.indexOf(CONFIG_PREFIX_SEPARATOR) + 1)]: value\n        }), {}), \"getSsoSessionData\");\n// src/loadSsoSessionData.ts\nvar import_slurpFile2 = __webpack_require__(/*! ././slurpFile */ \"(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js\");\nvar swallowError2 = /* @__PURE__ */ __name(()=>({}), \"swallowError\");\nvar loadSsoSessionData = /* @__PURE__ */ __name(async (init = {})=>(0, import_slurpFile2.slurpFile)(init.configFilepath ?? getConfigFilepath()).then(parseIni).then(getSsoSessionData).catch(swallowError2), \"loadSsoSessionData\");\n// src/mergeConfigFiles.ts\nvar mergeConfigFiles = /* @__PURE__ */ __name((...files)=>{\n    const merged = {};\n    for (const file of files){\n        for (const [key, values] of Object.entries(file)){\n            if (merged[key] !== void 0) {\n                Object.assign(merged[key], values);\n            } else {\n                merged[key] = values;\n            }\n        }\n    }\n    return merged;\n}, \"mergeConfigFiles\");\n// src/parseKnownFiles.ts\nvar parseKnownFiles = /* @__PURE__ */ __name(async (init)=>{\n    const parsedFiles = await loadSharedConfigFiles(init);\n    return mergeConfigFiles(parsedFiles.configFile, parsedFiles.credentialsFile);\n}, \"parseKnownFiles\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.slurpFile = void 0;\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst { readFile } = fs_1.promises;\nconst filePromisesHash = {};\nconst slurpFile = (path, options)=>{\n    if (!filePromisesHash[path] || (options === null || options === void 0 ? void 0 : options.ignoreCache)) {\n        filePromisesHash[path] = readFile(path, \"utf8\");\n    }\n    return filePromisesHash[path];\n};\nexports.slurpFile = slurpFile;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zaGFyZWQtaW5pLWZpbGUtbG9hZGVyL2Rpc3QtY2pzL3NsdXJwRmlsZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsaUJBQWlCLEdBQUcsS0FBSztBQUN6QixNQUFNRyxPQUFPQyxtQkFBT0EsQ0FBQyxjQUFJO0FBQ3pCLE1BQU0sRUFBRUMsUUFBUSxFQUFFLEdBQUdGLEtBQUtHLFFBQVE7QUFDbEMsTUFBTUMsbUJBQW1CLENBQUM7QUFDMUIsTUFBTUwsWUFBWSxDQUFDTSxNQUFNQztJQUNyQixJQUFJLENBQUNGLGdCQUFnQixDQUFDQyxLQUFLLElBQUtDLENBQUFBLFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUksS0FBSyxJQUFJQSxRQUFRQyxXQUFXLEdBQUc7UUFDcEdILGdCQUFnQixDQUFDQyxLQUFLLEdBQUdILFNBQVNHLE1BQU07SUFDNUM7SUFDQSxPQUFPRCxnQkFBZ0IsQ0FBQ0MsS0FBSztBQUNqQztBQUNBUixpQkFBaUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb29kLWJsb2cvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zaGFyZWQtaW5pLWZpbGUtbG9hZGVyL2Rpc3QtY2pzL3NsdXJwRmlsZS5qcz83ZWQ4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zbHVycEZpbGUgPSB2b2lkIDA7XG5jb25zdCBmc18xID0gcmVxdWlyZShcImZzXCIpO1xuY29uc3QgeyByZWFkRmlsZSB9ID0gZnNfMS5wcm9taXNlcztcbmNvbnN0IGZpbGVQcm9taXNlc0hhc2ggPSB7fTtcbmNvbnN0IHNsdXJwRmlsZSA9IChwYXRoLCBvcHRpb25zKSA9PiB7XG4gICAgaWYgKCFmaWxlUHJvbWlzZXNIYXNoW3BhdGhdIHx8IChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuaWdub3JlQ2FjaGUpKSB7XG4gICAgICAgIGZpbGVQcm9taXNlc0hhc2hbcGF0aF0gPSByZWFkRmlsZShwYXRoLCBcInV0ZjhcIik7XG4gICAgfVxuICAgIHJldHVybiBmaWxlUHJvbWlzZXNIYXNoW3BhdGhdO1xufTtcbmV4cG9ydHMuc2x1cnBGaWxlID0gc2x1cnBGaWxlO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwic2x1cnBGaWxlIiwiZnNfMSIsInJlcXVpcmUiLCJyZWFkRmlsZSIsInByb21pc2VzIiwiZmlsZVByb21pc2VzSGFzaCIsInBhdGgiLCJvcHRpb25zIiwiaWdub3JlQ2FjaGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/signature-v4/dist-cjs/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@smithy/signature-v4/dist-cjs/index.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    SignatureV4: ()=>SignatureV4,\n    clearCredentialCache: ()=>clearCredentialCache,\n    createScope: ()=>createScope,\n    getCanonicalHeaders: ()=>getCanonicalHeaders,\n    getCanonicalQuery: ()=>getCanonicalQuery,\n    getPayloadHash: ()=>getPayloadHash,\n    getSigningKey: ()=>getSigningKey,\n    moveHeadersToQuery: ()=>moveHeadersToQuery,\n    prepareRequest: ()=>prepareRequest\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/SignatureV4.ts\nvar import_util_middleware = __webpack_require__(/*! @smithy/util-middleware */ \"(rsc)/./node_modules/@smithy/util-middleware/dist-cjs/index.js\");\nvar import_util_utf84 = __webpack_require__(/*! @smithy/util-utf8 */ \"(rsc)/./node_modules/@smithy/util-utf8/dist-cjs/index.js\");\n// src/constants.ts\nvar ALGORITHM_QUERY_PARAM = \"X-Amz-Algorithm\";\nvar CREDENTIAL_QUERY_PARAM = \"X-Amz-Credential\";\nvar AMZ_DATE_QUERY_PARAM = \"X-Amz-Date\";\nvar SIGNED_HEADERS_QUERY_PARAM = \"X-Amz-SignedHeaders\";\nvar EXPIRES_QUERY_PARAM = \"X-Amz-Expires\";\nvar SIGNATURE_QUERY_PARAM = \"X-Amz-Signature\";\nvar TOKEN_QUERY_PARAM = \"X-Amz-Security-Token\";\nvar AUTH_HEADER = \"authorization\";\nvar AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();\nvar DATE_HEADER = \"date\";\nvar GENERATED_HEADERS = [\n    AUTH_HEADER,\n    AMZ_DATE_HEADER,\n    DATE_HEADER\n];\nvar SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();\nvar SHA256_HEADER = \"x-amz-content-sha256\";\nvar TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();\nvar ALWAYS_UNSIGNABLE_HEADERS = {\n    authorization: true,\n    \"cache-control\": true,\n    connection: true,\n    expect: true,\n    from: true,\n    \"keep-alive\": true,\n    \"max-forwards\": true,\n    pragma: true,\n    referer: true,\n    te: true,\n    trailer: true,\n    \"transfer-encoding\": true,\n    upgrade: true,\n    \"user-agent\": true,\n    \"x-amzn-trace-id\": true\n};\nvar PROXY_HEADER_PATTERN = /^proxy-/;\nvar SEC_HEADER_PATTERN = /^sec-/;\nvar ALGORITHM_IDENTIFIER = \"AWS4-HMAC-SHA256\";\nvar EVENT_ALGORITHM_IDENTIFIER = \"AWS4-HMAC-SHA256-PAYLOAD\";\nvar UNSIGNED_PAYLOAD = \"UNSIGNED-PAYLOAD\";\nvar MAX_CACHE_SIZE = 50;\nvar KEY_TYPE_IDENTIFIER = \"aws4_request\";\nvar MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;\n// src/credentialDerivation.ts\nvar import_util_hex_encoding = __webpack_require__(/*! @smithy/util-hex-encoding */ \"(rsc)/./node_modules/@smithy/util-hex-encoding/dist-cjs/index.js\");\nvar import_util_utf8 = __webpack_require__(/*! @smithy/util-utf8 */ \"(rsc)/./node_modules/@smithy/util-utf8/dist-cjs/index.js\");\nvar signingKeyCache = {};\nvar cacheQueue = [];\nvar createScope = /* @__PURE__ */ __name((shortDate, region, service)=>`${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`, \"createScope\");\nvar getSigningKey = /* @__PURE__ */ __name(async (sha256Constructor, credentials, shortDate, region, service)=>{\n    const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);\n    const cacheKey = `${shortDate}:${region}:${service}:${(0, import_util_hex_encoding.toHex)(credsHash)}:${credentials.sessionToken}`;\n    if (cacheKey in signingKeyCache) {\n        return signingKeyCache[cacheKey];\n    }\n    cacheQueue.push(cacheKey);\n    while(cacheQueue.length > MAX_CACHE_SIZE){\n        delete signingKeyCache[cacheQueue.shift()];\n    }\n    let key = `AWS4${credentials.secretAccessKey}`;\n    for (const signable of [\n        shortDate,\n        region,\n        service,\n        KEY_TYPE_IDENTIFIER\n    ]){\n        key = await hmac(sha256Constructor, key, signable);\n    }\n    return signingKeyCache[cacheKey] = key;\n}, \"getSigningKey\");\nvar clearCredentialCache = /* @__PURE__ */ __name(()=>{\n    cacheQueue.length = 0;\n    Object.keys(signingKeyCache).forEach((cacheKey)=>{\n        delete signingKeyCache[cacheKey];\n    });\n}, \"clearCredentialCache\");\nvar hmac = /* @__PURE__ */ __name((ctor, secret, data)=>{\n    const hash = new ctor(secret);\n    hash.update((0, import_util_utf8.toUint8Array)(data));\n    return hash.digest();\n}, \"hmac\");\n// src/getCanonicalHeaders.ts\nvar getCanonicalHeaders = /* @__PURE__ */ __name(({ headers }, unsignableHeaders, signableHeaders)=>{\n    const canonical = {};\n    for (const headerName of Object.keys(headers).sort()){\n        if (headers[headerName] == void 0) {\n            continue;\n        }\n        const canonicalHeaderName = headerName.toLowerCase();\n        if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders == null ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || PROXY_HEADER_PATTERN.test(canonicalHeaderName) || SEC_HEADER_PATTERN.test(canonicalHeaderName)) {\n            if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {\n                continue;\n            }\n        }\n        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\\s+/g, \" \");\n    }\n    return canonical;\n}, \"getCanonicalHeaders\");\n// src/getCanonicalQuery.ts\nvar import_util_uri_escape = __webpack_require__(/*! @smithy/util-uri-escape */ \"(rsc)/./node_modules/@smithy/util-uri-escape/dist-cjs/index.js\");\nvar getCanonicalQuery = /* @__PURE__ */ __name(({ query = {} })=>{\n    const keys = [];\n    const serialized = {};\n    for (const key of Object.keys(query).sort()){\n        if (key.toLowerCase() === SIGNATURE_HEADER) {\n            continue;\n        }\n        keys.push(key);\n        const value = query[key];\n        if (typeof value === \"string\") {\n            serialized[key] = `${(0, import_util_uri_escape.escapeUri)(key)}=${(0, import_util_uri_escape.escapeUri)(value)}`;\n        } else if (Array.isArray(value)) {\n            serialized[key] = value.slice(0).reduce((encoded, value2)=>encoded.concat([\n                    `${(0, import_util_uri_escape.escapeUri)(key)}=${(0, import_util_uri_escape.escapeUri)(value2)}`\n                ]), []).sort().join(\"&\");\n        }\n    }\n    return keys.map((key)=>serialized[key]).filter((serialized2)=>serialized2).join(\"&\");\n}, \"getCanonicalQuery\");\n// src/getPayloadHash.ts\nvar import_is_array_buffer = __webpack_require__(/*! @smithy/is-array-buffer */ \"(rsc)/./node_modules/@smithy/is-array-buffer/dist-cjs/index.js\");\nvar import_util_utf82 = __webpack_require__(/*! @smithy/util-utf8 */ \"(rsc)/./node_modules/@smithy/util-utf8/dist-cjs/index.js\");\nvar getPayloadHash = /* @__PURE__ */ __name(async ({ headers, body }, hashConstructor)=>{\n    for (const headerName of Object.keys(headers)){\n        if (headerName.toLowerCase() === SHA256_HEADER) {\n            return headers[headerName];\n        }\n    }\n    if (body == void 0) {\n        return \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\";\n    } else if (typeof body === \"string\" || ArrayBuffer.isView(body) || (0, import_is_array_buffer.isArrayBuffer)(body)) {\n        const hashCtor = new hashConstructor();\n        hashCtor.update((0, import_util_utf82.toUint8Array)(body));\n        return (0, import_util_hex_encoding.toHex)(await hashCtor.digest());\n    }\n    return UNSIGNED_PAYLOAD;\n}, \"getPayloadHash\");\n// src/HeaderFormatter.ts\nvar import_util_utf83 = __webpack_require__(/*! @smithy/util-utf8 */ \"(rsc)/./node_modules/@smithy/util-utf8/dist-cjs/index.js\");\nvar _HeaderFormatter = class _HeaderFormatter {\n    format(headers) {\n        const chunks = [];\n        for (const headerName of Object.keys(headers)){\n            const bytes = (0, import_util_utf83.fromUtf8)(headerName);\n            chunks.push(Uint8Array.from([\n                bytes.byteLength\n            ]), bytes, this.formatHeaderValue(headers[headerName]));\n        }\n        const out = new Uint8Array(chunks.reduce((carry, bytes)=>carry + bytes.byteLength, 0));\n        let position = 0;\n        for (const chunk of chunks){\n            out.set(chunk, position);\n            position += chunk.byteLength;\n        }\n        return out;\n    }\n    formatHeaderValue(header) {\n        switch(header.type){\n            case \"boolean\":\n                return Uint8Array.from([\n                    header.value ? 0 /* boolTrue */  : 1 /* boolFalse */ \n                ]);\n            case \"byte\":\n                return Uint8Array.from([\n                    2 /* byte */ ,\n                    header.value\n                ]);\n            case \"short\":\n                const shortView = new DataView(new ArrayBuffer(3));\n                shortView.setUint8(0, 3 /* short */ );\n                shortView.setInt16(1, header.value, false);\n                return new Uint8Array(shortView.buffer);\n            case \"integer\":\n                const intView = new DataView(new ArrayBuffer(5));\n                intView.setUint8(0, 4 /* integer */ );\n                intView.setInt32(1, header.value, false);\n                return new Uint8Array(intView.buffer);\n            case \"long\":\n                const longBytes = new Uint8Array(9);\n                longBytes[0] = 5 /* long */ ;\n                longBytes.set(header.value.bytes, 1);\n                return longBytes;\n            case \"binary\":\n                const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));\n                binView.setUint8(0, 6 /* byteArray */ );\n                binView.setUint16(1, header.value.byteLength, false);\n                const binBytes = new Uint8Array(binView.buffer);\n                binBytes.set(header.value, 3);\n                return binBytes;\n            case \"string\":\n                const utf8Bytes = (0, import_util_utf83.fromUtf8)(header.value);\n                const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));\n                strView.setUint8(0, 7 /* string */ );\n                strView.setUint16(1, utf8Bytes.byteLength, false);\n                const strBytes = new Uint8Array(strView.buffer);\n                strBytes.set(utf8Bytes, 3);\n                return strBytes;\n            case \"timestamp\":\n                const tsBytes = new Uint8Array(9);\n                tsBytes[0] = 8 /* timestamp */ ;\n                tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);\n                return tsBytes;\n            case \"uuid\":\n                if (!UUID_PATTERN.test(header.value)) {\n                    throw new Error(`Invalid UUID received: ${header.value}`);\n                }\n                const uuidBytes = new Uint8Array(17);\n                uuidBytes[0] = 9 /* uuid */ ;\n                uuidBytes.set((0, import_util_hex_encoding.fromHex)(header.value.replace(/\\-/g, \"\")), 1);\n                return uuidBytes;\n        }\n    }\n};\n__name(_HeaderFormatter, \"HeaderFormatter\");\nvar HeaderFormatter = _HeaderFormatter;\nvar UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;\nvar _Int64 = class _Int64 {\n    constructor(bytes){\n        this.bytes = bytes;\n        if (bytes.byteLength !== 8) {\n            throw new Error(\"Int64 buffers must be exactly 8 bytes\");\n        }\n    }\n    static fromNumber(number) {\n        if (number > 9223372036854776e3 || number < -9223372036854776e3) {\n            throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);\n        }\n        const bytes = new Uint8Array(8);\n        for(let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256){\n            bytes[i] = remaining;\n        }\n        if (number < 0) {\n            negate(bytes);\n        }\n        return new _Int64(bytes);\n    }\n    /**\n   * Called implicitly by infix arithmetic operators.\n   */ valueOf() {\n        const bytes = this.bytes.slice(0);\n        const negative = bytes[0] & 128;\n        if (negative) {\n            negate(bytes);\n        }\n        return parseInt((0, import_util_hex_encoding.toHex)(bytes), 16) * (negative ? -1 : 1);\n    }\n    toString() {\n        return String(this.valueOf());\n    }\n};\n__name(_Int64, \"Int64\");\nvar Int64 = _Int64;\nfunction negate(bytes) {\n    for(let i = 0; i < 8; i++){\n        bytes[i] ^= 255;\n    }\n    for(let i = 7; i > -1; i--){\n        bytes[i]++;\n        if (bytes[i] !== 0) break;\n    }\n}\n__name(negate, \"negate\");\n// src/headerUtil.ts\nvar hasHeader = /* @__PURE__ */ __name((soughtHeader, headers)=>{\n    soughtHeader = soughtHeader.toLowerCase();\n    for (const headerName of Object.keys(headers)){\n        if (soughtHeader === headerName.toLowerCase()) {\n            return true;\n        }\n    }\n    return false;\n}, \"hasHeader\");\n// src/cloneRequest.ts\nvar cloneRequest = /* @__PURE__ */ __name(({ headers, query, ...rest })=>({\n        ...rest,\n        headers: {\n            ...headers\n        },\n        query: query ? cloneQuery(query) : void 0\n    }), \"cloneRequest\");\nvar cloneQuery = /* @__PURE__ */ __name((query)=>Object.keys(query).reduce((carry, paramName)=>{\n        const param = query[paramName];\n        return {\n            ...carry,\n            [paramName]: Array.isArray(param) ? [\n                ...param\n            ] : param\n        };\n    }, {}), \"cloneQuery\");\n// src/moveHeadersToQuery.ts\nvar moveHeadersToQuery = /* @__PURE__ */ __name((request, options = {})=>{\n    var _a;\n    const { headers, query = {} } = typeof request.clone === \"function\" ? request.clone() : cloneRequest(request);\n    for (const name of Object.keys(headers)){\n        const lname = name.toLowerCase();\n        if (lname.slice(0, 6) === \"x-amz-\" && !((_a = options.unhoistableHeaders) == null ? void 0 : _a.has(lname))) {\n            query[name] = headers[name];\n            delete headers[name];\n        }\n    }\n    return {\n        ...request,\n        headers,\n        query\n    };\n}, \"moveHeadersToQuery\");\n// src/prepareRequest.ts\nvar prepareRequest = /* @__PURE__ */ __name((request)=>{\n    request = typeof request.clone === \"function\" ? request.clone() : cloneRequest(request);\n    for (const headerName of Object.keys(request.headers)){\n        if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {\n            delete request.headers[headerName];\n        }\n    }\n    return request;\n}, \"prepareRequest\");\n// src/utilDate.ts\nvar iso8601 = /* @__PURE__ */ __name((time)=>toDate(time).toISOString().replace(/\\.\\d{3}Z$/, \"Z\"), \"iso8601\");\nvar toDate = /* @__PURE__ */ __name((time)=>{\n    if (typeof time === \"number\") {\n        return new Date(time * 1e3);\n    }\n    if (typeof time === \"string\") {\n        if (Number(time)) {\n            return new Date(Number(time) * 1e3);\n        }\n        return new Date(time);\n    }\n    return time;\n}, \"toDate\");\n// src/SignatureV4.ts\nvar _SignatureV4 = class _SignatureV4 {\n    constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }){\n        this.headerFormatter = new HeaderFormatter();\n        this.service = service;\n        this.sha256 = sha256;\n        this.uriEscapePath = uriEscapePath;\n        this.applyChecksum = typeof applyChecksum === \"boolean\" ? applyChecksum : true;\n        this.regionProvider = (0, import_util_middleware.normalizeProvider)(region);\n        this.credentialProvider = (0, import_util_middleware.normalizeProvider)(credentials);\n    }\n    async presign(originalRequest, options = {}) {\n        const { signingDate = /* @__PURE__ */ new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService } = options;\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? await this.regionProvider();\n        const { longDate, shortDate } = formatDate(signingDate);\n        if (expiresIn > MAX_PRESIGNED_TTL) {\n            return Promise.reject(\"Signature version 4 presigned URLs must have an expiration date less than one week in the future\");\n        }\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        const request = moveHeadersToQuery(prepareRequest(originalRequest), {\n            unhoistableHeaders\n        });\n        if (credentials.sessionToken) {\n            request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;\n        }\n        request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;\n        request.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;\n        request.query[AMZ_DATE_QUERY_PARAM] = longDate;\n        request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);\n        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n        request.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);\n        request.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash(originalRequest, this.sha256)));\n        return request;\n    }\n    async sign(toSign, options) {\n        if (typeof toSign === \"string\") {\n            return this.signString(toSign, options);\n        } else if (toSign.headers && toSign.payload) {\n            return this.signEvent(toSign, options);\n        } else if (toSign.message) {\n            return this.signMessage(toSign, options);\n        } else {\n            return this.signRequest(toSign, options);\n        }\n    }\n    async signEvent({ headers, payload }, { signingDate = /* @__PURE__ */ new Date(), priorSignature, signingRegion, signingService }) {\n        const region = signingRegion ?? await this.regionProvider();\n        const { shortDate, longDate } = formatDate(signingDate);\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        const hashedPayload = await getPayloadHash({\n            headers: {},\n            body: payload\n        }, this.sha256);\n        const hash = new this.sha256();\n        hash.update(headers);\n        const hashedHeaders = (0, import_util_hex_encoding.toHex)(await hash.digest());\n        const stringToSign = [\n            EVENT_ALGORITHM_IDENTIFIER,\n            longDate,\n            scope,\n            priorSignature,\n            hashedHeaders,\n            hashedPayload\n        ].join(\"\\n\");\n        return this.signString(stringToSign, {\n            signingDate,\n            signingRegion: region,\n            signingService\n        });\n    }\n    async signMessage(signableMessage, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService }) {\n        const promise = this.signEvent({\n            headers: this.headerFormatter.format(signableMessage.message.headers),\n            payload: signableMessage.message.body\n        }, {\n            signingDate,\n            signingRegion,\n            signingService,\n            priorSignature: signableMessage.priorSignature\n        });\n        return promise.then((signature)=>{\n            return {\n                message: signableMessage.message,\n                signature\n            };\n        });\n    }\n    async signString(stringToSign, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService } = {}) {\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? await this.regionProvider();\n        const { shortDate } = formatDate(signingDate);\n        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));\n        hash.update((0, import_util_utf84.toUint8Array)(stringToSign));\n        return (0, import_util_hex_encoding.toHex)(await hash.digest());\n    }\n    async signRequest(requestToSign, { signingDate = /* @__PURE__ */ new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService } = {}) {\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? await this.regionProvider();\n        const request = prepareRequest(requestToSign);\n        const { longDate, shortDate } = formatDate(signingDate);\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        request.headers[AMZ_DATE_HEADER] = longDate;\n        if (credentials.sessionToken) {\n            request.headers[TOKEN_HEADER] = credentials.sessionToken;\n        }\n        const payloadHash = await getPayloadHash(request, this.sha256);\n        if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {\n            request.headers[SHA256_HEADER] = payloadHash;\n        }\n        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));\n        request.headers[AUTH_HEADER] = `${ALGORITHM_IDENTIFIER} Credential=${credentials.accessKeyId}/${scope}, SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;\n        return request;\n    }\n    createCanonicalRequest(request, canonicalHeaders, payloadHash) {\n        const sortedHeaders = Object.keys(canonicalHeaders).sort();\n        return `${request.method}\n${this.getCanonicalPath(request)}\n${getCanonicalQuery(request)}\n${sortedHeaders.map((name)=>`${name}:${canonicalHeaders[name]}`).join(\"\\n\")}\n\n${sortedHeaders.join(\";\")}\n${payloadHash}`;\n    }\n    async createStringToSign(longDate, credentialScope, canonicalRequest) {\n        const hash = new this.sha256();\n        hash.update((0, import_util_utf84.toUint8Array)(canonicalRequest));\n        const hashedRequest = await hash.digest();\n        return `${ALGORITHM_IDENTIFIER}\n${longDate}\n${credentialScope}\n${(0, import_util_hex_encoding.toHex)(hashedRequest)}`;\n    }\n    getCanonicalPath({ path }) {\n        if (this.uriEscapePath) {\n            const normalizedPathSegments = [];\n            for (const pathSegment of path.split(\"/\")){\n                if ((pathSegment == null ? void 0 : pathSegment.length) === 0) continue;\n                if (pathSegment === \".\") continue;\n                if (pathSegment === \"..\") {\n                    normalizedPathSegments.pop();\n                } else {\n                    normalizedPathSegments.push(pathSegment);\n                }\n            }\n            const normalizedPath = `${(path == null ? void 0 : path.startsWith(\"/\")) ? \"/\" : \"\"}${normalizedPathSegments.join(\"/\")}${normalizedPathSegments.length > 0 && (path == null ? void 0 : path.endsWith(\"/\")) ? \"/\" : \"\"}`;\n            const doubleEncoded = encodeURIComponent(normalizedPath);\n            return doubleEncoded.replace(/%2F/g, \"/\");\n        }\n        return path;\n    }\n    async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {\n        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);\n        const hash = new this.sha256(await keyPromise);\n        hash.update((0, import_util_utf84.toUint8Array)(stringToSign));\n        return (0, import_util_hex_encoding.toHex)(await hash.digest());\n    }\n    getSigningKey(credentials, region, shortDate, service) {\n        return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);\n    }\n    validateResolvedCredentials(credentials) {\n        if (typeof credentials !== \"object\" || // @ts-expect-error: Property 'accessKeyId' does not exist on type 'object'.ts(2339)\n        typeof credentials.accessKeyId !== \"string\" || // @ts-expect-error: Property 'secretAccessKey' does not exist on type 'object'.ts(2339)\n        typeof credentials.secretAccessKey !== \"string\") {\n            throw new Error(\"Resolved credential object is not valid\");\n        }\n    }\n};\n__name(_SignatureV4, \"SignatureV4\");\nvar SignatureV4 = _SignatureV4;\nvar formatDate = /* @__PURE__ */ __name((now)=>{\n    const longDate = iso8601(now).replace(/[\\-:]/g, \"\");\n    return {\n        longDate,\n        shortDate: longDate.slice(0, 8)\n    };\n}, \"formatDate\");\nvar getCanonicalHeaderList = /* @__PURE__ */ __name((headers)=>Object.keys(headers).sort().join(\";\"), \"getCanonicalHeaderList\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/signature-v4/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/smithy-client/dist-cjs/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@smithy/smithy-client/dist-cjs/index.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    Client: ()=>Client,\n    Command: ()=>Command,\n    LazyJsonString: ()=>LazyJsonString,\n    NoOpLogger: ()=>NoOpLogger,\n    SENSITIVE_STRING: ()=>SENSITIVE_STRING,\n    ServiceException: ()=>ServiceException,\n    StringWrapper: ()=>StringWrapper,\n    _json: ()=>_json,\n    collectBody: ()=>collectBody,\n    convertMap: ()=>convertMap,\n    createAggregatedClient: ()=>createAggregatedClient,\n    dateToUtcString: ()=>dateToUtcString,\n    decorateServiceException: ()=>decorateServiceException,\n    emitWarningIfUnsupportedVersion: ()=>emitWarningIfUnsupportedVersion,\n    expectBoolean: ()=>expectBoolean,\n    expectByte: ()=>expectByte,\n    expectFloat32: ()=>expectFloat32,\n    expectInt: ()=>expectInt,\n    expectInt32: ()=>expectInt32,\n    expectLong: ()=>expectLong,\n    expectNonNull: ()=>expectNonNull,\n    expectNumber: ()=>expectNumber,\n    expectObject: ()=>expectObject,\n    expectShort: ()=>expectShort,\n    expectString: ()=>expectString,\n    expectUnion: ()=>expectUnion,\n    extendedEncodeURIComponent: ()=>extendedEncodeURIComponent,\n    getArrayIfSingleItem: ()=>getArrayIfSingleItem,\n    getDefaultClientConfiguration: ()=>getDefaultClientConfiguration,\n    getDefaultExtensionConfiguration: ()=>getDefaultExtensionConfiguration,\n    getValueFromTextNode: ()=>getValueFromTextNode,\n    handleFloat: ()=>handleFloat,\n    limitedParseDouble: ()=>limitedParseDouble,\n    limitedParseFloat: ()=>limitedParseFloat,\n    limitedParseFloat32: ()=>limitedParseFloat32,\n    loadConfigsForDefaultMode: ()=>loadConfigsForDefaultMode,\n    logger: ()=>logger,\n    map: ()=>map,\n    parseBoolean: ()=>parseBoolean,\n    parseEpochTimestamp: ()=>parseEpochTimestamp,\n    parseRfc3339DateTime: ()=>parseRfc3339DateTime,\n    parseRfc3339DateTimeWithOffset: ()=>parseRfc3339DateTimeWithOffset,\n    parseRfc7231DateTime: ()=>parseRfc7231DateTime,\n    resolveDefaultRuntimeConfig: ()=>resolveDefaultRuntimeConfig,\n    resolvedPath: ()=>resolvedPath,\n    serializeFloat: ()=>serializeFloat,\n    splitEvery: ()=>splitEvery,\n    strictParseByte: ()=>strictParseByte,\n    strictParseDouble: ()=>strictParseDouble,\n    strictParseFloat: ()=>strictParseFloat,\n    strictParseFloat32: ()=>strictParseFloat32,\n    strictParseInt: ()=>strictParseInt,\n    strictParseInt32: ()=>strictParseInt32,\n    strictParseLong: ()=>strictParseLong,\n    strictParseShort: ()=>strictParseShort,\n    take: ()=>take,\n    throwDefaultError: ()=>throwDefaultError,\n    withBaseException: ()=>withBaseException\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/NoOpLogger.ts\nvar _NoOpLogger = class _NoOpLogger {\n    trace() {}\n    debug() {}\n    info() {}\n    warn() {}\n    error() {}\n};\n__name(_NoOpLogger, \"NoOpLogger\");\nvar NoOpLogger = _NoOpLogger;\n// src/client.ts\nvar import_middleware_stack = __webpack_require__(/*! @smithy/middleware-stack */ \"(rsc)/./node_modules/@smithy/middleware-stack/dist-cjs/index.js\");\nvar _Client = class _Client {\n    constructor(config){\n        this.middlewareStack = (0, import_middleware_stack.constructStack)();\n        this.config = config;\n    }\n    send(command, optionsOrCb, cb) {\n        const options = typeof optionsOrCb !== \"function\" ? optionsOrCb : void 0;\n        const callback = typeof optionsOrCb === \"function\" ? optionsOrCb : cb;\n        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n        if (callback) {\n            handler(command).then((result)=>callback(null, result.output), (err)=>callback(err)).catch(// prevent any errors thrown in the callback from triggering an\n            // unhandled promise rejection\n            ()=>{});\n        } else {\n            return handler(command).then((result)=>result.output);\n        }\n    }\n    destroy() {\n        if (this.config.requestHandler.destroy) this.config.requestHandler.destroy();\n    }\n};\n__name(_Client, \"Client\");\nvar Client = _Client;\n// src/collect-stream-body.ts\nvar import_util_stream = __webpack_require__(/*! @smithy/util-stream */ \"(rsc)/./node_modules/@smithy/util-stream/dist-cjs/index.js\");\nvar collectBody = /* @__PURE__ */ __name(async (streamBody = new Uint8Array(), context)=>{\n    if (streamBody instanceof Uint8Array) {\n        return import_util_stream.Uint8ArrayBlobAdapter.mutate(streamBody);\n    }\n    if (!streamBody) {\n        return import_util_stream.Uint8ArrayBlobAdapter.mutate(new Uint8Array());\n    }\n    const fromContext = context.streamCollector(streamBody);\n    return import_util_stream.Uint8ArrayBlobAdapter.mutate(await fromContext);\n}, \"collectBody\");\n// src/command.ts\nvar import_types = __webpack_require__(/*! @smithy/types */ \"(rsc)/./node_modules/@smithy/types/dist-cjs/index.js\");\nvar _Command = class _Command {\n    constructor(){\n        this.middlewareStack = (0, import_middleware_stack.constructStack)();\n    }\n    /**\n   * Factory for Command ClassBuilder.\n   * @internal\n   */ static classBuilder() {\n        return new ClassBuilder();\n    }\n    /**\n   * @internal\n   */ resolveMiddlewareWithContext(clientStack, configuration, options, { middlewareFn, clientName, commandName, inputFilterSensitiveLog, outputFilterSensitiveLog, smithyContext, additionalContext, CommandCtor }) {\n        for (const mw of middlewareFn.bind(this)(CommandCtor, clientStack, configuration, options)){\n            this.middlewareStack.use(mw);\n        }\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger: logger2 } = configuration;\n        const handlerExecutionContext = {\n            logger: logger2,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog,\n            outputFilterSensitiveLog,\n            [import_types.SMITHY_CONTEXT_KEY]: {\n                ...smithyContext\n            },\n            ...additionalContext\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n};\n__name(_Command, \"Command\");\nvar Command = _Command;\nvar _ClassBuilder = class _ClassBuilder {\n    constructor(){\n        this._init = ()=>{};\n        this._ep = {};\n        this._middlewareFn = ()=>[];\n        this._commandName = \"\";\n        this._clientName = \"\";\n        this._additionalContext = {};\n        this._smithyContext = {};\n        this._inputFilterSensitiveLog = (_)=>_;\n        this._outputFilterSensitiveLog = (_)=>_;\n        this._serializer = null;\n        this._deserializer = null;\n    }\n    /**\n   * Optional init callback.\n   */ init(cb) {\n        this._init = cb;\n    }\n    /**\n   * Set the endpoint parameter instructions.\n   */ ep(endpointParameterInstructions) {\n        this._ep = endpointParameterInstructions;\n        return this;\n    }\n    /**\n   * Add any number of middleware.\n   */ m(middlewareSupplier) {\n        this._middlewareFn = middlewareSupplier;\n        return this;\n    }\n    /**\n   * Set the initial handler execution context Smithy field.\n   */ s(service, operation, smithyContext = {}) {\n        this._smithyContext = {\n            service,\n            operation,\n            ...smithyContext\n        };\n        return this;\n    }\n    /**\n   * Set the initial handler execution context.\n   */ c(additionalContext = {}) {\n        this._additionalContext = additionalContext;\n        return this;\n    }\n    /**\n   * Set constant string identifiers for the operation.\n   */ n(clientName, commandName) {\n        this._clientName = clientName;\n        this._commandName = commandName;\n        return this;\n    }\n    /**\n   * Set the input and output sensistive log filters.\n   */ f(inputFilter = (_)=>_, outputFilter = (_)=>_) {\n        this._inputFilterSensitiveLog = inputFilter;\n        this._outputFilterSensitiveLog = outputFilter;\n        return this;\n    }\n    /**\n   * Sets the serializer.\n   */ ser(serializer) {\n        this._serializer = serializer;\n        return this;\n    }\n    /**\n   * Sets the deserializer.\n   */ de(deserializer) {\n        this._deserializer = deserializer;\n        return this;\n    }\n    /**\n   * @returns a Command class with the classBuilder properties.\n   */ build() {\n        var _a;\n        const closure = this;\n        let CommandRef;\n        return CommandRef = (_a = class extends Command {\n            /**\n       * @public\n       */ constructor(...[input]){\n                super();\n                /**\n         * @internal\n         */ // @ts-ignore used in middlewareFn closure.\n                this.serialize = closure._serializer;\n                /**\n         * @internal\n         */ // @ts-ignore used in middlewareFn closure.\n                this.deserialize = closure._deserializer;\n                this.input = input ?? {};\n                closure._init(this);\n            }\n            /**\n       * @public\n       */ static getEndpointParameterInstructions() {\n                return closure._ep;\n            }\n            /**\n       * @internal\n       */ resolveMiddleware(stack, configuration, options) {\n                return this.resolveMiddlewareWithContext(stack, configuration, options, {\n                    CommandCtor: CommandRef,\n                    middlewareFn: closure._middlewareFn,\n                    clientName: closure._clientName,\n                    commandName: closure._commandName,\n                    inputFilterSensitiveLog: closure._inputFilterSensitiveLog,\n                    outputFilterSensitiveLog: closure._outputFilterSensitiveLog,\n                    smithyContext: closure._smithyContext,\n                    additionalContext: closure._additionalContext\n                });\n            }\n        }, __name(_a, \"CommandRef\"), _a);\n    }\n};\n__name(_ClassBuilder, \"ClassBuilder\");\nvar ClassBuilder = _ClassBuilder;\n// src/constants.ts\nvar SENSITIVE_STRING = \"***SensitiveInformation***\";\n// src/create-aggregated-client.ts\nvar createAggregatedClient = /* @__PURE__ */ __name((commands, Client2)=>{\n    for (const command of Object.keys(commands)){\n        const CommandCtor = commands[command];\n        const methodImpl = /* @__PURE__ */ __name(async function(args, optionsOrCb, cb) {\n            const command2 = new CommandCtor(args);\n            if (typeof optionsOrCb === \"function\") {\n                this.send(command2, optionsOrCb);\n            } else if (typeof cb === \"function\") {\n                if (typeof optionsOrCb !== \"object\") throw new Error(`Expected http options but got ${typeof optionsOrCb}`);\n                this.send(command2, optionsOrCb || {}, cb);\n            } else {\n                return this.send(command2, optionsOrCb);\n            }\n        }, \"methodImpl\");\n        const methodName = (command[0].toLowerCase() + command.slice(1)).replace(/Command$/, \"\");\n        Client2.prototype[methodName] = methodImpl;\n    }\n}, \"createAggregatedClient\");\n// src/parse-utils.ts\nvar parseBoolean = /* @__PURE__ */ __name((value)=>{\n    switch(value){\n        case \"true\":\n            return true;\n        case \"false\":\n            return false;\n        default:\n            throw new Error(`Unable to parse boolean value \"${value}\"`);\n    }\n}, \"parseBoolean\");\nvar expectBoolean = /* @__PURE__ */ __name((value)=>{\n    if (value === null || value === void 0) {\n        return void 0;\n    }\n    if (typeof value === \"number\") {\n        if (value === 0 || value === 1) {\n            logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));\n        }\n        if (value === 0) {\n            return false;\n        }\n        if (value === 1) {\n            return true;\n        }\n    }\n    if (typeof value === \"string\") {\n        const lower = value.toLowerCase();\n        if (lower === \"false\" || lower === \"true\") {\n            logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));\n        }\n        if (lower === \"false\") {\n            return false;\n        }\n        if (lower === \"true\") {\n            return true;\n        }\n    }\n    if (typeof value === \"boolean\") {\n        return value;\n    }\n    throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);\n}, \"expectBoolean\");\nvar expectNumber = /* @__PURE__ */ __name((value)=>{\n    if (value === null || value === void 0) {\n        return void 0;\n    }\n    if (typeof value === \"string\") {\n        const parsed = parseFloat(value);\n        if (!Number.isNaN(parsed)) {\n            if (String(parsed) !== String(value)) {\n                logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));\n            }\n            return parsed;\n        }\n    }\n    if (typeof value === \"number\") {\n        return value;\n    }\n    throw new TypeError(`Expected number, got ${typeof value}: ${value}`);\n}, \"expectNumber\");\nvar MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));\nvar expectFloat32 = /* @__PURE__ */ __name((value)=>{\n    const expected = expectNumber(value);\n    if (expected !== void 0 && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {\n        if (Math.abs(expected) > MAX_FLOAT) {\n            throw new TypeError(`Expected 32-bit float, got ${value}`);\n        }\n    }\n    return expected;\n}, \"expectFloat32\");\nvar expectLong = /* @__PURE__ */ __name((value)=>{\n    if (value === null || value === void 0) {\n        return void 0;\n    }\n    if (Number.isInteger(value) && !Number.isNaN(value)) {\n        return value;\n    }\n    throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);\n}, \"expectLong\");\nvar expectInt = expectLong;\nvar expectInt32 = /* @__PURE__ */ __name((value)=>expectSizedInt(value, 32), \"expectInt32\");\nvar expectShort = /* @__PURE__ */ __name((value)=>expectSizedInt(value, 16), \"expectShort\");\nvar expectByte = /* @__PURE__ */ __name((value)=>expectSizedInt(value, 8), \"expectByte\");\nvar expectSizedInt = /* @__PURE__ */ __name((value, size)=>{\n    const expected = expectLong(value);\n    if (expected !== void 0 && castInt(expected, size) !== expected) {\n        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);\n    }\n    return expected;\n}, \"expectSizedInt\");\nvar castInt = /* @__PURE__ */ __name((value, size)=>{\n    switch(size){\n        case 32:\n            return Int32Array.of(value)[0];\n        case 16:\n            return Int16Array.of(value)[0];\n        case 8:\n            return Int8Array.of(value)[0];\n    }\n}, \"castInt\");\nvar expectNonNull = /* @__PURE__ */ __name((value, location)=>{\n    if (value === null || value === void 0) {\n        if (location) {\n            throw new TypeError(`Expected a non-null value for ${location}`);\n        }\n        throw new TypeError(\"Expected a non-null value\");\n    }\n    return value;\n}, \"expectNonNull\");\nvar expectObject = /* @__PURE__ */ __name((value)=>{\n    if (value === null || value === void 0) {\n        return void 0;\n    }\n    if (typeof value === \"object\" && !Array.isArray(value)) {\n        return value;\n    }\n    const receivedType = Array.isArray(value) ? \"array\" : typeof value;\n    throw new TypeError(`Expected object, got ${receivedType}: ${value}`);\n}, \"expectObject\");\nvar expectString = /* @__PURE__ */ __name((value)=>{\n    if (value === null || value === void 0) {\n        return void 0;\n    }\n    if (typeof value === \"string\") {\n        return value;\n    }\n    if ([\n        \"boolean\",\n        \"number\",\n        \"bigint\"\n    ].includes(typeof value)) {\n        logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));\n        return String(value);\n    }\n    throw new TypeError(`Expected string, got ${typeof value}: ${value}`);\n}, \"expectString\");\nvar expectUnion = /* @__PURE__ */ __name((value)=>{\n    if (value === null || value === void 0) {\n        return void 0;\n    }\n    const asObject = expectObject(value);\n    const setKeys = Object.entries(asObject).filter(([, v])=>v != null).map(([k])=>k);\n    if (setKeys.length === 0) {\n        throw new TypeError(`Unions must have exactly one non-null member. None were found.`);\n    }\n    if (setKeys.length > 1) {\n        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);\n    }\n    return asObject;\n}, \"expectUnion\");\nvar strictParseDouble = /* @__PURE__ */ __name((value)=>{\n    if (typeof value == \"string\") {\n        return expectNumber(parseNumber(value));\n    }\n    return expectNumber(value);\n}, \"strictParseDouble\");\nvar strictParseFloat = strictParseDouble;\nvar strictParseFloat32 = /* @__PURE__ */ __name((value)=>{\n    if (typeof value == \"string\") {\n        return expectFloat32(parseNumber(value));\n    }\n    return expectFloat32(value);\n}, \"strictParseFloat32\");\nvar NUMBER_REGEX = /(-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)|(-?Infinity)|(NaN)/g;\nvar parseNumber = /* @__PURE__ */ __name((value)=>{\n    const matches = value.match(NUMBER_REGEX);\n    if (matches === null || matches[0].length !== value.length) {\n        throw new TypeError(`Expected real number, got implicit NaN`);\n    }\n    return parseFloat(value);\n}, \"parseNumber\");\nvar limitedParseDouble = /* @__PURE__ */ __name((value)=>{\n    if (typeof value == \"string\") {\n        return parseFloatString(value);\n    }\n    return expectNumber(value);\n}, \"limitedParseDouble\");\nvar handleFloat = limitedParseDouble;\nvar limitedParseFloat = limitedParseDouble;\nvar limitedParseFloat32 = /* @__PURE__ */ __name((value)=>{\n    if (typeof value == \"string\") {\n        return parseFloatString(value);\n    }\n    return expectFloat32(value);\n}, \"limitedParseFloat32\");\nvar parseFloatString = /* @__PURE__ */ __name((value)=>{\n    switch(value){\n        case \"NaN\":\n            return NaN;\n        case \"Infinity\":\n            return Infinity;\n        case \"-Infinity\":\n            return -Infinity;\n        default:\n            throw new Error(`Unable to parse float value: ${value}`);\n    }\n}, \"parseFloatString\");\nvar strictParseLong = /* @__PURE__ */ __name((value)=>{\n    if (typeof value === \"string\") {\n        return expectLong(parseNumber(value));\n    }\n    return expectLong(value);\n}, \"strictParseLong\");\nvar strictParseInt = strictParseLong;\nvar strictParseInt32 = /* @__PURE__ */ __name((value)=>{\n    if (typeof value === \"string\") {\n        return expectInt32(parseNumber(value));\n    }\n    return expectInt32(value);\n}, \"strictParseInt32\");\nvar strictParseShort = /* @__PURE__ */ __name((value)=>{\n    if (typeof value === \"string\") {\n        return expectShort(parseNumber(value));\n    }\n    return expectShort(value);\n}, \"strictParseShort\");\nvar strictParseByte = /* @__PURE__ */ __name((value)=>{\n    if (typeof value === \"string\") {\n        return expectByte(parseNumber(value));\n    }\n    return expectByte(value);\n}, \"strictParseByte\");\nvar stackTraceWarning = /* @__PURE__ */ __name((message)=>{\n    return String(new TypeError(message).stack || message).split(\"\\n\").slice(0, 5).filter((s)=>!s.includes(\"stackTraceWarning\")).join(\"\\n\");\n}, \"stackTraceWarning\");\nvar logger = {\n    warn: console.warn\n};\n// src/date-utils.ts\nvar DAYS = [\n    \"Sun\",\n    \"Mon\",\n    \"Tue\",\n    \"Wed\",\n    \"Thu\",\n    \"Fri\",\n    \"Sat\"\n];\nvar MONTHS = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\"\n];\nfunction dateToUtcString(date) {\n    const year = date.getUTCFullYear();\n    const month = date.getUTCMonth();\n    const dayOfWeek = date.getUTCDay();\n    const dayOfMonthInt = date.getUTCDate();\n    const hoursInt = date.getUTCHours();\n    const minutesInt = date.getUTCMinutes();\n    const secondsInt = date.getUTCSeconds();\n    const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;\n    const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;\n    const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;\n    const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;\n    return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;\n}\n__name(dateToUtcString, \"dateToUtcString\");\nvar RFC3339 = new RegExp(/^(\\d{4})-(\\d{2})-(\\d{2})[tT](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))?[zZ]$/);\nvar parseRfc3339DateTime = /* @__PURE__ */ __name((value)=>{\n    if (value === null || value === void 0) {\n        return void 0;\n    }\n    if (typeof value !== \"string\") {\n        throw new TypeError(\"RFC-3339 date-times must be expressed as strings\");\n    }\n    const match = RFC3339.exec(value);\n    if (!match) {\n        throw new TypeError(\"Invalid RFC-3339 date-time value\");\n    }\n    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;\n    const year = strictParseShort(stripLeadingZeroes(yearStr));\n    const month = parseDateValue(monthStr, \"month\", 1, 12);\n    const day = parseDateValue(dayStr, \"day\", 1, 31);\n    return buildDate(year, month, day, {\n        hours,\n        minutes,\n        seconds,\n        fractionalMilliseconds\n    });\n}, \"parseRfc3339DateTime\");\nvar RFC3339_WITH_OFFSET = new RegExp(/^(\\d{4})-(\\d{2})-(\\d{2})[tT](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))?(([-+]\\d{2}\\:\\d{2})|[zZ])$/);\nvar parseRfc3339DateTimeWithOffset = /* @__PURE__ */ __name((value)=>{\n    if (value === null || value === void 0) {\n        return void 0;\n    }\n    if (typeof value !== \"string\") {\n        throw new TypeError(\"RFC-3339 date-times must be expressed as strings\");\n    }\n    const match = RFC3339_WITH_OFFSET.exec(value);\n    if (!match) {\n        throw new TypeError(\"Invalid RFC-3339 date-time value\");\n    }\n    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;\n    const year = strictParseShort(stripLeadingZeroes(yearStr));\n    const month = parseDateValue(monthStr, \"month\", 1, 12);\n    const day = parseDateValue(dayStr, \"day\", 1, 31);\n    const date = buildDate(year, month, day, {\n        hours,\n        minutes,\n        seconds,\n        fractionalMilliseconds\n    });\n    if (offsetStr.toUpperCase() != \"Z\") {\n        date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));\n    }\n    return date;\n}, \"parseRfc3339DateTimeWithOffset\");\nvar IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d{1,2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? GMT$/);\nvar RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d{2}) (\\d{1,2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? GMT$/);\nvar ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\\d{2}) (\\d{1,2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? (\\d{4})$/);\nvar parseRfc7231DateTime = /* @__PURE__ */ __name((value)=>{\n    if (value === null || value === void 0) {\n        return void 0;\n    }\n    if (typeof value !== \"string\") {\n        throw new TypeError(\"RFC-7231 date-times must be expressed as strings\");\n    }\n    let match = IMF_FIXDATE.exec(value);\n    if (match) {\n        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;\n        return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, \"day\", 1, 31), {\n            hours,\n            minutes,\n            seconds,\n            fractionalMilliseconds\n        });\n    }\n    match = RFC_850_DATE.exec(value);\n    if (match) {\n        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;\n        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, \"day\", 1, 31), {\n            hours,\n            minutes,\n            seconds,\n            fractionalMilliseconds\n        }));\n    }\n    match = ASC_TIME.exec(value);\n    if (match) {\n        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;\n        return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), \"day\", 1, 31), {\n            hours,\n            minutes,\n            seconds,\n            fractionalMilliseconds\n        });\n    }\n    throw new TypeError(\"Invalid RFC-7231 date-time value\");\n}, \"parseRfc7231DateTime\");\nvar parseEpochTimestamp = /* @__PURE__ */ __name((value)=>{\n    if (value === null || value === void 0) {\n        return void 0;\n    }\n    let valueAsDouble;\n    if (typeof value === \"number\") {\n        valueAsDouble = value;\n    } else if (typeof value === \"string\") {\n        valueAsDouble = strictParseDouble(value);\n    } else {\n        throw new TypeError(\"Epoch timestamps must be expressed as floating point numbers or their string representation\");\n    }\n    if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {\n        throw new TypeError(\"Epoch timestamps must be valid, non-Infinite, non-NaN numerics\");\n    }\n    return new Date(Math.round(valueAsDouble * 1e3));\n}, \"parseEpochTimestamp\");\nvar buildDate = /* @__PURE__ */ __name((year, month, day, time)=>{\n    const adjustedMonth = month - 1;\n    validateDayOfMonth(year, adjustedMonth, day);\n    return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, \"hour\", 0, 23), parseDateValue(time.minutes, \"minute\", 0, 59), // seconds can go up to 60 for leap seconds\n    parseDateValue(time.seconds, \"seconds\", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));\n}, \"buildDate\");\nvar parseTwoDigitYear = /* @__PURE__ */ __name((value)=>{\n    const thisYear = /* @__PURE__ */ new Date().getUTCFullYear();\n    const valueInThisCentury = Math.floor(thisYear / 100) * 100 + strictParseShort(stripLeadingZeroes(value));\n    if (valueInThisCentury < thisYear) {\n        return valueInThisCentury + 100;\n    }\n    return valueInThisCentury;\n}, \"parseTwoDigitYear\");\nvar FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;\nvar adjustRfc850Year = /* @__PURE__ */ __name((input)=>{\n    if (input.getTime() - /* @__PURE__ */ new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {\n        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));\n    }\n    return input;\n}, \"adjustRfc850Year\");\nvar parseMonthByShortName = /* @__PURE__ */ __name((value)=>{\n    const monthIdx = MONTHS.indexOf(value);\n    if (monthIdx < 0) {\n        throw new TypeError(`Invalid month: ${value}`);\n    }\n    return monthIdx + 1;\n}, \"parseMonthByShortName\");\nvar DAYS_IN_MONTH = [\n    31,\n    28,\n    31,\n    30,\n    31,\n    30,\n    31,\n    31,\n    30,\n    31,\n    30,\n    31\n];\nvar validateDayOfMonth = /* @__PURE__ */ __name((year, month, day)=>{\n    let maxDays = DAYS_IN_MONTH[month];\n    if (month === 1 && isLeapYear(year)) {\n        maxDays = 29;\n    }\n    if (day > maxDays) {\n        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);\n    }\n}, \"validateDayOfMonth\");\nvar isLeapYear = /* @__PURE__ */ __name((year)=>{\n    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}, \"isLeapYear\");\nvar parseDateValue = /* @__PURE__ */ __name((value, type, lower, upper)=>{\n    const dateVal = strictParseByte(stripLeadingZeroes(value));\n    if (dateVal < lower || dateVal > upper) {\n        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);\n    }\n    return dateVal;\n}, \"parseDateValue\");\nvar parseMilliseconds = /* @__PURE__ */ __name((value)=>{\n    if (value === null || value === void 0) {\n        return 0;\n    }\n    return strictParseFloat32(\"0.\" + value) * 1e3;\n}, \"parseMilliseconds\");\nvar parseOffsetToMilliseconds = /* @__PURE__ */ __name((value)=>{\n    const directionStr = value[0];\n    let direction = 1;\n    if (directionStr == \"+\") {\n        direction = 1;\n    } else if (directionStr == \"-\") {\n        direction = -1;\n    } else {\n        throw new TypeError(`Offset direction, ${directionStr}, must be \"+\" or \"-\"`);\n    }\n    const hour = Number(value.substring(1, 3));\n    const minute = Number(value.substring(4, 6));\n    return direction * (hour * 60 + minute) * 60 * 1e3;\n}, \"parseOffsetToMilliseconds\");\nvar stripLeadingZeroes = /* @__PURE__ */ __name((value)=>{\n    let idx = 0;\n    while(idx < value.length - 1 && value.charAt(idx) === \"0\"){\n        idx++;\n    }\n    if (idx === 0) {\n        return value;\n    }\n    return value.slice(idx);\n}, \"stripLeadingZeroes\");\n// src/exceptions.ts\nvar _ServiceException = class _ServiceException extends Error {\n    constructor(options){\n        super(options.message);\n        Object.setPrototypeOf(this, _ServiceException.prototype);\n        this.name = options.name;\n        this.$fault = options.$fault;\n        this.$metadata = options.$metadata;\n    }\n};\n__name(_ServiceException, \"ServiceException\");\nvar ServiceException = _ServiceException;\nvar decorateServiceException = /* @__PURE__ */ __name((exception, additions = {})=>{\n    Object.entries(additions).filter(([, v])=>v !== void 0).forEach(([k, v])=>{\n        if (exception[k] == void 0 || exception[k] === \"\") {\n            exception[k] = v;\n        }\n    });\n    const message = exception.message || exception.Message || \"UnknownError\";\n    exception.message = message;\n    delete exception.Message;\n    return exception;\n}, \"decorateServiceException\");\n// src/default-error-handler.ts\nvar throwDefaultError = /* @__PURE__ */ __name(({ output, parsedBody, exceptionCtor, errorCode })=>{\n    const $metadata = deserializeMetadata(output);\n    const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + \"\" : void 0;\n    const response = new exceptionCtor({\n        name: (parsedBody == null ? void 0 : parsedBody.code) || (parsedBody == null ? void 0 : parsedBody.Code) || errorCode || statusCode || \"UnknownError\",\n        $fault: \"client\",\n        $metadata\n    });\n    throw decorateServiceException(response, parsedBody);\n}, \"throwDefaultError\");\nvar withBaseException = /* @__PURE__ */ __name((ExceptionCtor)=>{\n    return ({ output, parsedBody, errorCode })=>{\n        throwDefaultError({\n            output,\n            parsedBody,\n            exceptionCtor: ExceptionCtor,\n            errorCode\n        });\n    };\n}, \"withBaseException\");\nvar deserializeMetadata = /* @__PURE__ */ __name((output)=>({\n        httpStatusCode: output.statusCode,\n        requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n        extendedRequestId: output.headers[\"x-amz-id-2\"],\n        cfId: output.headers[\"x-amz-cf-id\"]\n    }), \"deserializeMetadata\");\n// src/defaults-mode.ts\nvar loadConfigsForDefaultMode = /* @__PURE__ */ __name((mode)=>{\n    switch(mode){\n        case \"standard\":\n            return {\n                retryMode: \"standard\",\n                connectionTimeout: 3100\n            };\n        case \"in-region\":\n            return {\n                retryMode: \"standard\",\n                connectionTimeout: 1100\n            };\n        case \"cross-region\":\n            return {\n                retryMode: \"standard\",\n                connectionTimeout: 3100\n            };\n        case \"mobile\":\n            return {\n                retryMode: \"standard\",\n                connectionTimeout: 3e4\n            };\n        default:\n            return {};\n    }\n}, \"loadConfigsForDefaultMode\");\n// src/emitWarningIfUnsupportedVersion.ts\nvar warningEmitted = false;\nvar emitWarningIfUnsupportedVersion = /* @__PURE__ */ __name((version)=>{\n    if (version && !warningEmitted && parseInt(version.substring(1, version.indexOf(\".\"))) < 14) {\n        warningEmitted = true;\n    }\n}, \"emitWarningIfUnsupportedVersion\");\n// src/extensions/checksum.ts\nvar getChecksumConfiguration = /* @__PURE__ */ __name((runtimeConfig)=>{\n    const checksumAlgorithms = [];\n    for(const id in import_types.AlgorithmId){\n        const algorithmId = import_types.AlgorithmId[id];\n        if (runtimeConfig[algorithmId] === void 0) {\n            continue;\n        }\n        checksumAlgorithms.push({\n            algorithmId: ()=>algorithmId,\n            checksumConstructor: ()=>runtimeConfig[algorithmId]\n        });\n    }\n    return {\n        _checksumAlgorithms: checksumAlgorithms,\n        addChecksumAlgorithm (algo) {\n            this._checksumAlgorithms.push(algo);\n        },\n        checksumAlgorithms () {\n            return this._checksumAlgorithms;\n        }\n    };\n}, \"getChecksumConfiguration\");\nvar resolveChecksumRuntimeConfig = /* @__PURE__ */ __name((clientConfig)=>{\n    const runtimeConfig = {};\n    clientConfig.checksumAlgorithms().forEach((checksumAlgorithm)=>{\n        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();\n    });\n    return runtimeConfig;\n}, \"resolveChecksumRuntimeConfig\");\n// src/extensions/retry.ts\nvar getRetryConfiguration = /* @__PURE__ */ __name((runtimeConfig)=>{\n    let _retryStrategy = runtimeConfig.retryStrategy;\n    return {\n        setRetryStrategy (retryStrategy) {\n            _retryStrategy = retryStrategy;\n        },\n        retryStrategy () {\n            return _retryStrategy;\n        }\n    };\n}, \"getRetryConfiguration\");\nvar resolveRetryRuntimeConfig = /* @__PURE__ */ __name((retryStrategyConfiguration)=>{\n    const runtimeConfig = {};\n    runtimeConfig.retryStrategy = retryStrategyConfiguration.retryStrategy();\n    return runtimeConfig;\n}, \"resolveRetryRuntimeConfig\");\n// src/extensions/defaultExtensionConfiguration.ts\nvar getDefaultExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig)=>{\n    return {\n        ...getChecksumConfiguration(runtimeConfig),\n        ...getRetryConfiguration(runtimeConfig)\n    };\n}, \"getDefaultExtensionConfiguration\");\nvar getDefaultClientConfiguration = getDefaultExtensionConfiguration;\nvar resolveDefaultRuntimeConfig = /* @__PURE__ */ __name((config)=>{\n    return {\n        ...resolveChecksumRuntimeConfig(config),\n        ...resolveRetryRuntimeConfig(config)\n    };\n}, \"resolveDefaultRuntimeConfig\");\n// src/extended-encode-uri-component.ts\nfunction extendedEncodeURIComponent(str) {\n    return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {\n        return \"%\" + c.charCodeAt(0).toString(16).toUpperCase();\n    });\n}\n__name(extendedEncodeURIComponent, \"extendedEncodeURIComponent\");\n// src/get-array-if-single-item.ts\nvar getArrayIfSingleItem = /* @__PURE__ */ __name((mayBeArray)=>Array.isArray(mayBeArray) ? mayBeArray : [\n        mayBeArray\n    ], \"getArrayIfSingleItem\");\n// src/get-value-from-text-node.ts\nvar getValueFromTextNode = /* @__PURE__ */ __name((obj)=>{\n    const textNodeName = \"#text\";\n    for(const key in obj){\n        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {\n            obj[key] = obj[key][textNodeName];\n        } else if (typeof obj[key] === \"object\" && obj[key] !== null) {\n            obj[key] = getValueFromTextNode(obj[key]);\n        }\n    }\n    return obj;\n}, \"getValueFromTextNode\");\n// src/lazy-json.ts\nvar StringWrapper = /* @__PURE__ */ __name(function() {\n    const Class = Object.getPrototypeOf(this).constructor;\n    const Constructor = Function.bind.apply(String, [\n        null,\n        ...arguments\n    ]);\n    const instance = new Constructor();\n    Object.setPrototypeOf(instance, Class.prototype);\n    return instance;\n}, \"StringWrapper\");\nStringWrapper.prototype = Object.create(String.prototype, {\n    constructor: {\n        value: StringWrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n    }\n});\nObject.setPrototypeOf(StringWrapper, String);\nvar _LazyJsonString = class _LazyJsonString extends StringWrapper {\n    deserializeJSON() {\n        return JSON.parse(super.toString());\n    }\n    toJSON() {\n        return super.toString();\n    }\n    static fromObject(object) {\n        if (object instanceof _LazyJsonString) {\n            return object;\n        } else if (object instanceof String || typeof object === \"string\") {\n            return new _LazyJsonString(object);\n        }\n        return new _LazyJsonString(JSON.stringify(object));\n    }\n};\n__name(_LazyJsonString, \"LazyJsonString\");\nvar LazyJsonString = _LazyJsonString;\n// src/object-mapping.ts\nfunction map(arg0, arg1, arg2) {\n    let target;\n    let filter;\n    let instructions;\n    if (typeof arg1 === \"undefined\" && typeof arg2 === \"undefined\") {\n        target = {};\n        instructions = arg0;\n    } else {\n        target = arg0;\n        if (typeof arg1 === \"function\") {\n            filter = arg1;\n            instructions = arg2;\n            return mapWithFilter(target, filter, instructions);\n        } else {\n            instructions = arg1;\n        }\n    }\n    for (const key of Object.keys(instructions)){\n        if (!Array.isArray(instructions[key])) {\n            target[key] = instructions[key];\n            continue;\n        }\n        applyInstruction(target, null, instructions, key);\n    }\n    return target;\n}\n__name(map, \"map\");\nvar convertMap = /* @__PURE__ */ __name((target)=>{\n    const output = {};\n    for (const [k, v] of Object.entries(target || {})){\n        output[k] = [\n            ,\n            v\n        ];\n    }\n    return output;\n}, \"convertMap\");\nvar take = /* @__PURE__ */ __name((source, instructions)=>{\n    const out = {};\n    for(const key in instructions){\n        applyInstruction(out, source, instructions, key);\n    }\n    return out;\n}, \"take\");\nvar mapWithFilter = /* @__PURE__ */ __name((target, filter, instructions)=>{\n    return map(target, Object.entries(instructions).reduce((_instructions, [key, value])=>{\n        if (Array.isArray(value)) {\n            _instructions[key] = value;\n        } else {\n            if (typeof value === \"function\") {\n                _instructions[key] = [\n                    filter,\n                    value()\n                ];\n            } else {\n                _instructions[key] = [\n                    filter,\n                    value\n                ];\n            }\n        }\n        return _instructions;\n    }, {}));\n}, \"mapWithFilter\");\nvar applyInstruction = /* @__PURE__ */ __name((target, source, instructions, targetKey)=>{\n    if (source !== null) {\n        let instruction = instructions[targetKey];\n        if (typeof instruction === \"function\") {\n            instruction = [\n                ,\n                instruction\n            ];\n        }\n        const [filter2 = nonNullish, valueFn = pass, sourceKey = targetKey] = instruction;\n        if (typeof filter2 === \"function\" && filter2(source[sourceKey]) || typeof filter2 !== \"function\" && !!filter2) {\n            target[targetKey] = valueFn(source[sourceKey]);\n        }\n        return;\n    }\n    let [filter, value] = instructions[targetKey];\n    if (typeof value === \"function\") {\n        let _value;\n        const defaultFilterPassed = filter === void 0 && (_value = value()) != null;\n        const customFilterPassed = typeof filter === \"function\" && !!filter(void 0) || typeof filter !== \"function\" && !!filter;\n        if (defaultFilterPassed) {\n            target[targetKey] = _value;\n        } else if (customFilterPassed) {\n            target[targetKey] = value();\n        }\n    } else {\n        const defaultFilterPassed = filter === void 0 && value != null;\n        const customFilterPassed = typeof filter === \"function\" && !!filter(value) || typeof filter !== \"function\" && !!filter;\n        if (defaultFilterPassed || customFilterPassed) {\n            target[targetKey] = value;\n        }\n    }\n}, \"applyInstruction\");\nvar nonNullish = /* @__PURE__ */ __name((_)=>_ != null, \"nonNullish\");\nvar pass = /* @__PURE__ */ __name((_)=>_, \"pass\");\n// src/resolve-path.ts\nvar resolvedPath = /* @__PURE__ */ __name((resolvedPath2, input, memberName, labelValueProvider, uriLabel, isGreedyLabel)=>{\n    if (input != null && input[memberName] !== void 0) {\n        const labelValue = labelValueProvider();\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: \" + memberName + \".\");\n        }\n        resolvedPath2 = resolvedPath2.replace(uriLabel, isGreedyLabel ? labelValue.split(\"/\").map((segment)=>extendedEncodeURIComponent(segment)).join(\"/\") : extendedEncodeURIComponent(labelValue));\n    } else {\n        throw new Error(\"No value provided for input HTTP label: \" + memberName + \".\");\n    }\n    return resolvedPath2;\n}, \"resolvedPath\");\n// src/ser-utils.ts\nvar serializeFloat = /* @__PURE__ */ __name((value)=>{\n    if (value !== value) {\n        return \"NaN\";\n    }\n    switch(value){\n        case Infinity:\n            return \"Infinity\";\n        case -Infinity:\n            return \"-Infinity\";\n        default:\n            return value;\n    }\n}, \"serializeFloat\");\n// src/serde-json.ts\nvar _json = /* @__PURE__ */ __name((obj)=>{\n    if (obj == null) {\n        return {};\n    }\n    if (Array.isArray(obj)) {\n        return obj.filter((_)=>_ != null).map(_json);\n    }\n    if (typeof obj === \"object\") {\n        const target = {};\n        for (const key of Object.keys(obj)){\n            if (obj[key] == null) {\n                continue;\n            }\n            target[key] = _json(obj[key]);\n        }\n        return target;\n    }\n    return obj;\n}, \"_json\");\n// src/split-every.ts\nfunction splitEvery(value, delimiter, numDelimiters) {\n    if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {\n        throw new Error(\"Invalid number of delimiters (\" + numDelimiters + \") for splitEvery.\");\n    }\n    const segments = value.split(delimiter);\n    if (numDelimiters === 1) {\n        return segments;\n    }\n    const compoundSegments = [];\n    let currentSegment = \"\";\n    for(let i = 0; i < segments.length; i++){\n        if (currentSegment === \"\") {\n            currentSegment = segments[i];\n        } else {\n            currentSegment += delimiter + segments[i];\n        }\n        if ((i + 1) % numDelimiters === 0) {\n            compoundSegments.push(currentSegment);\n            currentSegment = \"\";\n        }\n    }\n    if (currentSegment !== \"\") {\n        compoundSegments.push(currentSegment);\n    }\n    return compoundSegments;\n}\n__name(splitEvery, \"splitEvery\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/smithy-client/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/types/dist-cjs/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@smithy/types/dist-cjs/index.js ***!
  \******************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    AlgorithmId: ()=>AlgorithmId,\n    EndpointURLScheme: ()=>EndpointURLScheme,\n    FieldPosition: ()=>FieldPosition,\n    HttpApiKeyAuthLocation: ()=>HttpApiKeyAuthLocation,\n    HttpAuthLocation: ()=>HttpAuthLocation,\n    IniSectionType: ()=>IniSectionType,\n    RequestHandlerProtocol: ()=>RequestHandlerProtocol,\n    SMITHY_CONTEXT_KEY: ()=>SMITHY_CONTEXT_KEY,\n    getDefaultClientConfiguration: ()=>getDefaultClientConfiguration,\n    resolveDefaultRuntimeConfig: ()=>resolveDefaultRuntimeConfig\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/auth/auth.ts\nvar HttpAuthLocation = /* @__PURE__ */ ((HttpAuthLocation2)=>{\n    HttpAuthLocation2[\"HEADER\"] = \"header\";\n    HttpAuthLocation2[\"QUERY\"] = \"query\";\n    return HttpAuthLocation2;\n})(HttpAuthLocation || {});\n// src/auth/HttpApiKeyAuth.ts\nvar HttpApiKeyAuthLocation = /* @__PURE__ */ ((HttpApiKeyAuthLocation2)=>{\n    HttpApiKeyAuthLocation2[\"HEADER\"] = \"header\";\n    HttpApiKeyAuthLocation2[\"QUERY\"] = \"query\";\n    return HttpApiKeyAuthLocation2;\n})(HttpApiKeyAuthLocation || {});\n// src/endpoint.ts\nvar EndpointURLScheme = /* @__PURE__ */ ((EndpointURLScheme2)=>{\n    EndpointURLScheme2[\"HTTP\"] = \"http\";\n    EndpointURLScheme2[\"HTTPS\"] = \"https\";\n    return EndpointURLScheme2;\n})(EndpointURLScheme || {});\n// src/extensions/checksum.ts\nvar AlgorithmId = /* @__PURE__ */ ((AlgorithmId2)=>{\n    AlgorithmId2[\"MD5\"] = \"md5\";\n    AlgorithmId2[\"CRC32\"] = \"crc32\";\n    AlgorithmId2[\"CRC32C\"] = \"crc32c\";\n    AlgorithmId2[\"SHA1\"] = \"sha1\";\n    AlgorithmId2[\"SHA256\"] = \"sha256\";\n    return AlgorithmId2;\n})(AlgorithmId || {});\nvar getChecksumConfiguration = /* @__PURE__ */ __name((runtimeConfig)=>{\n    const checksumAlgorithms = [];\n    if (runtimeConfig.sha256 !== void 0) {\n        checksumAlgorithms.push({\n            algorithmId: ()=>\"sha256\" /* SHA256 */ ,\n            checksumConstructor: ()=>runtimeConfig.sha256\n        });\n    }\n    if (runtimeConfig.md5 != void 0) {\n        checksumAlgorithms.push({\n            algorithmId: ()=>\"md5\" /* MD5 */ ,\n            checksumConstructor: ()=>runtimeConfig.md5\n        });\n    }\n    return {\n        _checksumAlgorithms: checksumAlgorithms,\n        addChecksumAlgorithm (algo) {\n            this._checksumAlgorithms.push(algo);\n        },\n        checksumAlgorithms () {\n            return this._checksumAlgorithms;\n        }\n    };\n}, \"getChecksumConfiguration\");\nvar resolveChecksumRuntimeConfig = /* @__PURE__ */ __name((clientConfig)=>{\n    const runtimeConfig = {};\n    clientConfig.checksumAlgorithms().forEach((checksumAlgorithm)=>{\n        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();\n    });\n    return runtimeConfig;\n}, \"resolveChecksumRuntimeConfig\");\n// src/extensions/defaultClientConfiguration.ts\nvar getDefaultClientConfiguration = /* @__PURE__ */ __name((runtimeConfig)=>{\n    return {\n        ...getChecksumConfiguration(runtimeConfig)\n    };\n}, \"getDefaultClientConfiguration\");\nvar resolveDefaultRuntimeConfig = /* @__PURE__ */ __name((config)=>{\n    return {\n        ...resolveChecksumRuntimeConfig(config)\n    };\n}, \"resolveDefaultRuntimeConfig\");\n// src/http.ts\nvar FieldPosition = /* @__PURE__ */ ((FieldPosition2)=>{\n    FieldPosition2[FieldPosition2[\"HEADER\"] = 0] = \"HEADER\";\n    FieldPosition2[FieldPosition2[\"TRAILER\"] = 1] = \"TRAILER\";\n    return FieldPosition2;\n})(FieldPosition || {});\n// src/middleware.ts\nvar SMITHY_CONTEXT_KEY = \"__smithy_context\";\n// src/profile.ts\nvar IniSectionType = /* @__PURE__ */ ((IniSectionType2)=>{\n    IniSectionType2[\"PROFILE\"] = \"profile\";\n    IniSectionType2[\"SSO_SESSION\"] = \"sso-session\";\n    IniSectionType2[\"SERVICES\"] = \"services\";\n    return IniSectionType2;\n})(IniSectionType || {});\n// src/transfer.ts\nvar RequestHandlerProtocol = /* @__PURE__ */ ((RequestHandlerProtocol2)=>{\n    RequestHandlerProtocol2[\"HTTP_0_9\"] = \"http/0.9\";\n    RequestHandlerProtocol2[\"HTTP_1_0\"] = \"http/1.0\";\n    RequestHandlerProtocol2[\"TDS_8_0\"] = \"tds/8.0\";\n    return RequestHandlerProtocol2;\n})(RequestHandlerProtocol || {});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/types/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/url-parser/dist-cjs/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@smithy/url-parser/dist-cjs/index.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    parseUrl: ()=>parseUrl\n});\nmodule.exports = __toCommonJS(src_exports);\nvar import_querystring_parser = __webpack_require__(/*! @smithy/querystring-parser */ \"(rsc)/./node_modules/@smithy/querystring-parser/dist-cjs/index.js\");\nvar parseUrl = /* @__PURE__ */ __name((url)=>{\n    if (typeof url === \"string\") {\n        return parseUrl(new URL(url));\n    }\n    const { hostname, pathname, port, protocol, search } = url;\n    let query;\n    if (search) {\n        query = (0, import_querystring_parser.parseQueryString)(search);\n    }\n    return {\n        hostname,\n        port: port ? parseInt(port) : void 0,\n        protocol,\n        path: pathname,\n        query\n    };\n}, \"parseUrl\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91cmwtcGFyc2VyL2Rpc3QtY2pzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxZQUFZQyxPQUFPQyxjQUFjO0FBQ3JDLElBQUlDLG1CQUFtQkYsT0FBT0csd0JBQXdCO0FBQ3RELElBQUlDLG9CQUFvQkosT0FBT0ssbUJBQW1CO0FBQ2xELElBQUlDLGVBQWVOLE9BQU9PLFNBQVMsQ0FBQ0MsY0FBYztBQUNsRCxJQUFJQyxTQUFTLENBQUNDLFFBQVFDLFFBQVVaLFVBQVVXLFFBQVEsUUFBUTtRQUFFQztRQUFPQyxjQUFjO0lBQUs7QUFDdEYsSUFBSUMsV0FBVyxDQUFDSCxRQUFRSTtJQUN0QixJQUFLLElBQUlDLFFBQVFELElBQ2ZmLFVBQVVXLFFBQVFLLE1BQU07UUFBRUMsS0FBS0YsR0FBRyxDQUFDQyxLQUFLO1FBQUVFLFlBQVk7SUFBSztBQUMvRDtBQUNBLElBQUlDLGNBQWMsQ0FBQ0MsSUFBSUMsTUFBTUMsUUFBUUM7SUFDbkMsSUFBSUYsUUFBUSxPQUFPQSxTQUFTLFlBQVksT0FBT0EsU0FBUyxZQUFZO1FBQ2xFLEtBQUssSUFBSUcsT0FBT25CLGtCQUFrQmdCLE1BQ2hDLElBQUksQ0FBQ2QsYUFBYWtCLElBQUksQ0FBQ0wsSUFBSUksUUFBUUEsUUFBUUYsUUFDekN0QixVQUFVb0IsSUFBSUksS0FBSztZQUFFUCxLQUFLLElBQU1JLElBQUksQ0FBQ0csSUFBSTtZQUFFTixZQUFZLENBQUVLLENBQUFBLE9BQU9wQixpQkFBaUJrQixNQUFNRyxJQUFHLEtBQU1ELEtBQUtMLFVBQVU7UUFBQztJQUN0SDtJQUNBLE9BQU9FO0FBQ1Q7QUFDQSxJQUFJTSxlQUFlLENBQUNDLE1BQVFSLFlBQVluQixVQUFVLENBQUMsR0FBRyxjQUFjO1FBQUVZLE9BQU87SUFBSyxJQUFJZTtBQUV0RixlQUFlO0FBQ2YsSUFBSUMsY0FBYyxDQUFDO0FBQ25CZCxTQUFTYyxhQUFhO0lBQ3BCQyxVQUFVLElBQU1BO0FBQ2xCO0FBQ0FDLE9BQU9DLE9BQU8sR0FBR0wsYUFBYUU7QUFDOUIsSUFBSUksNEJBQTRCQyxtQkFBT0EsQ0FBQyxxR0FBNEI7QUFDcEUsSUFBSUosV0FBVyxhQUFhLEdBQUduQixPQUFPLENBQUN3QjtJQUNyQyxJQUFJLE9BQU9BLFFBQVEsVUFBVTtRQUMzQixPQUFPTCxTQUFTLElBQUlNLElBQUlEO0lBQzFCO0lBQ0EsTUFBTSxFQUFFRSxRQUFRLEVBQUVDLFFBQVEsRUFBRUMsSUFBSSxFQUFFQyxRQUFRLEVBQUVDLE1BQU0sRUFBRSxHQUFHTjtJQUN2RCxJQUFJTztJQUNKLElBQUlELFFBQVE7UUFDVkMsUUFBUSxDQUFDLEdBQUdULDBCQUEwQlUsZ0JBQWdCLEVBQUVGO0lBQzFEO0lBQ0EsT0FBTztRQUNMSjtRQUNBRSxNQUFNQSxPQUFPSyxTQUFTTCxRQUFRLEtBQUs7UUFDbkNDO1FBQ0FLLE1BQU1QO1FBQ05JO0lBQ0Y7QUFDRixHQUFHO0FBQ0gsNkRBQTZEO0FBRTdELEtBQU1YLENBQUFBLENBRU4iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb29kLWJsb2cvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91cmwtcGFyc2VyL2Rpc3QtY2pzL2luZGV4LmpzP2VhOWIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIHBhcnNlVXJsOiAoKSA9PiBwYXJzZVVybFxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzcmNfZXhwb3J0cyk7XG52YXIgaW1wb3J0X3F1ZXJ5c3RyaW5nX3BhcnNlciA9IHJlcXVpcmUoXCJAc21pdGh5L3F1ZXJ5c3RyaW5nLXBhcnNlclwiKTtcbnZhciBwYXJzZVVybCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHVybCkgPT4ge1xuICBpZiAodHlwZW9mIHVybCA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBwYXJzZVVybChuZXcgVVJMKHVybCkpO1xuICB9XG4gIGNvbnN0IHsgaG9zdG5hbWUsIHBhdGhuYW1lLCBwb3J0LCBwcm90b2NvbCwgc2VhcmNoIH0gPSB1cmw7XG4gIGxldCBxdWVyeTtcbiAgaWYgKHNlYXJjaCkge1xuICAgIHF1ZXJ5ID0gKDAsIGltcG9ydF9xdWVyeXN0cmluZ19wYXJzZXIucGFyc2VRdWVyeVN0cmluZykoc2VhcmNoKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGhvc3RuYW1lLFxuICAgIHBvcnQ6IHBvcnQgPyBwYXJzZUludChwb3J0KSA6IHZvaWQgMCxcbiAgICBwcm90b2NvbCxcbiAgICBwYXRoOiBwYXRobmFtZSxcbiAgICBxdWVyeVxuICB9O1xufSwgXCJwYXJzZVVybFwiKTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcblxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBhcnNlVXJsXG59KTtcblxuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9faGFzT3duUHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX19uYW1lIiwidGFyZ2V0IiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJfX2V4cG9ydCIsImFsbCIsIm5hbWUiLCJnZXQiLCJlbnVtZXJhYmxlIiwiX19jb3B5UHJvcHMiLCJ0byIsImZyb20iLCJleGNlcHQiLCJkZXNjIiwia2V5IiwiY2FsbCIsIl9fdG9Db21tb25KUyIsIm1vZCIsInNyY19leHBvcnRzIiwicGFyc2VVcmwiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW1wb3J0X3F1ZXJ5c3RyaW5nX3BhcnNlciIsInJlcXVpcmUiLCJ1cmwiLCJVUkwiLCJob3N0bmFtZSIsInBhdGhuYW1lIiwicG9ydCIsInByb3RvY29sIiwic2VhcmNoIiwicXVlcnkiLCJwYXJzZVF1ZXJ5U3RyaW5nIiwicGFyc2VJbnQiLCJwYXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/url-parser/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-base64/dist-cjs/fromBase64.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@smithy/util-base64/dist-cjs/fromBase64.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.fromBase64 = void 0;\nconst util_buffer_from_1 = __webpack_require__(/*! @smithy/util-buffer-from */ \"(rsc)/./node_modules/@smithy/util-buffer-from/dist-cjs/index.js\");\nconst BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;\nconst fromBase64 = (input)=>{\n    if (input.length * 3 % 4 !== 0) {\n        throw new TypeError(`Incorrect padding on base64 string.`);\n    }\n    if (!BASE64_REGEX.exec(input)) {\n        throw new TypeError(`Invalid base64 string.`);\n    }\n    const buffer = (0, util_buffer_from_1.fromString)(input, \"base64\");\n    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n};\nexports.fromBase64 = fromBase64;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWJhc2U2NC9kaXN0LWNqcy9mcm9tQmFzZTY0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQkFBa0IsR0FBRyxLQUFLO0FBQzFCLE1BQU1HLHFCQUFxQkMsbUJBQU9BLENBQUMsaUdBQTBCO0FBQzdELE1BQU1DLGVBQWU7QUFDckIsTUFBTUgsYUFBYSxDQUFDSTtJQUNoQixJQUFJLE1BQU9DLE1BQU0sR0FBRyxJQUFLLE1BQU0sR0FBRztRQUM5QixNQUFNLElBQUlDLFVBQVUsQ0FBQyxtQ0FBbUMsQ0FBQztJQUM3RDtJQUNBLElBQUksQ0FBQ0gsYUFBYUksSUFBSSxDQUFDSCxRQUFRO1FBQzNCLE1BQU0sSUFBSUUsVUFBVSxDQUFDLHNCQUFzQixDQUFDO0lBQ2hEO0lBQ0EsTUFBTUUsU0FBUyxDQUFDLEdBQUdQLG1CQUFtQlEsVUFBVSxFQUFFTCxPQUFPO0lBQ3pELE9BQU8sSUFBSU0sV0FBV0YsT0FBT0EsTUFBTSxFQUFFQSxPQUFPRyxVQUFVLEVBQUVILE9BQU9JLFVBQVU7QUFDN0U7QUFDQWQsa0JBQWtCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vZC1ibG9nLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1iYXNlNjQvZGlzdC1janMvZnJvbUJhc2U2NC5qcz81YjA2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mcm9tQmFzZTY0ID0gdm9pZCAwO1xuY29uc3QgdXRpbF9idWZmZXJfZnJvbV8xID0gcmVxdWlyZShcIkBzbWl0aHkvdXRpbC1idWZmZXItZnJvbVwiKTtcbmNvbnN0IEJBU0U2NF9SRUdFWCA9IC9eW0EtWmEtejAtOSsvXSo9ezAsMn0kLztcbmNvbnN0IGZyb21CYXNlNjQgPSAoaW5wdXQpID0+IHtcbiAgICBpZiAoKGlucHV0Lmxlbmd0aCAqIDMpICUgNCAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbmNvcnJlY3QgcGFkZGluZyBvbiBiYXNlNjQgc3RyaW5nLmApO1xuICAgIH1cbiAgICBpZiAoIUJBU0U2NF9SRUdFWC5leGVjKGlucHV0KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIGJhc2U2NCBzdHJpbmcuYCk7XG4gICAgfVxuICAgIGNvbnN0IGJ1ZmZlciA9ICgwLCB1dGlsX2J1ZmZlcl9mcm9tXzEuZnJvbVN0cmluZykoaW5wdXQsIFwiYmFzZTY0XCIpO1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShidWZmZXIuYnVmZmVyLCBidWZmZXIuYnl0ZU9mZnNldCwgYnVmZmVyLmJ5dGVMZW5ndGgpO1xufTtcbmV4cG9ydHMuZnJvbUJhc2U2NCA9IGZyb21CYXNlNjQ7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJmcm9tQmFzZTY0IiwidXRpbF9idWZmZXJfZnJvbV8xIiwicmVxdWlyZSIsIkJBU0U2NF9SRUdFWCIsImlucHV0IiwibGVuZ3RoIiwiVHlwZUVycm9yIiwiZXhlYyIsImJ1ZmZlciIsImZyb21TdHJpbmciLCJVaW50OEFycmF5IiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-base64/dist-cjs/fromBase64.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-base64/dist-cjs/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@smithy/util-base64/dist-cjs/index.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __reExport = (target, mod, secondTarget)=>(__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\nmodule.exports = __toCommonJS(src_exports);\n__reExport(src_exports, __webpack_require__(/*! ././fromBase64 */ \"(rsc)/./node_modules/@smithy/util-base64/dist-cjs/fromBase64.js\"), module.exports);\n__reExport(src_exports, __webpack_require__(/*! ././toBase64 */ \"(rsc)/./node_modules/@smithy/util-base64/dist-cjs/toBase64.js\"), module.exports);\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWJhc2U2NC9kaXN0LWNqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsWUFBWUMsT0FBT0MsY0FBYztBQUNyQyxJQUFJQyxtQkFBbUJGLE9BQU9HLHdCQUF3QjtBQUN0RCxJQUFJQyxvQkFBb0JKLE9BQU9LLG1CQUFtQjtBQUNsRCxJQUFJQyxlQUFlTixPQUFPTyxTQUFTLENBQUNDLGNBQWM7QUFDbEQsSUFBSUMsY0FBYyxDQUFDQyxJQUFJQyxNQUFNQyxRQUFRQztJQUNuQyxJQUFJRixRQUFRLE9BQU9BLFNBQVMsWUFBWSxPQUFPQSxTQUFTLFlBQVk7UUFDbEUsS0FBSyxJQUFJRyxPQUFPVixrQkFBa0JPLE1BQ2hDLElBQUksQ0FBQ0wsYUFBYVMsSUFBSSxDQUFDTCxJQUFJSSxRQUFRQSxRQUFRRixRQUN6Q2IsVUFBVVcsSUFBSUksS0FBSztZQUFFRSxLQUFLLElBQU1MLElBQUksQ0FBQ0csSUFBSTtZQUFFRyxZQUFZLENBQUVKLENBQUFBLE9BQU9YLGlCQUFpQlMsTUFBTUcsSUFBRyxLQUFNRCxLQUFLSSxVQUFVO1FBQUM7SUFDdEg7SUFDQSxPQUFPUDtBQUNUO0FBQ0EsSUFBSVEsYUFBYSxDQUFDQyxRQUFRQyxLQUFLQyxlQUFrQlosQ0FBQUEsWUFBWVUsUUFBUUMsS0FBSyxZQUFZQyxnQkFBZ0JaLFlBQVlZLGNBQWNELEtBQUssVUFBUztBQUM5SSxJQUFJRSxlQUFlLENBQUNGLE1BQVFYLFlBQVlWLFVBQVUsQ0FBQyxHQUFHLGNBQWM7UUFBRXdCLE9BQU87SUFBSyxJQUFJSDtBQUV0RixlQUFlO0FBQ2YsSUFBSUksY0FBYyxDQUFDO0FBQ25CQyxPQUFPQyxPQUFPLEdBQUdKLGFBQWFFO0FBQzlCTixXQUFXTSxhQUFhRyxtQkFBT0EsQ0FBQyx1RkFBZ0IsR0FBR0YsT0FBT0MsT0FBTztBQUNqRVIsV0FBV00sYUFBYUcsbUJBQU9BLENBQUMsbUZBQWMsR0FBR0YsT0FBT0MsT0FBTztBQUMvRCw2REFBNkQ7QUFFN0QsS0FBTUQsQ0FBQUEsQ0FHTiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2QtYmxvZy8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtYmFzZTY0L2Rpc3QtY2pzL2luZGV4LmpzP2M2ZjUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX19yZUV4cG9ydCA9ICh0YXJnZXQsIG1vZCwgc2Vjb25kVGFyZ2V0KSA9PiAoX19jb3B5UHJvcHModGFyZ2V0LCBtb2QsIFwiZGVmYXVsdFwiKSwgc2Vjb25kVGFyZ2V0ICYmIF9fY29weVByb3BzKHNlY29uZFRhcmdldCwgbW9kLCBcImRlZmF1bHRcIikpO1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIHNyY19leHBvcnRzID0ge307XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzcmNfZXhwb3J0cyk7XG5fX3JlRXhwb3J0KHNyY19leHBvcnRzLCByZXF1aXJlKFwiLi8uL2Zyb21CYXNlNjRcIiksIG1vZHVsZS5leHBvcnRzKTtcbl9fcmVFeHBvcnQoc3JjX2V4cG9ydHMsIHJlcXVpcmUoXCIuLy4vdG9CYXNlNjRcIiksIG1vZHVsZS5leHBvcnRzKTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcblxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGZyb21CYXNlNjQsXG4gIHRvQmFzZTY0XG59KTtcblxuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9faGFzT3duUHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX19jb3B5UHJvcHMiLCJ0byIsImZyb20iLCJleGNlcHQiLCJkZXNjIiwia2V5IiwiY2FsbCIsImdldCIsImVudW1lcmFibGUiLCJfX3JlRXhwb3J0IiwidGFyZ2V0IiwibW9kIiwic2Vjb25kVGFyZ2V0IiwiX190b0NvbW1vbkpTIiwidmFsdWUiLCJzcmNfZXhwb3J0cyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIiwiZnJvbUJhc2U2NCIsInRvQmFzZTY0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-base64/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-base64/dist-cjs/toBase64.js":
/*!***************************************************************!*\
  !*** ./node_modules/@smithy/util-base64/dist-cjs/toBase64.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.toBase64 = void 0;\nconst util_buffer_from_1 = __webpack_require__(/*! @smithy/util-buffer-from */ \"(rsc)/./node_modules/@smithy/util-buffer-from/dist-cjs/index.js\");\nconst util_utf8_1 = __webpack_require__(/*! @smithy/util-utf8 */ \"(rsc)/./node_modules/@smithy/util-utf8/dist-cjs/index.js\");\nconst toBase64 = (_input)=>{\n    let input;\n    if (typeof _input === \"string\") {\n        input = (0, util_utf8_1.fromUtf8)(_input);\n    } else {\n        input = _input;\n    }\n    if (typeof input !== \"object\" || typeof input.byteOffset !== \"number\" || typeof input.byteLength !== \"number\") {\n        throw new Error(\"@smithy/util-base64: toBase64 encoder function only accepts string | Uint8Array.\");\n    }\n    return (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString(\"base64\");\n};\nexports.toBase64 = toBase64;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWJhc2U2NC9kaXN0LWNqcy90b0Jhc2U2NC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZ0JBQWdCLEdBQUcsS0FBSztBQUN4QixNQUFNRyxxQkFBcUJDLG1CQUFPQSxDQUFDLGlHQUEwQjtBQUM3RCxNQUFNQyxjQUFjRCxtQkFBT0EsQ0FBQyxtRkFBbUI7QUFDL0MsTUFBTUYsV0FBVyxDQUFDSTtJQUNkLElBQUlDO0lBQ0osSUFBSSxPQUFPRCxXQUFXLFVBQVU7UUFDNUJDLFFBQVEsQ0FBQyxHQUFHRixZQUFZRyxRQUFRLEVBQUVGO0lBQ3RDLE9BQ0s7UUFDREMsUUFBUUQ7SUFDWjtJQUNBLElBQUksT0FBT0MsVUFBVSxZQUFZLE9BQU9BLE1BQU1FLFVBQVUsS0FBSyxZQUFZLE9BQU9GLE1BQU1HLFVBQVUsS0FBSyxVQUFVO1FBQzNHLE1BQU0sSUFBSUMsTUFBTTtJQUNwQjtJQUNBLE9BQU8sQ0FBQyxHQUFHUixtQkFBbUJTLGVBQWUsRUFBRUwsTUFBTU0sTUFBTSxFQUFFTixNQUFNRSxVQUFVLEVBQUVGLE1BQU1HLFVBQVUsRUFBRUksUUFBUSxDQUFDO0FBQzlHO0FBQ0FkLGdCQUFnQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2QtYmxvZy8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtYmFzZTY0L2Rpc3QtY2pzL3RvQmFzZTY0LmpzPzkwZTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRvQmFzZTY0ID0gdm9pZCAwO1xuY29uc3QgdXRpbF9idWZmZXJfZnJvbV8xID0gcmVxdWlyZShcIkBzbWl0aHkvdXRpbC1idWZmZXItZnJvbVwiKTtcbmNvbnN0IHV0aWxfdXRmOF8xID0gcmVxdWlyZShcIkBzbWl0aHkvdXRpbC11dGY4XCIpO1xuY29uc3QgdG9CYXNlNjQgPSAoX2lucHV0KSA9PiB7XG4gICAgbGV0IGlucHV0O1xuICAgIGlmICh0eXBlb2YgX2lucHV0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlucHV0ID0gKDAsIHV0aWxfdXRmOF8xLmZyb21VdGY4KShfaW5wdXQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaW5wdXQgPSBfaW5wdXQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5wdXQgIT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGlucHV0LmJ5dGVPZmZzZXQgIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIGlucHV0LmJ5dGVMZW5ndGggIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQHNtaXRoeS91dGlsLWJhc2U2NDogdG9CYXNlNjQgZW5jb2RlciBmdW5jdGlvbiBvbmx5IGFjY2VwdHMgc3RyaW5nIHwgVWludDhBcnJheS5cIik7XG4gICAgfVxuICAgIHJldHVybiAoMCwgdXRpbF9idWZmZXJfZnJvbV8xLmZyb21BcnJheUJ1ZmZlcikoaW5wdXQuYnVmZmVyLCBpbnB1dC5ieXRlT2Zmc2V0LCBpbnB1dC5ieXRlTGVuZ3RoKS50b1N0cmluZyhcImJhc2U2NFwiKTtcbn07XG5leHBvcnRzLnRvQmFzZTY0ID0gdG9CYXNlNjQ7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0b0Jhc2U2NCIsInV0aWxfYnVmZmVyX2Zyb21fMSIsInJlcXVpcmUiLCJ1dGlsX3V0ZjhfMSIsIl9pbnB1dCIsImlucHV0IiwiZnJvbVV0ZjgiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsIkVycm9yIiwiZnJvbUFycmF5QnVmZmVyIiwiYnVmZmVyIiwidG9TdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-base64/dist-cjs/toBase64.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-buffer-from/dist-cjs/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@smithy/util-buffer-from/dist-cjs/index.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    fromArrayBuffer: ()=>fromArrayBuffer,\n    fromString: ()=>fromString\n});\nmodule.exports = __toCommonJS(src_exports);\nvar import_is_array_buffer = __webpack_require__(/*! @smithy/is-array-buffer */ \"(rsc)/./node_modules/@smithy/is-array-buffer/dist-cjs/index.js\");\nvar import_buffer = __webpack_require__(/*! buffer */ \"buffer\");\nvar fromArrayBuffer = /* @__PURE__ */ __name((input, offset = 0, length = input.byteLength - offset)=>{\n    if (!(0, import_is_array_buffer.isArrayBuffer)(input)) {\n        throw new TypeError(`The \"input\" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);\n    }\n    return import_buffer.Buffer.from(input, offset, length);\n}, \"fromArrayBuffer\");\nvar fromString = /* @__PURE__ */ __name((input, encoding)=>{\n    if (typeof input !== \"string\") {\n        throw new TypeError(`The \"input\" argument must be of type string. Received type ${typeof input} (${input})`);\n    }\n    return encoding ? import_buffer.Buffer.from(input, encoding) : import_buffer.Buffer.from(input);\n}, \"fromString\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWJ1ZmZlci1mcm9tL2Rpc3QtY2pzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxZQUFZQyxPQUFPQyxjQUFjO0FBQ3JDLElBQUlDLG1CQUFtQkYsT0FBT0csd0JBQXdCO0FBQ3RELElBQUlDLG9CQUFvQkosT0FBT0ssbUJBQW1CO0FBQ2xELElBQUlDLGVBQWVOLE9BQU9PLFNBQVMsQ0FBQ0MsY0FBYztBQUNsRCxJQUFJQyxTQUFTLENBQUNDLFFBQVFDLFFBQVVaLFVBQVVXLFFBQVEsUUFBUTtRQUFFQztRQUFPQyxjQUFjO0lBQUs7QUFDdEYsSUFBSUMsV0FBVyxDQUFDSCxRQUFRSTtJQUN0QixJQUFLLElBQUlDLFFBQVFELElBQ2ZmLFVBQVVXLFFBQVFLLE1BQU07UUFBRUMsS0FBS0YsR0FBRyxDQUFDQyxLQUFLO1FBQUVFLFlBQVk7SUFBSztBQUMvRDtBQUNBLElBQUlDLGNBQWMsQ0FBQ0MsSUFBSUMsTUFBTUMsUUFBUUM7SUFDbkMsSUFBSUYsUUFBUSxPQUFPQSxTQUFTLFlBQVksT0FBT0EsU0FBUyxZQUFZO1FBQ2xFLEtBQUssSUFBSUcsT0FBT25CLGtCQUFrQmdCLE1BQ2hDLElBQUksQ0FBQ2QsYUFBYWtCLElBQUksQ0FBQ0wsSUFBSUksUUFBUUEsUUFBUUYsUUFDekN0QixVQUFVb0IsSUFBSUksS0FBSztZQUFFUCxLQUFLLElBQU1JLElBQUksQ0FBQ0csSUFBSTtZQUFFTixZQUFZLENBQUVLLENBQUFBLE9BQU9wQixpQkFBaUJrQixNQUFNRyxJQUFHLEtBQU1ELEtBQUtMLFVBQVU7UUFBQztJQUN0SDtJQUNBLE9BQU9FO0FBQ1Q7QUFDQSxJQUFJTSxlQUFlLENBQUNDLE1BQVFSLFlBQVluQixVQUFVLENBQUMsR0FBRyxjQUFjO1FBQUVZLE9BQU87SUFBSyxJQUFJZTtBQUV0RixlQUFlO0FBQ2YsSUFBSUMsY0FBYyxDQUFDO0FBQ25CZCxTQUFTYyxhQUFhO0lBQ3BCQyxpQkFBaUIsSUFBTUE7SUFDdkJDLFlBQVksSUFBTUE7QUFDcEI7QUFDQUMsT0FBT0MsT0FBTyxHQUFHTixhQUFhRTtBQUM5QixJQUFJSyx5QkFBeUJDLG1CQUFPQSxDQUFDLCtGQUF5QjtBQUM5RCxJQUFJQyxnQkFBZ0JELG1CQUFPQSxDQUFDLHNCQUFRO0FBQ3BDLElBQUlMLGtCQUFrQixhQUFhLEdBQUduQixPQUFPLENBQUMwQixPQUFPQyxTQUFTLENBQUMsRUFBRUMsU0FBU0YsTUFBTUcsVUFBVSxHQUFHRixNQUFNO0lBQ2pHLElBQUksQ0FBQyxDQUFDLEdBQUdKLHVCQUF1Qk8sYUFBYSxFQUFFSixRQUFRO1FBQ3JELE1BQU0sSUFBSUssVUFBVSxDQUFDLHdEQUF3RCxFQUFFLE9BQU9MLE1BQU0sRUFBRSxFQUFFQSxNQUFNLENBQUMsQ0FBQztJQUMxRztJQUNBLE9BQU9ELGNBQWNPLE1BQU0sQ0FBQ3JCLElBQUksQ0FBQ2UsT0FBT0MsUUFBUUM7QUFDbEQsR0FBRztBQUNILElBQUlSLGFBQWEsYUFBYSxHQUFHcEIsT0FBTyxDQUFDMEIsT0FBT087SUFDOUMsSUFBSSxPQUFPUCxVQUFVLFVBQVU7UUFDN0IsTUFBTSxJQUFJSyxVQUFVLENBQUMsMkRBQTJELEVBQUUsT0FBT0wsTUFBTSxFQUFFLEVBQUVBLE1BQU0sQ0FBQyxDQUFDO0lBQzdHO0lBQ0EsT0FBT08sV0FBV1IsY0FBY08sTUFBTSxDQUFDckIsSUFBSSxDQUFDZSxPQUFPTyxZQUFZUixjQUFjTyxNQUFNLENBQUNyQixJQUFJLENBQUNlO0FBQzNGLEdBQUc7QUFDSCw2REFBNkQ7QUFFN0QsS0FBTUwsQ0FBQUEsQ0FHTiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2QtYmxvZy8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtYnVmZmVyLWZyb20vZGlzdC1janMvaW5kZXguanM/ZjYxOSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX25hbWUgPSAodGFyZ2V0LCB2YWx1ZSkgPT4gX19kZWZQcm9wKHRhcmdldCwgXCJuYW1lXCIsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBzcmNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc3JjX2V4cG9ydHMsIHtcbiAgZnJvbUFycmF5QnVmZmVyOiAoKSA9PiBmcm9tQXJyYXlCdWZmZXIsXG4gIGZyb21TdHJpbmc6ICgpID0+IGZyb21TdHJpbmdcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xudmFyIGltcG9ydF9pc19hcnJheV9idWZmZXIgPSByZXF1aXJlKFwiQHNtaXRoeS9pcy1hcnJheS1idWZmZXJcIik7XG52YXIgaW1wb3J0X2J1ZmZlciA9IHJlcXVpcmUoXCJidWZmZXJcIik7XG52YXIgZnJvbUFycmF5QnVmZmVyID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQsIG9mZnNldCA9IDAsIGxlbmd0aCA9IGlucHV0LmJ5dGVMZW5ndGggLSBvZmZzZXQpID0+IHtcbiAgaWYgKCEoMCwgaW1wb3J0X2lzX2FycmF5X2J1ZmZlci5pc0FycmF5QnVmZmVyKShpbnB1dCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBUaGUgXCJpbnB1dFwiIGFyZ3VtZW50IG11c3QgYmUgQXJyYXlCdWZmZXIuIFJlY2VpdmVkIHR5cGUgJHt0eXBlb2YgaW5wdXR9ICgke2lucHV0fSlgKTtcbiAgfVxuICByZXR1cm4gaW1wb3J0X2J1ZmZlci5CdWZmZXIuZnJvbShpbnB1dCwgb2Zmc2V0LCBsZW5ndGgpO1xufSwgXCJmcm9tQXJyYXlCdWZmZXJcIik7XG52YXIgZnJvbVN0cmluZyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBlbmNvZGluZykgPT4ge1xuICBpZiAodHlwZW9mIGlucHV0ICE9PSBcInN0cmluZ1wiKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgVGhlIFwiaW5wdXRcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nLiBSZWNlaXZlZCB0eXBlICR7dHlwZW9mIGlucHV0fSAoJHtpbnB1dH0pYCk7XG4gIH1cbiAgcmV0dXJuIGVuY29kaW5nID8gaW1wb3J0X2J1ZmZlci5CdWZmZXIuZnJvbShpbnB1dCwgZW5jb2RpbmcpIDogaW1wb3J0X2J1ZmZlci5CdWZmZXIuZnJvbShpbnB1dCk7XG59LCBcImZyb21TdHJpbmdcIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBmcm9tQXJyYXlCdWZmZXIsXG4gIGZyb21TdHJpbmdcbn0pO1xuXG4iXSwibmFtZXMiOlsiX19kZWZQcm9wIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2dldE93blByb3BEZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19nZXRPd25Qcm9wTmFtZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiX19oYXNPd25Qcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJfX25hbWUiLCJ0YXJnZXQiLCJ2YWx1ZSIsImNvbmZpZ3VyYWJsZSIsIl9fZXhwb3J0IiwiYWxsIiwibmFtZSIsImdldCIsImVudW1lcmFibGUiLCJfX2NvcHlQcm9wcyIsInRvIiwiZnJvbSIsImV4Y2VwdCIsImRlc2MiLCJrZXkiLCJjYWxsIiwiX190b0NvbW1vbkpTIiwibW9kIiwic3JjX2V4cG9ydHMiLCJmcm9tQXJyYXlCdWZmZXIiLCJmcm9tU3RyaW5nIiwibW9kdWxlIiwiZXhwb3J0cyIsImltcG9ydF9pc19hcnJheV9idWZmZXIiLCJyZXF1aXJlIiwiaW1wb3J0X2J1ZmZlciIsImlucHV0Iiwib2Zmc2V0IiwibGVuZ3RoIiwiYnl0ZUxlbmd0aCIsImlzQXJyYXlCdWZmZXIiLCJUeXBlRXJyb3IiLCJCdWZmZXIiLCJlbmNvZGluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-buffer-from/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-config-provider/dist-cjs/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@smithy/util-config-provider/dist-cjs/index.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    SelectorType: ()=>SelectorType,\n    booleanSelector: ()=>booleanSelector,\n    numberSelector: ()=>numberSelector\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/booleanSelector.ts\nvar booleanSelector = /* @__PURE__ */ __name((obj, key, type)=>{\n    if (!(key in obj)) return void 0;\n    if (obj[key] === \"true\") return true;\n    if (obj[key] === \"false\") return false;\n    throw new Error(`Cannot load ${type} \"${key}\". Expected \"true\" or \"false\", got ${obj[key]}.`);\n}, \"booleanSelector\");\n// src/numberSelector.ts\nvar numberSelector = /* @__PURE__ */ __name((obj, key, type)=>{\n    if (!(key in obj)) return void 0;\n    const numberValue = parseInt(obj[key], 10);\n    if (Number.isNaN(numberValue)) {\n        throw new TypeError(`Cannot load ${type} '${key}'. Expected number, got '${obj[key]}'.`);\n    }\n    return numberValue;\n}, \"numberSelector\");\n// src/types.ts\nvar SelectorType = /* @__PURE__ */ ((SelectorType2)=>{\n    SelectorType2[\"ENV\"] = \"env\";\n    SelectorType2[\"CONFIG\"] = \"shared config entry\";\n    return SelectorType2;\n})(SelectorType || {});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWNvbmZpZy1wcm92aWRlci9kaXN0LWNqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsWUFBWUMsT0FBT0MsY0FBYztBQUNyQyxJQUFJQyxtQkFBbUJGLE9BQU9HLHdCQUF3QjtBQUN0RCxJQUFJQyxvQkFBb0JKLE9BQU9LLG1CQUFtQjtBQUNsRCxJQUFJQyxlQUFlTixPQUFPTyxTQUFTLENBQUNDLGNBQWM7QUFDbEQsSUFBSUMsU0FBUyxDQUFDQyxRQUFRQyxRQUFVWixVQUFVVyxRQUFRLFFBQVE7UUFBRUM7UUFBT0MsY0FBYztJQUFLO0FBQ3RGLElBQUlDLFdBQVcsQ0FBQ0gsUUFBUUk7SUFDdEIsSUFBSyxJQUFJQyxRQUFRRCxJQUNmZixVQUFVVyxRQUFRSyxNQUFNO1FBQUVDLEtBQUtGLEdBQUcsQ0FBQ0MsS0FBSztRQUFFRSxZQUFZO0lBQUs7QUFDL0Q7QUFDQSxJQUFJQyxjQUFjLENBQUNDLElBQUlDLE1BQU1DLFFBQVFDO0lBQ25DLElBQUlGLFFBQVEsT0FBT0EsU0FBUyxZQUFZLE9BQU9BLFNBQVMsWUFBWTtRQUNsRSxLQUFLLElBQUlHLE9BQU9uQixrQkFBa0JnQixNQUNoQyxJQUFJLENBQUNkLGFBQWFrQixJQUFJLENBQUNMLElBQUlJLFFBQVFBLFFBQVFGLFFBQ3pDdEIsVUFBVW9CLElBQUlJLEtBQUs7WUFBRVAsS0FBSyxJQUFNSSxJQUFJLENBQUNHLElBQUk7WUFBRU4sWUFBWSxDQUFFSyxDQUFBQSxPQUFPcEIsaUJBQWlCa0IsTUFBTUcsSUFBRyxLQUFNRCxLQUFLTCxVQUFVO1FBQUM7SUFDdEg7SUFDQSxPQUFPRTtBQUNUO0FBQ0EsSUFBSU0sZUFBZSxDQUFDQyxNQUFRUixZQUFZbkIsVUFBVSxDQUFDLEdBQUcsY0FBYztRQUFFWSxPQUFPO0lBQUssSUFBSWU7QUFFdEYsZUFBZTtBQUNmLElBQUlDLGNBQWMsQ0FBQztBQUNuQmQsU0FBU2MsYUFBYTtJQUNwQkMsY0FBYyxJQUFNQTtJQUNwQkMsaUJBQWlCLElBQU1BO0lBQ3ZCQyxnQkFBZ0IsSUFBTUE7QUFDeEI7QUFDQUMsT0FBT0MsT0FBTyxHQUFHUCxhQUFhRTtBQUU5Qix5QkFBeUI7QUFDekIsSUFBSUUsa0JBQWtCLGFBQWEsR0FBR3BCLE9BQU8sQ0FBQ3dCLEtBQUtWLEtBQUtXO0lBQ3RELElBQUksQ0FBRVgsQ0FBQUEsT0FBT1UsR0FBRSxHQUNiLE9BQU8sS0FBSztJQUNkLElBQUlBLEdBQUcsQ0FBQ1YsSUFBSSxLQUFLLFFBQ2YsT0FBTztJQUNULElBQUlVLEdBQUcsQ0FBQ1YsSUFBSSxLQUFLLFNBQ2YsT0FBTztJQUNULE1BQU0sSUFBSVksTUFBTSxDQUFDLFlBQVksRUFBRUQsS0FBSyxFQUFFLEVBQUVYLElBQUksbUNBQW1DLEVBQUVVLEdBQUcsQ0FBQ1YsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUM5RixHQUFHO0FBRUgsd0JBQXdCO0FBQ3hCLElBQUlPLGlCQUFpQixhQUFhLEdBQUdyQixPQUFPLENBQUN3QixLQUFLVixLQUFLVztJQUNyRCxJQUFJLENBQUVYLENBQUFBLE9BQU9VLEdBQUUsR0FDYixPQUFPLEtBQUs7SUFDZCxNQUFNRyxjQUFjQyxTQUFTSixHQUFHLENBQUNWLElBQUksRUFBRTtJQUN2QyxJQUFJZSxPQUFPQyxLQUFLLENBQUNILGNBQWM7UUFDN0IsTUFBTSxJQUFJSSxVQUFVLENBQUMsWUFBWSxFQUFFTixLQUFLLEVBQUUsRUFBRVgsSUFBSSx5QkFBeUIsRUFBRVUsR0FBRyxDQUFDVixJQUFJLENBQUMsRUFBRSxDQUFDO0lBQ3pGO0lBQ0EsT0FBT2E7QUFDVCxHQUFHO0FBRUgsZUFBZTtBQUNmLElBQUlSLGVBQStCLGFBQUgsR0FBSSxFQUFDYTtJQUNuQ0EsYUFBYSxDQUFDLE1BQU0sR0FBRztJQUN2QkEsYUFBYSxDQUFDLFNBQVMsR0FBRztJQUMxQixPQUFPQTtBQUNULEdBQUdiLGdCQUFnQixDQUFDO0FBQ3BCLDZEQUE2RDtBQUU3RCxLQUFNRyxDQUFBQSxDQUlOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vZC1ibG9nLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1jb25maWctcHJvdmlkZXIvZGlzdC1janMvaW5kZXguanM/MWRhNCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX25hbWUgPSAodGFyZ2V0LCB2YWx1ZSkgPT4gX19kZWZQcm9wKHRhcmdldCwgXCJuYW1lXCIsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBzcmNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc3JjX2V4cG9ydHMsIHtcbiAgU2VsZWN0b3JUeXBlOiAoKSA9PiBTZWxlY3RvclR5cGUsXG4gIGJvb2xlYW5TZWxlY3RvcjogKCkgPT4gYm9vbGVhblNlbGVjdG9yLFxuICBudW1iZXJTZWxlY3RvcjogKCkgPT4gbnVtYmVyU2VsZWN0b3Jcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xuXG4vLyBzcmMvYm9vbGVhblNlbGVjdG9yLnRzXG52YXIgYm9vbGVhblNlbGVjdG9yID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob2JqLCBrZXksIHR5cGUpID0+IHtcbiAgaWYgKCEoa2V5IGluIG9iaikpXG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgaWYgKG9ialtrZXldID09PSBcInRydWVcIilcbiAgICByZXR1cm4gdHJ1ZTtcbiAgaWYgKG9ialtrZXldID09PSBcImZhbHNlXCIpXG4gICAgcmV0dXJuIGZhbHNlO1xuICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBsb2FkICR7dHlwZX0gXCIke2tleX1cIi4gRXhwZWN0ZWQgXCJ0cnVlXCIgb3IgXCJmYWxzZVwiLCBnb3QgJHtvYmpba2V5XX0uYCk7XG59LCBcImJvb2xlYW5TZWxlY3RvclwiKTtcblxuLy8gc3JjL251bWJlclNlbGVjdG9yLnRzXG52YXIgbnVtYmVyU2VsZWN0b3IgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvYmosIGtleSwgdHlwZSkgPT4ge1xuICBpZiAoIShrZXkgaW4gb2JqKSlcbiAgICByZXR1cm4gdm9pZCAwO1xuICBjb25zdCBudW1iZXJWYWx1ZSA9IHBhcnNlSW50KG9ialtrZXldLCAxMCk7XG4gIGlmIChOdW1iZXIuaXNOYU4obnVtYmVyVmFsdWUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgQ2Fubm90IGxvYWQgJHt0eXBlfSAnJHtrZXl9Jy4gRXhwZWN0ZWQgbnVtYmVyLCBnb3QgJyR7b2JqW2tleV19Jy5gKTtcbiAgfVxuICByZXR1cm4gbnVtYmVyVmFsdWU7XG59LCBcIm51bWJlclNlbGVjdG9yXCIpO1xuXG4vLyBzcmMvdHlwZXMudHNcbnZhciBTZWxlY3RvclR5cGUgPSAvKiBAX19QVVJFX18gKi8gKChTZWxlY3RvclR5cGUyKSA9PiB7XG4gIFNlbGVjdG9yVHlwZTJbXCJFTlZcIl0gPSBcImVudlwiO1xuICBTZWxlY3RvclR5cGUyW1wiQ09ORklHXCJdID0gXCJzaGFyZWQgY29uZmlnIGVudHJ5XCI7XG4gIHJldHVybiBTZWxlY3RvclR5cGUyO1xufSkoU2VsZWN0b3JUeXBlIHx8IHt9KTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcblxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGJvb2xlYW5TZWxlY3RvcixcbiAgbnVtYmVyU2VsZWN0b3IsXG4gIFNlbGVjdG9yVHlwZVxufSk7XG5cbiJdLCJuYW1lcyI6WyJfX2RlZlByb3AiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZ2V0T3duUHJvcERlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2dldE93blByb3BOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJfX2hhc093blByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fbmFtZSIsInRhcmdldCIsInZhbHVlIiwiY29uZmlndXJhYmxlIiwiX19leHBvcnQiLCJhbGwiLCJuYW1lIiwiZ2V0IiwiZW51bWVyYWJsZSIsIl9fY29weVByb3BzIiwidG8iLCJmcm9tIiwiZXhjZXB0IiwiZGVzYyIsImtleSIsImNhbGwiLCJfX3RvQ29tbW9uSlMiLCJtb2QiLCJzcmNfZXhwb3J0cyIsIlNlbGVjdG9yVHlwZSIsImJvb2xlYW5TZWxlY3RvciIsIm51bWJlclNlbGVjdG9yIiwibW9kdWxlIiwiZXhwb3J0cyIsIm9iaiIsInR5cGUiLCJFcnJvciIsIm51bWJlclZhbHVlIiwicGFyc2VJbnQiLCJOdW1iZXIiLCJpc05hTiIsIlR5cGVFcnJvciIsIlNlbGVjdG9yVHlwZTIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-config-provider/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-hex-encoding/dist-cjs/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@smithy/util-hex-encoding/dist-cjs/index.js ***!
  \******************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    fromHex: ()=>fromHex,\n    toHex: ()=>toHex\n});\nmodule.exports = __toCommonJS(src_exports);\nvar SHORT_TO_HEX = {};\nvar HEX_TO_SHORT = {};\nfor(let i = 0; i < 256; i++){\n    let encodedByte = i.toString(16).toLowerCase();\n    if (encodedByte.length === 1) {\n        encodedByte = `0${encodedByte}`;\n    }\n    SHORT_TO_HEX[i] = encodedByte;\n    HEX_TO_SHORT[encodedByte] = i;\n}\nfunction fromHex(encoded) {\n    if (encoded.length % 2 !== 0) {\n        throw new Error(\"Hex encoded strings must have an even number length\");\n    }\n    const out = new Uint8Array(encoded.length / 2);\n    for(let i = 0; i < encoded.length; i += 2){\n        const encodedByte = encoded.slice(i, i + 2).toLowerCase();\n        if (encodedByte in HEX_TO_SHORT) {\n            out[i / 2] = HEX_TO_SHORT[encodedByte];\n        } else {\n            throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);\n        }\n    }\n    return out;\n}\n__name(fromHex, \"fromHex\");\nfunction toHex(bytes) {\n    let out = \"\";\n    for(let i = 0; i < bytes.byteLength; i++){\n        out += SHORT_TO_HEX[bytes[i]];\n    }\n    return out;\n}\n__name(toHex, \"toHex\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWhleC1lbmNvZGluZy9kaXN0LWNqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsWUFBWUMsT0FBT0MsY0FBYztBQUNyQyxJQUFJQyxtQkFBbUJGLE9BQU9HLHdCQUF3QjtBQUN0RCxJQUFJQyxvQkFBb0JKLE9BQU9LLG1CQUFtQjtBQUNsRCxJQUFJQyxlQUFlTixPQUFPTyxTQUFTLENBQUNDLGNBQWM7QUFDbEQsSUFBSUMsU0FBUyxDQUFDQyxRQUFRQyxRQUFVWixVQUFVVyxRQUFRLFFBQVE7UUFBRUM7UUFBT0MsY0FBYztJQUFLO0FBQ3RGLElBQUlDLFdBQVcsQ0FBQ0gsUUFBUUk7SUFDdEIsSUFBSyxJQUFJQyxRQUFRRCxJQUNmZixVQUFVVyxRQUFRSyxNQUFNO1FBQUVDLEtBQUtGLEdBQUcsQ0FBQ0MsS0FBSztRQUFFRSxZQUFZO0lBQUs7QUFDL0Q7QUFDQSxJQUFJQyxjQUFjLENBQUNDLElBQUlDLE1BQU1DLFFBQVFDO0lBQ25DLElBQUlGLFFBQVEsT0FBT0EsU0FBUyxZQUFZLE9BQU9BLFNBQVMsWUFBWTtRQUNsRSxLQUFLLElBQUlHLE9BQU9uQixrQkFBa0JnQixNQUNoQyxJQUFJLENBQUNkLGFBQWFrQixJQUFJLENBQUNMLElBQUlJLFFBQVFBLFFBQVFGLFFBQ3pDdEIsVUFBVW9CLElBQUlJLEtBQUs7WUFBRVAsS0FBSyxJQUFNSSxJQUFJLENBQUNHLElBQUk7WUFBRU4sWUFBWSxDQUFFSyxDQUFBQSxPQUFPcEIsaUJBQWlCa0IsTUFBTUcsSUFBRyxLQUFNRCxLQUFLTCxVQUFVO1FBQUM7SUFDdEg7SUFDQSxPQUFPRTtBQUNUO0FBQ0EsSUFBSU0sZUFBZSxDQUFDQyxNQUFRUixZQUFZbkIsVUFBVSxDQUFDLEdBQUcsY0FBYztRQUFFWSxPQUFPO0lBQUssSUFBSWU7QUFFdEYsZUFBZTtBQUNmLElBQUlDLGNBQWMsQ0FBQztBQUNuQmQsU0FBU2MsYUFBYTtJQUNwQkMsU0FBUyxJQUFNQTtJQUNmQyxPQUFPLElBQU1BO0FBQ2Y7QUFDQUMsT0FBT0MsT0FBTyxHQUFHTixhQUFhRTtBQUM5QixJQUFJSyxlQUFlLENBQUM7QUFDcEIsSUFBSUMsZUFBZSxDQUFDO0FBQ3BCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJLEtBQUtBLElBQUs7SUFDNUIsSUFBSUMsY0FBY0QsRUFBRUUsUUFBUSxDQUFDLElBQUlDLFdBQVc7SUFDNUMsSUFBSUYsWUFBWUcsTUFBTSxLQUFLLEdBQUc7UUFDNUJILGNBQWMsQ0FBQyxDQUFDLEVBQUVBLFlBQVksQ0FBQztJQUNqQztJQUNBSCxZQUFZLENBQUNFLEVBQUUsR0FBR0M7SUFDbEJGLFlBQVksQ0FBQ0UsWUFBWSxHQUFHRDtBQUM5QjtBQUNBLFNBQVNOLFFBQVFXLE9BQU87SUFDdEIsSUFBSUEsUUFBUUQsTUFBTSxHQUFHLE1BQU0sR0FBRztRQUM1QixNQUFNLElBQUlFLE1BQU07SUFDbEI7SUFDQSxNQUFNQyxNQUFNLElBQUlDLFdBQVdILFFBQVFELE1BQU0sR0FBRztJQUM1QyxJQUFLLElBQUlKLElBQUksR0FBR0EsSUFBSUssUUFBUUQsTUFBTSxFQUFFSixLQUFLLEVBQUc7UUFDMUMsTUFBTUMsY0FBY0ksUUFBUUksS0FBSyxDQUFDVCxHQUFHQSxJQUFJLEdBQUdHLFdBQVc7UUFDdkQsSUFBSUYsZUFBZUYsY0FBYztZQUMvQlEsR0FBRyxDQUFDUCxJQUFJLEVBQUUsR0FBR0QsWUFBWSxDQUFDRSxZQUFZO1FBQ3hDLE9BQU87WUFDTCxNQUFNLElBQUlLLE1BQU0sQ0FBQyxvQ0FBb0MsRUFBRUwsWUFBWSxlQUFlLENBQUM7UUFDckY7SUFDRjtJQUNBLE9BQU9NO0FBQ1Q7QUFDQWhDLE9BQU9tQixTQUFTO0FBQ2hCLFNBQVNDLE1BQU1lLEtBQUs7SUFDbEIsSUFBSUgsTUFBTTtJQUNWLElBQUssSUFBSVAsSUFBSSxHQUFHQSxJQUFJVSxNQUFNQyxVQUFVLEVBQUVYLElBQUs7UUFDekNPLE9BQU9ULFlBQVksQ0FBQ1ksS0FBSyxDQUFDVixFQUFFLENBQUM7SUFDL0I7SUFDQSxPQUFPTztBQUNUO0FBQ0FoQyxPQUFPb0IsT0FBTztBQUNkLDZEQUE2RDtBQUU3RCxLQUFNQyxDQUFBQSxDQUdOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vZC1ibG9nLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1oZXgtZW5jb2RpbmcvZGlzdC1janMvaW5kZXguanM/OTkzZSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX25hbWUgPSAodGFyZ2V0LCB2YWx1ZSkgPT4gX19kZWZQcm9wKHRhcmdldCwgXCJuYW1lXCIsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBzcmNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc3JjX2V4cG9ydHMsIHtcbiAgZnJvbUhleDogKCkgPT4gZnJvbUhleCxcbiAgdG9IZXg6ICgpID0+IHRvSGV4XG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHNyY19leHBvcnRzKTtcbnZhciBTSE9SVF9UT19IRVggPSB7fTtcbnZhciBIRVhfVE9fU0hPUlQgPSB7fTtcbmZvciAobGV0IGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcbiAgbGV0IGVuY29kZWRCeXRlID0gaS50b1N0cmluZygxNikudG9Mb3dlckNhc2UoKTtcbiAgaWYgKGVuY29kZWRCeXRlLmxlbmd0aCA9PT0gMSkge1xuICAgIGVuY29kZWRCeXRlID0gYDAke2VuY29kZWRCeXRlfWA7XG4gIH1cbiAgU0hPUlRfVE9fSEVYW2ldID0gZW5jb2RlZEJ5dGU7XG4gIEhFWF9UT19TSE9SVFtlbmNvZGVkQnl0ZV0gPSBpO1xufVxuZnVuY3Rpb24gZnJvbUhleChlbmNvZGVkKSB7XG4gIGlmIChlbmNvZGVkLmxlbmd0aCAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJIZXggZW5jb2RlZCBzdHJpbmdzIG11c3QgaGF2ZSBhbiBldmVuIG51bWJlciBsZW5ndGhcIik7XG4gIH1cbiAgY29uc3Qgb3V0ID0gbmV3IFVpbnQ4QXJyYXkoZW5jb2RlZC5sZW5ndGggLyAyKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbmNvZGVkLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgY29uc3QgZW5jb2RlZEJ5dGUgPSBlbmNvZGVkLnNsaWNlKGksIGkgKyAyKS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChlbmNvZGVkQnl0ZSBpbiBIRVhfVE9fU0hPUlQpIHtcbiAgICAgIG91dFtpIC8gMl0gPSBIRVhfVE9fU0hPUlRbZW5jb2RlZEJ5dGVdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBkZWNvZGUgdW5yZWNvZ25pemVkIHNlcXVlbmNlICR7ZW5jb2RlZEJ5dGV9IGFzIGhleGFkZWNpbWFsYCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXQ7XG59XG5fX25hbWUoZnJvbUhleCwgXCJmcm9tSGV4XCIpO1xuZnVuY3Rpb24gdG9IZXgoYnl0ZXMpIHtcbiAgbGV0IG91dCA9IFwiXCI7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMuYnl0ZUxlbmd0aDsgaSsrKSB7XG4gICAgb3V0ICs9IFNIT1JUX1RPX0hFWFtieXRlc1tpXV07XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cbl9fbmFtZSh0b0hleCwgXCJ0b0hleFwiKTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcblxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGZyb21IZXgsXG4gIHRvSGV4XG59KTtcblxuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9faGFzT3duUHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX19uYW1lIiwidGFyZ2V0IiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJfX2V4cG9ydCIsImFsbCIsIm5hbWUiLCJnZXQiLCJlbnVtZXJhYmxlIiwiX19jb3B5UHJvcHMiLCJ0byIsImZyb20iLCJleGNlcHQiLCJkZXNjIiwia2V5IiwiY2FsbCIsIl9fdG9Db21tb25KUyIsIm1vZCIsInNyY19leHBvcnRzIiwiZnJvbUhleCIsInRvSGV4IiwibW9kdWxlIiwiZXhwb3J0cyIsIlNIT1JUX1RPX0hFWCIsIkhFWF9UT19TSE9SVCIsImkiLCJlbmNvZGVkQnl0ZSIsInRvU3RyaW5nIiwidG9Mb3dlckNhc2UiLCJsZW5ndGgiLCJlbmNvZGVkIiwiRXJyb3IiLCJvdXQiLCJVaW50OEFycmF5Iiwic2xpY2UiLCJieXRlcyIsImJ5dGVMZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-hex-encoding/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-middleware/dist-cjs/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@smithy/util-middleware/dist-cjs/index.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    getSmithyContext: ()=>getSmithyContext,\n    normalizeProvider: ()=>normalizeProvider\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/getSmithyContext.ts\nvar import_types = __webpack_require__(/*! @smithy/types */ \"(rsc)/./node_modules/@smithy/types/dist-cjs/index.js\");\nvar getSmithyContext = /* @__PURE__ */ __name((context)=>context[import_types.SMITHY_CONTEXT_KEY] || (context[import_types.SMITHY_CONTEXT_KEY] = {}), \"getSmithyContext\");\n// src/normalizeProvider.ts\nvar normalizeProvider = /* @__PURE__ */ __name((input)=>{\n    if (typeof input === \"function\") return input;\n    const promisified = Promise.resolve(input);\n    return ()=>promisified;\n}, \"normalizeProvider\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLW1pZGRsZXdhcmUvZGlzdC1janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFlBQVlDLE9BQU9DLGNBQWM7QUFDckMsSUFBSUMsbUJBQW1CRixPQUFPRyx3QkFBd0I7QUFDdEQsSUFBSUMsb0JBQW9CSixPQUFPSyxtQkFBbUI7QUFDbEQsSUFBSUMsZUFBZU4sT0FBT08sU0FBUyxDQUFDQyxjQUFjO0FBQ2xELElBQUlDLFNBQVMsQ0FBQ0MsUUFBUUMsUUFBVVosVUFBVVcsUUFBUSxRQUFRO1FBQUVDO1FBQU9DLGNBQWM7SUFBSztBQUN0RixJQUFJQyxXQUFXLENBQUNILFFBQVFJO0lBQ3RCLElBQUssSUFBSUMsUUFBUUQsSUFDZmYsVUFBVVcsUUFBUUssTUFBTTtRQUFFQyxLQUFLRixHQUFHLENBQUNDLEtBQUs7UUFBRUUsWUFBWTtJQUFLO0FBQy9EO0FBQ0EsSUFBSUMsY0FBYyxDQUFDQyxJQUFJQyxNQUFNQyxRQUFRQztJQUNuQyxJQUFJRixRQUFRLE9BQU9BLFNBQVMsWUFBWSxPQUFPQSxTQUFTLFlBQVk7UUFDbEUsS0FBSyxJQUFJRyxPQUFPbkIsa0JBQWtCZ0IsTUFDaEMsSUFBSSxDQUFDZCxhQUFha0IsSUFBSSxDQUFDTCxJQUFJSSxRQUFRQSxRQUFRRixRQUN6Q3RCLFVBQVVvQixJQUFJSSxLQUFLO1lBQUVQLEtBQUssSUFBTUksSUFBSSxDQUFDRyxJQUFJO1lBQUVOLFlBQVksQ0FBRUssQ0FBQUEsT0FBT3BCLGlCQUFpQmtCLE1BQU1HLElBQUcsS0FBTUQsS0FBS0wsVUFBVTtRQUFDO0lBQ3RIO0lBQ0EsT0FBT0U7QUFDVDtBQUNBLElBQUlNLGVBQWUsQ0FBQ0MsTUFBUVIsWUFBWW5CLFVBQVUsQ0FBQyxHQUFHLGNBQWM7UUFBRVksT0FBTztJQUFLLElBQUllO0FBRXRGLGVBQWU7QUFDZixJQUFJQyxjQUFjLENBQUM7QUFDbkJkLFNBQVNjLGFBQWE7SUFDcEJDLGtCQUFrQixJQUFNQTtJQUN4QkMsbUJBQW1CLElBQU1BO0FBQzNCO0FBQ0FDLE9BQU9DLE9BQU8sR0FBR04sYUFBYUU7QUFFOUIsMEJBQTBCO0FBQzFCLElBQUlLLGVBQWVDLG1CQUFPQSxDQUFDLDJFQUFlO0FBQzFDLElBQUlMLG1CQUFtQixhQUFhLEdBQUduQixPQUFPLENBQUN5QixVQUFZQSxPQUFPLENBQUNGLGFBQWFHLGtCQUFrQixDQUFDLElBQUtELENBQUFBLE9BQU8sQ0FBQ0YsYUFBYUcsa0JBQWtCLENBQUMsR0FBRyxDQUFDLElBQUk7QUFFeEosMkJBQTJCO0FBQzNCLElBQUlOLG9CQUFvQixhQUFhLEdBQUdwQixPQUFPLENBQUMyQjtJQUM5QyxJQUFJLE9BQU9BLFVBQVUsWUFDbkIsT0FBT0E7SUFDVCxNQUFNQyxjQUFjQyxRQUFRQyxPQUFPLENBQUNIO0lBQ3BDLE9BQU8sSUFBTUM7QUFDZixHQUFHO0FBQ0gsNkRBQTZEO0FBRTdELEtBQU1QLENBQUFBLENBR04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb29kLWJsb2cvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLW1pZGRsZXdhcmUvZGlzdC1janMvaW5kZXguanM/YjM3NiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX25hbWUgPSAodGFyZ2V0LCB2YWx1ZSkgPT4gX19kZWZQcm9wKHRhcmdldCwgXCJuYW1lXCIsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBzcmNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc3JjX2V4cG9ydHMsIHtcbiAgZ2V0U21pdGh5Q29udGV4dDogKCkgPT4gZ2V0U21pdGh5Q29udGV4dCxcbiAgbm9ybWFsaXplUHJvdmlkZXI6ICgpID0+IG5vcm1hbGl6ZVByb3ZpZGVyXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHNyY19leHBvcnRzKTtcblxuLy8gc3JjL2dldFNtaXRoeUNvbnRleHQudHNcbnZhciBpbXBvcnRfdHlwZXMgPSByZXF1aXJlKFwiQHNtaXRoeS90eXBlc1wiKTtcbnZhciBnZXRTbWl0aHlDb250ZXh0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoY29udGV4dCkgPT4gY29udGV4dFtpbXBvcnRfdHlwZXMuU01JVEhZX0NPTlRFWFRfS0VZXSB8fCAoY29udGV4dFtpbXBvcnRfdHlwZXMuU01JVEhZX0NPTlRFWFRfS0VZXSA9IHt9KSwgXCJnZXRTbWl0aHlDb250ZXh0XCIpO1xuXG4vLyBzcmMvbm9ybWFsaXplUHJvdmlkZXIudHNcbnZhciBub3JtYWxpemVQcm92aWRlciA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0KSA9PiB7XG4gIGlmICh0eXBlb2YgaW5wdXQgPT09IFwiZnVuY3Rpb25cIilcbiAgICByZXR1cm4gaW5wdXQ7XG4gIGNvbnN0IHByb21pc2lmaWVkID0gUHJvbWlzZS5yZXNvbHZlKGlucHV0KTtcbiAgcmV0dXJuICgpID0+IHByb21pc2lmaWVkO1xufSwgXCJub3JtYWxpemVQcm92aWRlclwiKTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcblxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldFNtaXRoeUNvbnRleHQsXG4gIG5vcm1hbGl6ZVByb3ZpZGVyXG59KTtcblxuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9faGFzT3duUHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX19uYW1lIiwidGFyZ2V0IiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJfX2V4cG9ydCIsImFsbCIsIm5hbWUiLCJnZXQiLCJlbnVtZXJhYmxlIiwiX19jb3B5UHJvcHMiLCJ0byIsImZyb20iLCJleGNlcHQiLCJkZXNjIiwia2V5IiwiY2FsbCIsIl9fdG9Db21tb25KUyIsIm1vZCIsInNyY19leHBvcnRzIiwiZ2V0U21pdGh5Q29udGV4dCIsIm5vcm1hbGl6ZVByb3ZpZGVyIiwibW9kdWxlIiwiZXhwb3J0cyIsImltcG9ydF90eXBlcyIsInJlcXVpcmUiLCJjb250ZXh0IiwiU01JVEhZX0NPTlRFWFRfS0VZIiwiaW5wdXQiLCJwcm9taXNpZmllZCIsIlByb21pc2UiLCJyZXNvbHZlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-middleware/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-stream/dist-cjs/getAwsChunkedEncodingStream.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@smithy/util-stream/dist-cjs/getAwsChunkedEncodingStream.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getAwsChunkedEncodingStream = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst getAwsChunkedEncodingStream = (readableStream, options)=>{\n    const { base64Encoder, bodyLengthChecker, checksumAlgorithmFn, checksumLocationName, streamHasher } = options;\n    const checksumRequired = base64Encoder !== undefined && checksumAlgorithmFn !== undefined && checksumLocationName !== undefined && streamHasher !== undefined;\n    const digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : undefined;\n    const awsChunkedEncodingStream = new stream_1.Readable({\n        read: ()=>{}\n    });\n    readableStream.on(\"data\", (data)=>{\n        const length = bodyLengthChecker(data) || 0;\n        awsChunkedEncodingStream.push(`${length.toString(16)}\\r\\n`);\n        awsChunkedEncodingStream.push(data);\n        awsChunkedEncodingStream.push(\"\\r\\n\");\n    });\n    readableStream.on(\"end\", async ()=>{\n        awsChunkedEncodingStream.push(`0\\r\\n`);\n        if (checksumRequired) {\n            const checksum = base64Encoder(await digest);\n            awsChunkedEncodingStream.push(`${checksumLocationName}:${checksum}\\r\\n`);\n            awsChunkedEncodingStream.push(`\\r\\n`);\n        }\n        awsChunkedEncodingStream.push(null);\n    });\n    return awsChunkedEncodingStream;\n};\nexports.getAwsChunkedEncodingStream = getAwsChunkedEncodingStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXN0cmVhbS9kaXN0LWNqcy9nZXRBd3NDaHVua2VkRW5jb2RpbmdTdHJlYW0uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG1DQUFtQyxHQUFHLEtBQUs7QUFDM0MsTUFBTUcsV0FBV0MsbUJBQU9BLENBQUMsc0JBQVE7QUFDakMsTUFBTUYsOEJBQThCLENBQUNHLGdCQUFnQkM7SUFDakQsTUFBTSxFQUFFQyxhQUFhLEVBQUVDLGlCQUFpQixFQUFFQyxtQkFBbUIsRUFBRUMsb0JBQW9CLEVBQUVDLFlBQVksRUFBRSxHQUFHTDtJQUN0RyxNQUFNTSxtQkFBbUJMLGtCQUFrQk0sYUFDdkNKLHdCQUF3QkksYUFDeEJILHlCQUF5QkcsYUFDekJGLGlCQUFpQkU7SUFDckIsTUFBTUMsU0FBU0YsbUJBQW1CRCxhQUFhRixxQkFBcUJKLGtCQUFrQlE7SUFDdEYsTUFBTUUsMkJBQTJCLElBQUlaLFNBQVNhLFFBQVEsQ0FBQztRQUFFQyxNQUFNLEtBQVE7SUFBRTtJQUN6RVosZUFBZWEsRUFBRSxDQUFDLFFBQVEsQ0FBQ0M7UUFDdkIsTUFBTUMsU0FBU1osa0JBQWtCVyxTQUFTO1FBQzFDSix5QkFBeUJNLElBQUksQ0FBQyxDQUFDLEVBQUVELE9BQU9FLFFBQVEsQ0FBQyxJQUFJLElBQUksQ0FBQztRQUMxRFAseUJBQXlCTSxJQUFJLENBQUNGO1FBQzlCSix5QkFBeUJNLElBQUksQ0FBQztJQUNsQztJQUNBaEIsZUFBZWEsRUFBRSxDQUFDLE9BQU87UUFDckJILHlCQUF5Qk0sSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ3JDLElBQUlULGtCQUFrQjtZQUNsQixNQUFNVyxXQUFXaEIsY0FBYyxNQUFNTztZQUNyQ0MseUJBQXlCTSxJQUFJLENBQUMsQ0FBQyxFQUFFWCxxQkFBcUIsQ0FBQyxFQUFFYSxTQUFTLElBQUksQ0FBQztZQUN2RVIseUJBQXlCTSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDeEM7UUFDQU4seUJBQXlCTSxJQUFJLENBQUM7SUFDbEM7SUFDQSxPQUFPTjtBQUNYO0FBQ0FmLG1DQUFtQyxHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2QtYmxvZy8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtc3RyZWFtL2Rpc3QtY2pzL2dldEF3c0NodW5rZWRFbmNvZGluZ1N0cmVhbS5qcz9hZTdhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRBd3NDaHVua2VkRW5jb2RpbmdTdHJlYW0gPSB2b2lkIDA7XG5jb25zdCBzdHJlYW1fMSA9IHJlcXVpcmUoXCJzdHJlYW1cIik7XG5jb25zdCBnZXRBd3NDaHVua2VkRW5jb2RpbmdTdHJlYW0gPSAocmVhZGFibGVTdHJlYW0sIG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCB7IGJhc2U2NEVuY29kZXIsIGJvZHlMZW5ndGhDaGVja2VyLCBjaGVja3N1bUFsZ29yaXRobUZuLCBjaGVja3N1bUxvY2F0aW9uTmFtZSwgc3RyZWFtSGFzaGVyIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGNoZWNrc3VtUmVxdWlyZWQgPSBiYXNlNjRFbmNvZGVyICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgY2hlY2tzdW1BbGdvcml0aG1GbiAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgIGNoZWNrc3VtTG9jYXRpb25OYW1lICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgc3RyZWFtSGFzaGVyICE9PSB1bmRlZmluZWQ7XG4gICAgY29uc3QgZGlnZXN0ID0gY2hlY2tzdW1SZXF1aXJlZCA/IHN0cmVhbUhhc2hlcihjaGVja3N1bUFsZ29yaXRobUZuLCByZWFkYWJsZVN0cmVhbSkgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgYXdzQ2h1bmtlZEVuY29kaW5nU3RyZWFtID0gbmV3IHN0cmVhbV8xLlJlYWRhYmxlKHsgcmVhZDogKCkgPT4geyB9IH0pO1xuICAgIHJlYWRhYmxlU3RyZWFtLm9uKFwiZGF0YVwiLCAoZGF0YSkgPT4ge1xuICAgICAgICBjb25zdCBsZW5ndGggPSBib2R5TGVuZ3RoQ2hlY2tlcihkYXRhKSB8fCAwO1xuICAgICAgICBhd3NDaHVua2VkRW5jb2RpbmdTdHJlYW0ucHVzaChgJHtsZW5ndGgudG9TdHJpbmcoMTYpfVxcclxcbmApO1xuICAgICAgICBhd3NDaHVua2VkRW5jb2RpbmdTdHJlYW0ucHVzaChkYXRhKTtcbiAgICAgICAgYXdzQ2h1bmtlZEVuY29kaW5nU3RyZWFtLnB1c2goXCJcXHJcXG5cIik7XG4gICAgfSk7XG4gICAgcmVhZGFibGVTdHJlYW0ub24oXCJlbmRcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd3NDaHVua2VkRW5jb2RpbmdTdHJlYW0ucHVzaChgMFxcclxcbmApO1xuICAgICAgICBpZiAoY2hlY2tzdW1SZXF1aXJlZCkge1xuICAgICAgICAgICAgY29uc3QgY2hlY2tzdW0gPSBiYXNlNjRFbmNvZGVyKGF3YWl0IGRpZ2VzdCk7XG4gICAgICAgICAgICBhd3NDaHVua2VkRW5jb2RpbmdTdHJlYW0ucHVzaChgJHtjaGVja3N1bUxvY2F0aW9uTmFtZX06JHtjaGVja3N1bX1cXHJcXG5gKTtcbiAgICAgICAgICAgIGF3c0NodW5rZWRFbmNvZGluZ1N0cmVhbS5wdXNoKGBcXHJcXG5gKTtcbiAgICAgICAgfVxuICAgICAgICBhd3NDaHVua2VkRW5jb2RpbmdTdHJlYW0ucHVzaChudWxsKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYXdzQ2h1bmtlZEVuY29kaW5nU3RyZWFtO1xufTtcbmV4cG9ydHMuZ2V0QXdzQ2h1bmtlZEVuY29kaW5nU3RyZWFtID0gZ2V0QXdzQ2h1bmtlZEVuY29kaW5nU3RyZWFtO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0QXdzQ2h1bmtlZEVuY29kaW5nU3RyZWFtIiwic3RyZWFtXzEiLCJyZXF1aXJlIiwicmVhZGFibGVTdHJlYW0iLCJvcHRpb25zIiwiYmFzZTY0RW5jb2RlciIsImJvZHlMZW5ndGhDaGVja2VyIiwiY2hlY2tzdW1BbGdvcml0aG1GbiIsImNoZWNrc3VtTG9jYXRpb25OYW1lIiwic3RyZWFtSGFzaGVyIiwiY2hlY2tzdW1SZXF1aXJlZCIsInVuZGVmaW5lZCIsImRpZ2VzdCIsImF3c0NodW5rZWRFbmNvZGluZ1N0cmVhbSIsIlJlYWRhYmxlIiwicmVhZCIsIm9uIiwiZGF0YSIsImxlbmd0aCIsInB1c2giLCJ0b1N0cmluZyIsImNoZWNrc3VtIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-stream/dist-cjs/getAwsChunkedEncodingStream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-stream/dist-cjs/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@smithy/util-stream/dist-cjs/index.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __reExport = (target, mod, secondTarget)=>(__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    Uint8ArrayBlobAdapter: ()=>Uint8ArrayBlobAdapter\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/blob/transforms.ts\nvar import_util_base64 = __webpack_require__(/*! @smithy/util-base64 */ \"(rsc)/./node_modules/@smithy/util-base64/dist-cjs/index.js\");\nvar import_util_utf8 = __webpack_require__(/*! @smithy/util-utf8 */ \"(rsc)/./node_modules/@smithy/util-utf8/dist-cjs/index.js\");\nfunction transformToString(payload, encoding = \"utf-8\") {\n    if (encoding === \"base64\") {\n        return (0, import_util_base64.toBase64)(payload);\n    }\n    return (0, import_util_utf8.toUtf8)(payload);\n}\n__name(transformToString, \"transformToString\");\nfunction transformFromString(str, encoding) {\n    if (encoding === \"base64\") {\n        return Uint8ArrayBlobAdapter.mutate((0, import_util_base64.fromBase64)(str));\n    }\n    return Uint8ArrayBlobAdapter.mutate((0, import_util_utf8.fromUtf8)(str));\n}\n__name(transformFromString, \"transformFromString\");\n// src/blob/Uint8ArrayBlobAdapter.ts\nvar _Uint8ArrayBlobAdapter = class _Uint8ArrayBlobAdapter extends Uint8Array {\n    /**\n   * @param source - such as a string or Stream.\n   * @returns a new Uint8ArrayBlobAdapter extending Uint8Array.\n   */ static fromString(source, encoding = \"utf-8\") {\n        switch(typeof source){\n            case \"string\":\n                return transformFromString(source, encoding);\n            default:\n                throw new Error(`Unsupported conversion from ${typeof source} to Uint8ArrayBlobAdapter.`);\n        }\n    }\n    /**\n   * @param source - Uint8Array to be mutated.\n   * @returns the same Uint8Array but with prototype switched to Uint8ArrayBlobAdapter.\n   */ static mutate(source) {\n        Object.setPrototypeOf(source, _Uint8ArrayBlobAdapter.prototype);\n        return source;\n    }\n    /**\n   * @param encoding - default 'utf-8'.\n   * @returns the blob as string.\n   */ transformToString(encoding = \"utf-8\") {\n        return transformToString(this, encoding);\n    }\n};\n__name(_Uint8ArrayBlobAdapter, \"Uint8ArrayBlobAdapter\");\nvar Uint8ArrayBlobAdapter = _Uint8ArrayBlobAdapter;\n// src/index.ts\n__reExport(src_exports, __webpack_require__(/*! ././getAwsChunkedEncodingStream */ \"(rsc)/./node_modules/@smithy/util-stream/dist-cjs/getAwsChunkedEncodingStream.js\"), module.exports);\n__reExport(src_exports, __webpack_require__(/*! ././sdk-stream-mixin */ \"(rsc)/./node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.js\"), module.exports);\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-stream/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.sdkStreamMixin = void 0;\nconst node_http_handler_1 = __webpack_require__(/*! @smithy/node-http-handler */ \"(rsc)/./node_modules/@smithy/node-http-handler/dist-cjs/index.js\");\nconst util_buffer_from_1 = __webpack_require__(/*! @smithy/util-buffer-from */ \"(rsc)/./node_modules/@smithy/util-buffer-from/dist-cjs/index.js\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = \"The stream has already been transformed.\";\nconst sdkStreamMixin = (stream)=>{\n    var _a, _b;\n    if (!(stream instanceof stream_1.Readable)) {\n        const name = ((_b = (_a = stream === null || stream === void 0 ? void 0 : stream.__proto__) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) || stream;\n        throw new Error(`Unexpected stream implementation, expect Stream.Readable instance, got ${name}`);\n    }\n    let transformed = false;\n    const transformToByteArray = async ()=>{\n        if (transformed) {\n            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);\n        }\n        transformed = true;\n        return await (0, node_http_handler_1.streamCollector)(stream);\n    };\n    return Object.assign(stream, {\n        transformToByteArray,\n        transformToString: async (encoding)=>{\n            const buf = await transformToByteArray();\n            if (encoding === undefined || Buffer.isEncoding(encoding)) {\n                return (0, util_buffer_from_1.fromArrayBuffer)(buf.buffer, buf.byteOffset, buf.byteLength).toString(encoding);\n            } else {\n                const decoder = new util_1.TextDecoder(encoding);\n                return decoder.decode(buf);\n            }\n        },\n        transformToWebStream: ()=>{\n            if (transformed) {\n                throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);\n            }\n            if (stream.readableFlowing !== null) {\n                throw new Error(\"The stream has been consumed by other callbacks.\");\n            }\n            if (typeof stream_1.Readable.toWeb !== \"function\") {\n                throw new Error(\"Readable.toWeb() is not supported. Please make sure you are using Node.js >= 17.0.0, or polyfill is available.\");\n            }\n            transformed = true;\n            return stream_1.Readable.toWeb(stream);\n        }\n    });\n};\nexports.sdkStreamMixin = sdkStreamMixin;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXN0cmVhbS9kaXN0LWNqcy9zZGstc3RyZWFtLW1peGluLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxzQkFBc0IsR0FBRyxLQUFLO0FBQzlCLE1BQU1HLHNCQUFzQkMsbUJBQU9BLENBQUMsbUdBQTJCO0FBQy9ELE1BQU1DLHFCQUFxQkQsbUJBQU9BLENBQUMsaUdBQTBCO0FBQzdELE1BQU1FLFdBQVdGLG1CQUFPQSxDQUFDLHNCQUFRO0FBQ2pDLE1BQU1HLFNBQVNILG1CQUFPQSxDQUFDLGtCQUFNO0FBQzdCLE1BQU1JLHNDQUFzQztBQUM1QyxNQUFNTixpQkFBaUIsQ0FBQ087SUFDcEIsSUFBSUMsSUFBSUM7SUFDUixJQUFJLENBQUVGLENBQUFBLGtCQUFrQkgsU0FBU00sUUFBUSxHQUFHO1FBQ3hDLE1BQU1DLE9BQU8sQ0FBQyxDQUFDRixLQUFLLENBQUNELEtBQUtELFdBQVcsUUFBUUEsV0FBVyxLQUFLLElBQUksS0FBSyxJQUFJQSxPQUFPSyxTQUFTLE1BQU0sUUFBUUosT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHSyxXQUFXLE1BQU0sUUFBUUosT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHRSxJQUFJLEtBQUtKO1FBQ2xNLE1BQU0sSUFBSU8sTUFBTSxDQUFDLHVFQUF1RSxFQUFFSCxLQUFLLENBQUM7SUFDcEc7SUFDQSxJQUFJSSxjQUFjO0lBQ2xCLE1BQU1DLHVCQUF1QjtRQUN6QixJQUFJRCxhQUFhO1lBQ2IsTUFBTSxJQUFJRCxNQUFNUjtRQUNwQjtRQUNBUyxjQUFjO1FBQ2QsT0FBTyxNQUFNLENBQUMsR0FBR2Qsb0JBQW9CZ0IsZUFBZSxFQUFFVjtJQUMxRDtJQUNBLE9BQU9YLE9BQU9zQixNQUFNLENBQUNYLFFBQVE7UUFDekJTO1FBQ0FHLG1CQUFtQixPQUFPQztZQUN0QixNQUFNQyxNQUFNLE1BQU1MO1lBQ2xCLElBQUlJLGFBQWFFLGFBQWFDLE9BQU9DLFVBQVUsQ0FBQ0osV0FBVztnQkFDdkQsT0FBTyxDQUFDLEdBQUdqQixtQkFBbUJzQixlQUFlLEVBQUVKLElBQUlLLE1BQU0sRUFBRUwsSUFBSU0sVUFBVSxFQUFFTixJQUFJTyxVQUFVLEVBQUVDLFFBQVEsQ0FBQ1Q7WUFDeEcsT0FDSztnQkFDRCxNQUFNVSxVQUFVLElBQUl6QixPQUFPMEIsV0FBVyxDQUFDWDtnQkFDdkMsT0FBT1UsUUFBUUUsTUFBTSxDQUFDWDtZQUMxQjtRQUNKO1FBQ0FZLHNCQUFzQjtZQUNsQixJQUFJbEIsYUFBYTtnQkFDYixNQUFNLElBQUlELE1BQU1SO1lBQ3BCO1lBQ0EsSUFBSUMsT0FBTzJCLGVBQWUsS0FBSyxNQUFNO2dCQUNqQyxNQUFNLElBQUlwQixNQUFNO1lBQ3BCO1lBQ0EsSUFBSSxPQUFPVixTQUFTTSxRQUFRLENBQUN5QixLQUFLLEtBQUssWUFBWTtnQkFDL0MsTUFBTSxJQUFJckIsTUFBTTtZQUNwQjtZQUNBQyxjQUFjO1lBQ2QsT0FBT1gsU0FBU00sUUFBUSxDQUFDeUIsS0FBSyxDQUFDNUI7UUFDbkM7SUFDSjtBQUNKO0FBQ0FULHNCQUFzQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2QtYmxvZy8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtc3RyZWFtL2Rpc3QtY2pzL3Nkay1zdHJlYW0tbWl4aW4uanM/NGIxYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2RrU3RyZWFtTWl4aW4gPSB2b2lkIDA7XG5jb25zdCBub2RlX2h0dHBfaGFuZGxlcl8xID0gcmVxdWlyZShcIkBzbWl0aHkvbm9kZS1odHRwLWhhbmRsZXJcIik7XG5jb25zdCB1dGlsX2J1ZmZlcl9mcm9tXzEgPSByZXF1aXJlKFwiQHNtaXRoeS91dGlsLWJ1ZmZlci1mcm9tXCIpO1xuY29uc3Qgc3RyZWFtXzEgPSByZXF1aXJlKFwic3RyZWFtXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcInV0aWxcIik7XG5jb25zdCBFUlJfTVNHX1NUUkVBTV9IQVNfQkVFTl9UUkFOU0ZPUk1FRCA9IFwiVGhlIHN0cmVhbSBoYXMgYWxyZWFkeSBiZWVuIHRyYW5zZm9ybWVkLlwiO1xuY29uc3Qgc2RrU3RyZWFtTWl4aW4gPSAoc3RyZWFtKSA9PiB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBpZiAoIShzdHJlYW0gaW5zdGFuY2VvZiBzdHJlYW1fMS5SZWFkYWJsZSkpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9ICgoX2IgPSAoX2EgPSBzdHJlYW0gPT09IG51bGwgfHwgc3RyZWFtID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzdHJlYW0uX19wcm90b19fKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29uc3RydWN0b3IpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5uYW1lKSB8fCBzdHJlYW07XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBzdHJlYW0gaW1wbGVtZW50YXRpb24sIGV4cGVjdCBTdHJlYW0uUmVhZGFibGUgaW5zdGFuY2UsIGdvdCAke25hbWV9YCk7XG4gICAgfVxuICAgIGxldCB0cmFuc2Zvcm1lZCA9IGZhbHNlO1xuICAgIGNvbnN0IHRyYW5zZm9ybVRvQnl0ZUFycmF5ID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZiAodHJhbnNmb3JtZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJfTVNHX1NUUkVBTV9IQVNfQkVFTl9UUkFOU0ZPUk1FRCk7XG4gICAgICAgIH1cbiAgICAgICAgdHJhbnNmb3JtZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gYXdhaXQgKDAsIG5vZGVfaHR0cF9oYW5kbGVyXzEuc3RyZWFtQ29sbGVjdG9yKShzdHJlYW0pO1xuICAgIH07XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oc3RyZWFtLCB7XG4gICAgICAgIHRyYW5zZm9ybVRvQnl0ZUFycmF5LFxuICAgICAgICB0cmFuc2Zvcm1Ub1N0cmluZzogYXN5bmMgKGVuY29kaW5nKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBidWYgPSBhd2FpdCB0cmFuc2Zvcm1Ub0J5dGVBcnJheSgpO1xuICAgICAgICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQgfHwgQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgwLCB1dGlsX2J1ZmZlcl9mcm9tXzEuZnJvbUFycmF5QnVmZmVyKShidWYuYnVmZmVyLCBidWYuYnl0ZU9mZnNldCwgYnVmLmJ5dGVMZW5ndGgpLnRvU3RyaW5nKGVuY29kaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlY29kZXIgPSBuZXcgdXRpbF8xLlRleHREZWNvZGVyKGVuY29kaW5nKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVjb2Rlci5kZWNvZGUoYnVmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdHJhbnNmb3JtVG9XZWJTdHJlYW06ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0cmFuc2Zvcm1lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJfTVNHX1NUUkVBTV9IQVNfQkVFTl9UUkFOU0ZPUk1FRCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RyZWFtLnJlYWRhYmxlRmxvd2luZyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHJlYW0gaGFzIGJlZW4gY29uc3VtZWQgYnkgb3RoZXIgY2FsbGJhY2tzLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RyZWFtXzEuUmVhZGFibGUudG9XZWIgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlYWRhYmxlLnRvV2ViKCkgaXMgbm90IHN1cHBvcnRlZC4gUGxlYXNlIG1ha2Ugc3VyZSB5b3UgYXJlIHVzaW5nIE5vZGUuanMgPj0gMTcuMC4wLCBvciBwb2x5ZmlsbCBpcyBhdmFpbGFibGUuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJhbnNmb3JtZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIHN0cmVhbV8xLlJlYWRhYmxlLnRvV2ViKHN0cmVhbSk7XG4gICAgICAgIH0sXG4gICAgfSk7XG59O1xuZXhwb3J0cy5zZGtTdHJlYW1NaXhpbiA9IHNka1N0cmVhbU1peGluO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwic2RrU3RyZWFtTWl4aW4iLCJub2RlX2h0dHBfaGFuZGxlcl8xIiwicmVxdWlyZSIsInV0aWxfYnVmZmVyX2Zyb21fMSIsInN0cmVhbV8xIiwidXRpbF8xIiwiRVJSX01TR19TVFJFQU1fSEFTX0JFRU5fVFJBTlNGT1JNRUQiLCJzdHJlYW0iLCJfYSIsIl9iIiwiUmVhZGFibGUiLCJuYW1lIiwiX19wcm90b19fIiwiY29uc3RydWN0b3IiLCJFcnJvciIsInRyYW5zZm9ybWVkIiwidHJhbnNmb3JtVG9CeXRlQXJyYXkiLCJzdHJlYW1Db2xsZWN0b3IiLCJhc3NpZ24iLCJ0cmFuc2Zvcm1Ub1N0cmluZyIsImVuY29kaW5nIiwiYnVmIiwidW5kZWZpbmVkIiwiQnVmZmVyIiwiaXNFbmNvZGluZyIsImZyb21BcnJheUJ1ZmZlciIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwidG9TdHJpbmciLCJkZWNvZGVyIiwiVGV4dERlY29kZXIiLCJkZWNvZGUiLCJ0cmFuc2Zvcm1Ub1dlYlN0cmVhbSIsInJlYWRhYmxlRmxvd2luZyIsInRvV2ViIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-uri-escape/dist-cjs/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@smithy/util-uri-escape/dist-cjs/index.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    escapeUri: ()=>escapeUri,\n    escapeUriPath: ()=>escapeUriPath\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/escape-uri.ts\nvar escapeUri = /* @__PURE__ */ __name((uri)=>// AWS percent-encodes some extra non-standard characters in a URI\n    encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode), \"escapeUri\");\nvar hexEncode = /* @__PURE__ */ __name((c)=>`%${c.charCodeAt(0).toString(16).toUpperCase()}`, \"hexEncode\");\n// src/escape-uri-path.ts\nvar escapeUriPath = /* @__PURE__ */ __name((uri)=>uri.split(\"/\").map(escapeUri).join(\"/\"), \"escapeUriPath\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXVyaS1lc2NhcGUvZGlzdC1janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFlBQVlDLE9BQU9DLGNBQWM7QUFDckMsSUFBSUMsbUJBQW1CRixPQUFPRyx3QkFBd0I7QUFDdEQsSUFBSUMsb0JBQW9CSixPQUFPSyxtQkFBbUI7QUFDbEQsSUFBSUMsZUFBZU4sT0FBT08sU0FBUyxDQUFDQyxjQUFjO0FBQ2xELElBQUlDLFNBQVMsQ0FBQ0MsUUFBUUMsUUFBVVosVUFBVVcsUUFBUSxRQUFRO1FBQUVDO1FBQU9DLGNBQWM7SUFBSztBQUN0RixJQUFJQyxXQUFXLENBQUNILFFBQVFJO0lBQ3RCLElBQUssSUFBSUMsUUFBUUQsSUFDZmYsVUFBVVcsUUFBUUssTUFBTTtRQUFFQyxLQUFLRixHQUFHLENBQUNDLEtBQUs7UUFBRUUsWUFBWTtJQUFLO0FBQy9EO0FBQ0EsSUFBSUMsY0FBYyxDQUFDQyxJQUFJQyxNQUFNQyxRQUFRQztJQUNuQyxJQUFJRixRQUFRLE9BQU9BLFNBQVMsWUFBWSxPQUFPQSxTQUFTLFlBQVk7UUFDbEUsS0FBSyxJQUFJRyxPQUFPbkIsa0JBQWtCZ0IsTUFDaEMsSUFBSSxDQUFDZCxhQUFha0IsSUFBSSxDQUFDTCxJQUFJSSxRQUFRQSxRQUFRRixRQUN6Q3RCLFVBQVVvQixJQUFJSSxLQUFLO1lBQUVQLEtBQUssSUFBTUksSUFBSSxDQUFDRyxJQUFJO1lBQUVOLFlBQVksQ0FBRUssQ0FBQUEsT0FBT3BCLGlCQUFpQmtCLE1BQU1HLElBQUcsS0FBTUQsS0FBS0wsVUFBVTtRQUFDO0lBQ3RIO0lBQ0EsT0FBT0U7QUFDVDtBQUNBLElBQUlNLGVBQWUsQ0FBQ0MsTUFBUVIsWUFBWW5CLFVBQVUsQ0FBQyxHQUFHLGNBQWM7UUFBRVksT0FBTztJQUFLLElBQUllO0FBRXRGLGVBQWU7QUFDZixJQUFJQyxjQUFjLENBQUM7QUFDbkJkLFNBQVNjLGFBQWE7SUFDcEJDLFdBQVcsSUFBTUE7SUFDakJDLGVBQWUsSUFBTUE7QUFDdkI7QUFDQUMsT0FBT0MsT0FBTyxHQUFHTixhQUFhRTtBQUU5QixvQkFBb0I7QUFDcEIsSUFBSUMsWUFBWSxhQUFhLEdBQUduQixPQUFPLENBQUN1QixNQUN0QyxrRUFBa0U7SUFDbEVDLG1CQUFtQkQsS0FBS0UsT0FBTyxDQUFDLFlBQVlDLFlBQzNDO0FBQ0gsSUFBSUEsWUFBWSxhQUFhLEdBQUcxQixPQUFPLENBQUMyQixJQUFNLENBQUMsQ0FBQyxFQUFFQSxFQUFFQyxVQUFVLENBQUMsR0FBR0MsUUFBUSxDQUFDLElBQUlDLFdBQVcsR0FBRyxDQUFDLEVBQUU7QUFFaEcseUJBQXlCO0FBQ3pCLElBQUlWLGdCQUFnQixhQUFhLEdBQUdwQixPQUFPLENBQUN1QixNQUFRQSxJQUFJUSxLQUFLLENBQUMsS0FBS0MsR0FBRyxDQUFDYixXQUFXYyxJQUFJLENBQUMsTUFBTTtBQUM3Riw2REFBNkQ7QUFFN0QsS0FBTVosQ0FBQUEsQ0FHTiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2QtYmxvZy8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtdXJpLWVzY2FwZS9kaXN0LWNqcy9pbmRleC5qcz9kNTZmIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fbmFtZSA9ICh0YXJnZXQsIHZhbHVlKSA9PiBfX2RlZlByb3AodGFyZ2V0LCBcIm5hbWVcIiwgeyB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIHNyY19leHBvcnRzID0ge307XG5fX2V4cG9ydChzcmNfZXhwb3J0cywge1xuICBlc2NhcGVVcmk6ICgpID0+IGVzY2FwZVVyaSxcbiAgZXNjYXBlVXJpUGF0aDogKCkgPT4gZXNjYXBlVXJpUGF0aFxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzcmNfZXhwb3J0cyk7XG5cbi8vIHNyYy9lc2NhcGUtdXJpLnRzXG52YXIgZXNjYXBlVXJpID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodXJpKSA9PiAoXG4gIC8vIEFXUyBwZXJjZW50LWVuY29kZXMgc29tZSBleHRyYSBub24tc3RhbmRhcmQgY2hhcmFjdGVycyBpbiBhIFVSSVxuICBlbmNvZGVVUklDb21wb25lbnQodXJpKS5yZXBsYWNlKC9bIScoKSpdL2csIGhleEVuY29kZSlcbiksIFwiZXNjYXBlVXJpXCIpO1xudmFyIGhleEVuY29kZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGMpID0+IGAlJHtjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCl9YCwgXCJoZXhFbmNvZGVcIik7XG5cbi8vIHNyYy9lc2NhcGUtdXJpLXBhdGgudHNcbnZhciBlc2NhcGVVcmlQYXRoID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodXJpKSA9PiB1cmkuc3BsaXQoXCIvXCIpLm1hcChlc2NhcGVVcmkpLmpvaW4oXCIvXCIpLCBcImVzY2FwZVVyaVBhdGhcIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBlc2NhcGVVcmksXG4gIGVzY2FwZVVyaVBhdGhcbn0pO1xuXG4iXSwibmFtZXMiOlsiX19kZWZQcm9wIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2dldE93blByb3BEZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19nZXRPd25Qcm9wTmFtZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiX19oYXNPd25Qcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJfX25hbWUiLCJ0YXJnZXQiLCJ2YWx1ZSIsImNvbmZpZ3VyYWJsZSIsIl9fZXhwb3J0IiwiYWxsIiwibmFtZSIsImdldCIsImVudW1lcmFibGUiLCJfX2NvcHlQcm9wcyIsInRvIiwiZnJvbSIsImV4Y2VwdCIsImRlc2MiLCJrZXkiLCJjYWxsIiwiX190b0NvbW1vbkpTIiwibW9kIiwic3JjX2V4cG9ydHMiLCJlc2NhcGVVcmkiLCJlc2NhcGVVcmlQYXRoIiwibW9kdWxlIiwiZXhwb3J0cyIsInVyaSIsImVuY29kZVVSSUNvbXBvbmVudCIsInJlcGxhY2UiLCJoZXhFbmNvZGUiLCJjIiwiY2hhckNvZGVBdCIsInRvU3RyaW5nIiwidG9VcHBlckNhc2UiLCJzcGxpdCIsIm1hcCIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-uri-escape/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@smithy/util-utf8/dist-cjs/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@smithy/util-utf8/dist-cjs/index.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    fromUtf8: ()=>fromUtf8,\n    toUint8Array: ()=>toUint8Array,\n    toUtf8: ()=>toUtf8\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/fromUtf8.ts\nvar import_util_buffer_from = __webpack_require__(/*! @smithy/util-buffer-from */ \"(rsc)/./node_modules/@smithy/util-buffer-from/dist-cjs/index.js\");\nvar fromUtf8 = /* @__PURE__ */ __name((input)=>{\n    const buf = (0, import_util_buffer_from.fromString)(input, \"utf8\");\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n}, \"fromUtf8\");\n// src/toUint8Array.ts\nvar toUint8Array = /* @__PURE__ */ __name((data)=>{\n    if (typeof data === \"string\") {\n        return fromUtf8(data);\n    }\n    if (ArrayBuffer.isView(data)) {\n        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n    }\n    return new Uint8Array(data);\n}, \"toUint8Array\");\n// src/toUtf8.ts\nvar toUtf8 = /* @__PURE__ */ __name((input)=>{\n    if (typeof input === \"string\") {\n        return input;\n    }\n    if (typeof input !== \"object\" || typeof input.byteOffset !== \"number\" || typeof input.byteLength !== \"number\") {\n        throw new Error(\"@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.\");\n    }\n    return (0, import_util_buffer_from.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString(\"utf8\");\n}, \"toUtf8\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXV0ZjgvZGlzdC1janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFlBQVlDLE9BQU9DLGNBQWM7QUFDckMsSUFBSUMsbUJBQW1CRixPQUFPRyx3QkFBd0I7QUFDdEQsSUFBSUMsb0JBQW9CSixPQUFPSyxtQkFBbUI7QUFDbEQsSUFBSUMsZUFBZU4sT0FBT08sU0FBUyxDQUFDQyxjQUFjO0FBQ2xELElBQUlDLFNBQVMsQ0FBQ0MsUUFBUUMsUUFBVVosVUFBVVcsUUFBUSxRQUFRO1FBQUVDO1FBQU9DLGNBQWM7SUFBSztBQUN0RixJQUFJQyxXQUFXLENBQUNILFFBQVFJO0lBQ3RCLElBQUssSUFBSUMsUUFBUUQsSUFDZmYsVUFBVVcsUUFBUUssTUFBTTtRQUFFQyxLQUFLRixHQUFHLENBQUNDLEtBQUs7UUFBRUUsWUFBWTtJQUFLO0FBQy9EO0FBQ0EsSUFBSUMsY0FBYyxDQUFDQyxJQUFJQyxNQUFNQyxRQUFRQztJQUNuQyxJQUFJRixRQUFRLE9BQU9BLFNBQVMsWUFBWSxPQUFPQSxTQUFTLFlBQVk7UUFDbEUsS0FBSyxJQUFJRyxPQUFPbkIsa0JBQWtCZ0IsTUFDaEMsSUFBSSxDQUFDZCxhQUFha0IsSUFBSSxDQUFDTCxJQUFJSSxRQUFRQSxRQUFRRixRQUN6Q3RCLFVBQVVvQixJQUFJSSxLQUFLO1lBQUVQLEtBQUssSUFBTUksSUFBSSxDQUFDRyxJQUFJO1lBQUVOLFlBQVksQ0FBRUssQ0FBQUEsT0FBT3BCLGlCQUFpQmtCLE1BQU1HLElBQUcsS0FBTUQsS0FBS0wsVUFBVTtRQUFDO0lBQ3RIO0lBQ0EsT0FBT0U7QUFDVDtBQUNBLElBQUlNLGVBQWUsQ0FBQ0MsTUFBUVIsWUFBWW5CLFVBQVUsQ0FBQyxHQUFHLGNBQWM7UUFBRVksT0FBTztJQUFLLElBQUllO0FBRXRGLGVBQWU7QUFDZixJQUFJQyxjQUFjLENBQUM7QUFDbkJkLFNBQVNjLGFBQWE7SUFDcEJDLFVBQVUsSUFBTUE7SUFDaEJDLGNBQWMsSUFBTUE7SUFDcEJDLFFBQVEsSUFBTUE7QUFDaEI7QUFDQUMsT0FBT0MsT0FBTyxHQUFHUCxhQUFhRTtBQUU5QixrQkFBa0I7QUFDbEIsSUFBSU0sMEJBQTBCQyxtQkFBT0EsQ0FBQyxpR0FBMEI7QUFDaEUsSUFBSU4sV0FBVyxhQUFhLEdBQUduQixPQUFPLENBQUMwQjtJQUNyQyxNQUFNQyxNQUFNLENBQUMsR0FBR0gsd0JBQXdCSSxVQUFVLEVBQUVGLE9BQU87SUFDM0QsT0FBTyxJQUFJRyxXQUFXRixJQUFJRyxNQUFNLEVBQUVILElBQUlJLFVBQVUsRUFBRUosSUFBSUssVUFBVSxHQUFHSCxXQUFXSSxpQkFBaUI7QUFDakcsR0FBRztBQUVILHNCQUFzQjtBQUN0QixJQUFJYixlQUFlLGFBQWEsR0FBR3BCLE9BQU8sQ0FBQ2tDO0lBQ3pDLElBQUksT0FBT0EsU0FBUyxVQUFVO1FBQzVCLE9BQU9mLFNBQVNlO0lBQ2xCO0lBQ0EsSUFBSUMsWUFBWUMsTUFBTSxDQUFDRixPQUFPO1FBQzVCLE9BQU8sSUFBSUwsV0FBV0ssS0FBS0osTUFBTSxFQUFFSSxLQUFLSCxVQUFVLEVBQUVHLEtBQUtGLFVBQVUsR0FBR0gsV0FBV0ksaUJBQWlCO0lBQ3BHO0lBQ0EsT0FBTyxJQUFJSixXQUFXSztBQUN4QixHQUFHO0FBRUgsZ0JBQWdCO0FBRWhCLElBQUliLFNBQVMsYUFBYSxHQUFHckIsT0FBTyxDQUFDMEI7SUFDbkMsSUFBSSxPQUFPQSxVQUFVLFVBQVU7UUFDN0IsT0FBT0E7SUFDVDtJQUNBLElBQUksT0FBT0EsVUFBVSxZQUFZLE9BQU9BLE1BQU1LLFVBQVUsS0FBSyxZQUFZLE9BQU9MLE1BQU1NLFVBQVUsS0FBSyxVQUFVO1FBQzdHLE1BQU0sSUFBSUssTUFBTTtJQUNsQjtJQUNBLE9BQU8sQ0FBQyxHQUFHYix3QkFBd0JjLGVBQWUsRUFBRVosTUFBTUksTUFBTSxFQUFFSixNQUFNSyxVQUFVLEVBQUVMLE1BQU1NLFVBQVUsRUFBRU8sUUFBUSxDQUFDO0FBQ2pILEdBQUc7QUFDSCw2REFBNkQ7QUFFN0QsS0FBTWpCLENBQUFBLENBSU4iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb29kLWJsb2cvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXV0ZjgvZGlzdC1janMvaW5kZXguanM/MWU0NiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX25hbWUgPSAodGFyZ2V0LCB2YWx1ZSkgPT4gX19kZWZQcm9wKHRhcmdldCwgXCJuYW1lXCIsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBzcmNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc3JjX2V4cG9ydHMsIHtcbiAgZnJvbVV0Zjg6ICgpID0+IGZyb21VdGY4LFxuICB0b1VpbnQ4QXJyYXk6ICgpID0+IHRvVWludDhBcnJheSxcbiAgdG9VdGY4OiAoKSA9PiB0b1V0Zjhcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xuXG4vLyBzcmMvZnJvbVV0ZjgudHNcbnZhciBpbXBvcnRfdXRpbF9idWZmZXJfZnJvbSA9IHJlcXVpcmUoXCJAc21pdGh5L3V0aWwtYnVmZmVyLWZyb21cIik7XG52YXIgZnJvbVV0ZjggPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbnB1dCkgPT4ge1xuICBjb25zdCBidWYgPSAoMCwgaW1wb3J0X3V0aWxfYnVmZmVyX2Zyb20uZnJvbVN0cmluZykoaW5wdXQsIFwidXRmOFwiKTtcbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGJ1Zi5idWZmZXIsIGJ1Zi5ieXRlT2Zmc2V0LCBidWYuYnl0ZUxlbmd0aCAvIFVpbnQ4QXJyYXkuQllURVNfUEVSX0VMRU1FTlQpO1xufSwgXCJmcm9tVXRmOFwiKTtcblxuLy8gc3JjL3RvVWludDhBcnJheS50c1xudmFyIHRvVWludDhBcnJheSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGRhdGEpID0+IHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGZyb21VdGY4KGRhdGEpO1xuICB9XG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoZGF0YSkpIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZGF0YS5idWZmZXIsIGRhdGEuYnl0ZU9mZnNldCwgZGF0YS5ieXRlTGVuZ3RoIC8gVWludDhBcnJheS5CWVRFU19QRVJfRUxFTUVOVCk7XG4gIH1cbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGRhdGEpO1xufSwgXCJ0b1VpbnQ4QXJyYXlcIik7XG5cbi8vIHNyYy90b1V0ZjgudHNcblxudmFyIHRvVXRmOCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0KSA9PiB7XG4gIGlmICh0eXBlb2YgaW5wdXQgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgaW5wdXQuYnl0ZU9mZnNldCAhPT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgaW5wdXQuYnl0ZUxlbmd0aCAhPT0gXCJudW1iZXJcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkBzbWl0aHkvdXRpbC11dGY4OiB0b1V0ZjggZW5jb2RlciBmdW5jdGlvbiBvbmx5IGFjY2VwdHMgc3RyaW5nIHwgVWludDhBcnJheS5cIik7XG4gIH1cbiAgcmV0dXJuICgwLCBpbXBvcnRfdXRpbF9idWZmZXJfZnJvbS5mcm9tQXJyYXlCdWZmZXIpKGlucHV0LmJ1ZmZlciwgaW5wdXQuYnl0ZU9mZnNldCwgaW5wdXQuYnl0ZUxlbmd0aCkudG9TdHJpbmcoXCJ1dGY4XCIpO1xufSwgXCJ0b1V0ZjhcIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBmcm9tVXRmOCxcbiAgdG9VaW50OEFycmF5LFxuICB0b1V0Zjhcbn0pO1xuXG4iXSwibmFtZXMiOlsiX19kZWZQcm9wIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2dldE93blByb3BEZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19nZXRPd25Qcm9wTmFtZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiX19oYXNPd25Qcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJfX25hbWUiLCJ0YXJnZXQiLCJ2YWx1ZSIsImNvbmZpZ3VyYWJsZSIsIl9fZXhwb3J0IiwiYWxsIiwibmFtZSIsImdldCIsImVudW1lcmFibGUiLCJfX2NvcHlQcm9wcyIsInRvIiwiZnJvbSIsImV4Y2VwdCIsImRlc2MiLCJrZXkiLCJjYWxsIiwiX190b0NvbW1vbkpTIiwibW9kIiwic3JjX2V4cG9ydHMiLCJmcm9tVXRmOCIsInRvVWludDhBcnJheSIsInRvVXRmOCIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbXBvcnRfdXRpbF9idWZmZXJfZnJvbSIsInJlcXVpcmUiLCJpbnB1dCIsImJ1ZiIsImZyb21TdHJpbmciLCJVaW50OEFycmF5IiwiYnVmZmVyIiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJCWVRFU19QRVJfRUxFTUVOVCIsImRhdGEiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsIkVycm9yIiwiZnJvbUFycmF5QnVmZmVyIiwidG9TdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@smithy/util-utf8/dist-cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/output/log.js":
/*!****************************************************!*\
  !*** ./node_modules/next/dist/build/output/log.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    prefixes: function() {\n        return prefixes;\n    },\n    wait: function() {\n        return wait;\n    },\n    error: function() {\n        return error;\n    },\n    warn: function() {\n        return warn;\n    },\n    ready: function() {\n        return ready;\n    },\n    info: function() {\n        return info;\n    },\n    event: function() {\n        return event;\n    },\n    trace: function() {\n        return trace;\n    },\n    warnOnce: function() {\n        return warnOnce;\n    }\n});\nconst _chalk = /*#__PURE__*/ _interop_require_default(__webpack_require__(/*! ../../lib/chalk */ \"(rsc)/./node_modules/next/dist/lib/chalk.js\"));\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst prefixes = {\n    wait: \"- \" + _chalk.default.cyan(\"wait\"),\n    error: \"- \" + _chalk.default.red(\"error\"),\n    warn: \"- \" + _chalk.default.yellow(\"warn\"),\n    ready: \"- \" + _chalk.default.green(\"ready\"),\n    info: \"- \" + _chalk.default.cyan(\"info\"),\n    event: \"- \" + _chalk.default.magenta(\"event\"),\n    trace: \"- \" + _chalk.default.magenta(\"trace\")\n};\nfunction wait(...message) {\n    console.log(prefixes.wait, ...message);\n}\nfunction error(...message) {\n    console.error(prefixes.error, ...message);\n}\nfunction warn(...message) {\n    console.warn(prefixes.warn, ...message);\n}\nfunction ready(...message) {\n    console.log(prefixes.ready, ...message);\n}\nfunction info(...message) {\n    console.log(prefixes.info, ...message);\n}\nfunction event(...message) {\n    console.log(prefixes.event, ...message);\n}\nfunction trace(...message) {\n    console.log(prefixes.trace, ...message);\n}\nconst warnOnceMessages = new Set();\nfunction warnOnce(...message) {\n    if (!warnOnceMessages.has(message[0])) {\n        warnOnceMessages.add(message.join(\" \"));\n        warn(...message);\n    }\n} //# sourceMappingURL=log.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL291dHB1dC9sb2cuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0YsS0FBTUMsQ0FBQUEsQ0FVTjtBQUNBLFNBQVNVLFFBQVFDLE1BQU0sRUFBRUMsR0FBRztJQUN4QixJQUFJLElBQUlDLFFBQVFELElBQUloQixPQUFPQyxjQUFjLENBQUNjLFFBQVFFLE1BQU07UUFDcERDLFlBQVk7UUFDWkMsS0FBS0gsR0FBRyxDQUFDQyxLQUFLO0lBQ2xCO0FBQ0o7QUFDQUgsUUFBUVosU0FBUztJQUNiRyxVQUFVO1FBQ04sT0FBT0E7SUFDWDtJQUNBQyxNQUFNO1FBQ0YsT0FBT0E7SUFDWDtJQUNBQyxPQUFPO1FBQ0gsT0FBT0E7SUFDWDtJQUNBQyxNQUFNO1FBQ0YsT0FBT0E7SUFDWDtJQUNBQyxPQUFPO1FBQ0gsT0FBT0E7SUFDWDtJQUNBQyxNQUFNO1FBQ0YsT0FBT0E7SUFDWDtJQUNBQyxPQUFPO1FBQ0gsT0FBT0E7SUFDWDtJQUNBQyxPQUFPO1FBQ0gsT0FBT0E7SUFDWDtJQUNBQyxVQUFVO1FBQ04sT0FBT0E7SUFDWDtBQUNKO0FBQ0EsTUFBTU8sU0FBUyxXQUFXLEdBQUdDLHlCQUF5QkMsbUJBQU9BLENBQUMsb0VBQWlCO0FBQy9FLFNBQVNELHlCQUF5QkUsR0FBRztJQUNqQyxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFDakNFLFNBQVNGO0lBQ2I7QUFDSjtBQUNBLE1BQU1sQixXQUFXO0lBQ2JDLE1BQU0sT0FBT2MsT0FBT0ssT0FBTyxDQUFDQyxJQUFJLENBQUM7SUFDakNuQixPQUFPLE9BQU9hLE9BQU9LLE9BQU8sQ0FBQ0UsR0FBRyxDQUFDO0lBQ2pDbkIsTUFBTSxPQUFPWSxPQUFPSyxPQUFPLENBQUNHLE1BQU0sQ0FBQztJQUNuQ25CLE9BQU8sT0FBT1csT0FBT0ssT0FBTyxDQUFDSSxLQUFLLENBQUM7SUFDbkNuQixNQUFNLE9BQU9VLE9BQU9LLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDO0lBQ2pDZixPQUFPLE9BQU9TLE9BQU9LLE9BQU8sQ0FBQ0ssT0FBTyxDQUFDO0lBQ3JDbEIsT0FBTyxPQUFPUSxPQUFPSyxPQUFPLENBQUNLLE9BQU8sQ0FBQztBQUN6QztBQUNBLFNBQVN4QixLQUFLLEdBQUd5QixPQUFPO0lBQ3BCQyxRQUFRQyxHQUFHLENBQUM1QixTQUFTQyxJQUFJLEtBQUt5QjtBQUNsQztBQUNBLFNBQVN4QixNQUFNLEdBQUd3QixPQUFPO0lBQ3JCQyxRQUFRekIsS0FBSyxDQUFDRixTQUFTRSxLQUFLLEtBQUt3QjtBQUNyQztBQUNBLFNBQVN2QixLQUFLLEdBQUd1QixPQUFPO0lBQ3BCQyxRQUFReEIsSUFBSSxDQUFDSCxTQUFTRyxJQUFJLEtBQUt1QjtBQUNuQztBQUNBLFNBQVN0QixNQUFNLEdBQUdzQixPQUFPO0lBQ3JCQyxRQUFRQyxHQUFHLENBQUM1QixTQUFTSSxLQUFLLEtBQUtzQjtBQUNuQztBQUNBLFNBQVNyQixLQUFLLEdBQUdxQixPQUFPO0lBQ3BCQyxRQUFRQyxHQUFHLENBQUM1QixTQUFTSyxJQUFJLEtBQUtxQjtBQUNsQztBQUNBLFNBQVNwQixNQUFNLEdBQUdvQixPQUFPO0lBQ3JCQyxRQUFRQyxHQUFHLENBQUM1QixTQUFTTSxLQUFLLEtBQUtvQjtBQUNuQztBQUNBLFNBQVNuQixNQUFNLEdBQUdtQixPQUFPO0lBQ3JCQyxRQUFRQyxHQUFHLENBQUM1QixTQUFTTyxLQUFLLEtBQUttQjtBQUNuQztBQUNBLE1BQU1HLG1CQUFtQixJQUFJQztBQUM3QixTQUFTdEIsU0FBUyxHQUFHa0IsT0FBTztJQUN4QixJQUFJLENBQUNHLGlCQUFpQkUsR0FBRyxDQUFDTCxPQUFPLENBQUMsRUFBRSxHQUFHO1FBQ25DRyxpQkFBaUJHLEdBQUcsQ0FBQ04sUUFBUU8sSUFBSSxDQUFDO1FBQ2xDOUIsUUFBUXVCO0lBQ1o7QUFDSixFQUVBLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2QtYmxvZy8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvb3V0cHV0L2xvZy5qcz9lOTRlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgcHJlZml4ZXM6IG51bGwsXG4gICAgd2FpdDogbnVsbCxcbiAgICBlcnJvcjogbnVsbCxcbiAgICB3YXJuOiBudWxsLFxuICAgIHJlYWR5OiBudWxsLFxuICAgIGluZm86IG51bGwsXG4gICAgZXZlbnQ6IG51bGwsXG4gICAgdHJhY2U6IG51bGwsXG4gICAgd2Fybk9uY2U6IG51bGxcbn0pO1xuZnVuY3Rpb24gX2V4cG9ydCh0YXJnZXQsIGFsbCkge1xuICAgIGZvcih2YXIgbmFtZSBpbiBhbGwpT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGFsbFtuYW1lXVxuICAgIH0pO1xufVxuX2V4cG9ydChleHBvcnRzLCB7XG4gICAgcHJlZml4ZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcHJlZml4ZXM7XG4gICAgfSxcbiAgICB3YWl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHdhaXQ7XG4gICAgfSxcbiAgICBlcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBlcnJvcjtcbiAgICB9LFxuICAgIHdhcm46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gd2FybjtcbiAgICB9LFxuICAgIHJlYWR5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHJlYWR5O1xuICAgIH0sXG4gICAgaW5mbzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBpbmZvO1xuICAgIH0sXG4gICAgZXZlbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfSxcbiAgICB0cmFjZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0cmFjZTtcbiAgICB9LFxuICAgIHdhcm5PbmNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHdhcm5PbmNlO1xuICAgIH1cbn0pO1xuY29uc3QgX2NoYWxrID0gLyojX19QVVJFX18qLyBfaW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQocmVxdWlyZShcIi4uLy4uL2xpYi9jaGFsa1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbn1cbmNvbnN0IHByZWZpeGVzID0ge1xuICAgIHdhaXQ6IFwiLSBcIiArIF9jaGFsay5kZWZhdWx0LmN5YW4oXCJ3YWl0XCIpLFxuICAgIGVycm9yOiBcIi0gXCIgKyBfY2hhbGsuZGVmYXVsdC5yZWQoXCJlcnJvclwiKSxcbiAgICB3YXJuOiBcIi0gXCIgKyBfY2hhbGsuZGVmYXVsdC55ZWxsb3coXCJ3YXJuXCIpLFxuICAgIHJlYWR5OiBcIi0gXCIgKyBfY2hhbGsuZGVmYXVsdC5ncmVlbihcInJlYWR5XCIpLFxuICAgIGluZm86IFwiLSBcIiArIF9jaGFsay5kZWZhdWx0LmN5YW4oXCJpbmZvXCIpLFxuICAgIGV2ZW50OiBcIi0gXCIgKyBfY2hhbGsuZGVmYXVsdC5tYWdlbnRhKFwiZXZlbnRcIiksXG4gICAgdHJhY2U6IFwiLSBcIiArIF9jaGFsay5kZWZhdWx0Lm1hZ2VudGEoXCJ0cmFjZVwiKVxufTtcbmZ1bmN0aW9uIHdhaXQoLi4ubWVzc2FnZSkge1xuICAgIGNvbnNvbGUubG9nKHByZWZpeGVzLndhaXQsIC4uLm1lc3NhZ2UpO1xufVxuZnVuY3Rpb24gZXJyb3IoLi4ubWVzc2FnZSkge1xuICAgIGNvbnNvbGUuZXJyb3IocHJlZml4ZXMuZXJyb3IsIC4uLm1lc3NhZ2UpO1xufVxuZnVuY3Rpb24gd2FybiguLi5tZXNzYWdlKSB7XG4gICAgY29uc29sZS53YXJuKHByZWZpeGVzLndhcm4sIC4uLm1lc3NhZ2UpO1xufVxuZnVuY3Rpb24gcmVhZHkoLi4ubWVzc2FnZSkge1xuICAgIGNvbnNvbGUubG9nKHByZWZpeGVzLnJlYWR5LCAuLi5tZXNzYWdlKTtcbn1cbmZ1bmN0aW9uIGluZm8oLi4ubWVzc2FnZSkge1xuICAgIGNvbnNvbGUubG9nKHByZWZpeGVzLmluZm8sIC4uLm1lc3NhZ2UpO1xufVxuZnVuY3Rpb24gZXZlbnQoLi4ubWVzc2FnZSkge1xuICAgIGNvbnNvbGUubG9nKHByZWZpeGVzLmV2ZW50LCAuLi5tZXNzYWdlKTtcbn1cbmZ1bmN0aW9uIHRyYWNlKC4uLm1lc3NhZ2UpIHtcbiAgICBjb25zb2xlLmxvZyhwcmVmaXhlcy50cmFjZSwgLi4ubWVzc2FnZSk7XG59XG5jb25zdCB3YXJuT25jZU1lc3NhZ2VzID0gbmV3IFNldCgpO1xuZnVuY3Rpb24gd2Fybk9uY2UoLi4ubWVzc2FnZSkge1xuICAgIGlmICghd2Fybk9uY2VNZXNzYWdlcy5oYXMobWVzc2FnZVswXSkpIHtcbiAgICAgICAgd2Fybk9uY2VNZXNzYWdlcy5hZGQobWVzc2FnZS5qb2luKFwiIFwiKSk7XG4gICAgICAgIHdhcm4oLi4ubWVzc2FnZSk7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2cuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kdWxlIiwicHJlZml4ZXMiLCJ3YWl0IiwiZXJyb3IiLCJ3YXJuIiwicmVhZHkiLCJpbmZvIiwiZXZlbnQiLCJ0cmFjZSIsIndhcm5PbmNlIiwiX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX2NoYWxrIiwiX2ludGVyb3BfcmVxdWlyZV9kZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY3lhbiIsInJlZCIsInllbGxvdyIsImdyZWVuIiwibWFnZW50YSIsIm1lc3NhZ2UiLCJjb25zb2xlIiwibG9nIiwid2Fybk9uY2VNZXNzYWdlcyIsIlNldCIsImhhcyIsImFkZCIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/output/log.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/client/components/app-router-headers.js":
/*!************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/app-router-headers.js ***!
  \************************************************************************/
/***/ ((module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    RSC: function() {\n        return RSC;\n    },\n    ACTION: function() {\n        return ACTION;\n    },\n    NEXT_ROUTER_STATE_TREE: function() {\n        return NEXT_ROUTER_STATE_TREE;\n    },\n    NEXT_ROUTER_PREFETCH: function() {\n        return NEXT_ROUTER_PREFETCH;\n    },\n    NEXT_URL: function() {\n        return NEXT_URL;\n    },\n    FETCH_CACHE_HEADER: function() {\n        return FETCH_CACHE_HEADER;\n    },\n    RSC_CONTENT_TYPE_HEADER: function() {\n        return RSC_CONTENT_TYPE_HEADER;\n    },\n    RSC_VARY_HEADER: function() {\n        return RSC_VARY_HEADER;\n    },\n    FLIGHT_PARAMETERS: function() {\n        return FLIGHT_PARAMETERS;\n    },\n    NEXT_RSC_UNION_QUERY: function() {\n        return NEXT_RSC_UNION_QUERY;\n    }\n});\nconst RSC = \"RSC\";\nconst ACTION = \"Next-Action\";\nconst NEXT_ROUTER_STATE_TREE = \"Next-Router-State-Tree\";\nconst NEXT_ROUTER_PREFETCH = \"Next-Router-Prefetch\";\nconst NEXT_URL = \"Next-Url\";\nconst FETCH_CACHE_HEADER = \"x-vercel-sc-headers\";\nconst RSC_CONTENT_TYPE_HEADER = \"text/x-component\";\nconst RSC_VARY_HEADER = RSC + \", \" + NEXT_ROUTER_STATE_TREE + \", \" + NEXT_ROUTER_PREFETCH;\nconst FLIGHT_PARAMETERS = [\n    [\n        RSC\n    ],\n    [\n        NEXT_ROUTER_STATE_TREE\n    ],\n    [\n        NEXT_ROUTER_PREFETCH\n    ]\n];\nconst NEXT_RSC_UNION_QUERY = \"_rsc\";\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=app-router-headers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2FwcC1yb3V0ZXItaGVhZGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRixLQUFNQyxDQUFBQSxDQVdOO0FBQ0EsU0FBU1csUUFBUUMsTUFBTSxFQUFFQyxHQUFHO0lBQ3hCLElBQUksSUFBSUMsUUFBUUQsSUFBSWpCLE9BQU9DLGNBQWMsQ0FBQ2UsUUFBUUUsTUFBTTtRQUNwREMsWUFBWTtRQUNaQyxLQUFLSCxHQUFHLENBQUNDLEtBQUs7SUFDbEI7QUFDSjtBQUNBSCxRQUFRYixTQUFTO0lBQ2JHLEtBQUs7UUFDRCxPQUFPQTtJQUNYO0lBQ0FDLFFBQVE7UUFDSixPQUFPQTtJQUNYO0lBQ0FDLHdCQUF3QjtRQUNwQixPQUFPQTtJQUNYO0lBQ0FDLHNCQUFzQjtRQUNsQixPQUFPQTtJQUNYO0lBQ0FDLFVBQVU7UUFDTixPQUFPQTtJQUNYO0lBQ0FDLG9CQUFvQjtRQUNoQixPQUFPQTtJQUNYO0lBQ0FDLHlCQUF5QjtRQUNyQixPQUFPQTtJQUNYO0lBQ0FDLGlCQUFpQjtRQUNiLE9BQU9BO0lBQ1g7SUFDQUMsbUJBQW1CO1FBQ2YsT0FBT0E7SUFDWDtJQUNBQyxzQkFBc0I7UUFDbEIsT0FBT0E7SUFDWDtBQUNKO0FBQ0EsTUFBTVQsTUFBTTtBQUNaLE1BQU1DLFNBQVM7QUFDZixNQUFNQyx5QkFBeUI7QUFDL0IsTUFBTUMsdUJBQXVCO0FBQzdCLE1BQU1DLFdBQVc7QUFDakIsTUFBTUMscUJBQXFCO0FBQzNCLE1BQU1DLDBCQUEwQjtBQUNoQyxNQUFNQyxrQkFBa0JQLE1BQU0sT0FBT0UseUJBQXlCLE9BQU9DO0FBQ3JFLE1BQU1LLG9CQUFvQjtJQUN0QjtRQUNJUjtLQUNIO0lBQ0Q7UUFDSUU7S0FDSDtJQUNEO1FBQ0lDO0tBQ0g7Q0FDSjtBQUNELE1BQU1NLHVCQUF1QjtBQUU3QixJQUFJLENBQUMsT0FBT1osUUFBUW1CLE9BQU8sS0FBSyxjQUFlLE9BQU9uQixRQUFRbUIsT0FBTyxLQUFLLFlBQVluQixRQUFRbUIsT0FBTyxLQUFLLElBQUksS0FBTSxPQUFPbkIsUUFBUW1CLE9BQU8sQ0FBQ0MsVUFBVSxLQUFLLGFBQWE7SUFDckt0QixPQUFPQyxjQUFjLENBQUNDLFFBQVFtQixPQUFPLEVBQUUsY0FBYztRQUFFbEIsT0FBTztJQUFLO0lBQ25FSCxPQUFPdUIsTUFBTSxDQUFDckIsUUFBUW1CLE9BQU8sRUFBRW5CO0lBQy9CRSxPQUFPRixPQUFPLEdBQUdBLFFBQVFtQixPQUFPO0FBQ2xDLEVBRUEsOENBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vZC1ibG9nLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9hcHAtcm91dGVyLWhlYWRlcnMuanM/MzU2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICAgIFJTQzogbnVsbCxcbiAgICBBQ1RJT046IG51bGwsXG4gICAgTkVYVF9ST1VURVJfU1RBVEVfVFJFRTogbnVsbCxcbiAgICBORVhUX1JPVVRFUl9QUkVGRVRDSDogbnVsbCxcbiAgICBORVhUX1VSTDogbnVsbCxcbiAgICBGRVRDSF9DQUNIRV9IRUFERVI6IG51bGwsXG4gICAgUlNDX0NPTlRFTlRfVFlQRV9IRUFERVI6IG51bGwsXG4gICAgUlNDX1ZBUllfSEVBREVSOiBudWxsLFxuICAgIEZMSUdIVF9QQVJBTUVURVJTOiBudWxsLFxuICAgIE5FWFRfUlNDX1VOSU9OX1FVRVJZOiBudWxsXG59KTtcbmZ1bmN0aW9uIF9leHBvcnQodGFyZ2V0LCBhbGwpIHtcbiAgICBmb3IodmFyIG5hbWUgaW4gYWxsKU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBhbGxbbmFtZV1cbiAgICB9KTtcbn1cbl9leHBvcnQoZXhwb3J0cywge1xuICAgIFJTQzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBSU0M7XG4gICAgfSxcbiAgICBBQ1RJT046IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gQUNUSU9OO1xuICAgIH0sXG4gICAgTkVYVF9ST1VURVJfU1RBVEVfVFJFRTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBORVhUX1JPVVRFUl9TVEFURV9UUkVFO1xuICAgIH0sXG4gICAgTkVYVF9ST1VURVJfUFJFRkVUQ0g6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gTkVYVF9ST1VURVJfUFJFRkVUQ0g7XG4gICAgfSxcbiAgICBORVhUX1VSTDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBORVhUX1VSTDtcbiAgICB9LFxuICAgIEZFVENIX0NBQ0hFX0hFQURFUjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBGRVRDSF9DQUNIRV9IRUFERVI7XG4gICAgfSxcbiAgICBSU0NfQ09OVEVOVF9UWVBFX0hFQURFUjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBSU0NfQ09OVEVOVF9UWVBFX0hFQURFUjtcbiAgICB9LFxuICAgIFJTQ19WQVJZX0hFQURFUjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBSU0NfVkFSWV9IRUFERVI7XG4gICAgfSxcbiAgICBGTElHSFRfUEFSQU1FVEVSUzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBGTElHSFRfUEFSQU1FVEVSUztcbiAgICB9LFxuICAgIE5FWFRfUlNDX1VOSU9OX1FVRVJZOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIE5FWFRfUlNDX1VOSU9OX1FVRVJZO1xuICAgIH1cbn0pO1xuY29uc3QgUlNDID0gXCJSU0NcIjtcbmNvbnN0IEFDVElPTiA9IFwiTmV4dC1BY3Rpb25cIjtcbmNvbnN0IE5FWFRfUk9VVEVSX1NUQVRFX1RSRUUgPSBcIk5leHQtUm91dGVyLVN0YXRlLVRyZWVcIjtcbmNvbnN0IE5FWFRfUk9VVEVSX1BSRUZFVENIID0gXCJOZXh0LVJvdXRlci1QcmVmZXRjaFwiO1xuY29uc3QgTkVYVF9VUkwgPSBcIk5leHQtVXJsXCI7XG5jb25zdCBGRVRDSF9DQUNIRV9IRUFERVIgPSBcIngtdmVyY2VsLXNjLWhlYWRlcnNcIjtcbmNvbnN0IFJTQ19DT05URU5UX1RZUEVfSEVBREVSID0gXCJ0ZXh0L3gtY29tcG9uZW50XCI7XG5jb25zdCBSU0NfVkFSWV9IRUFERVIgPSBSU0MgKyBcIiwgXCIgKyBORVhUX1JPVVRFUl9TVEFURV9UUkVFICsgXCIsIFwiICsgTkVYVF9ST1VURVJfUFJFRkVUQ0g7XG5jb25zdCBGTElHSFRfUEFSQU1FVEVSUyA9IFtcbiAgICBbXG4gICAgICAgIFJTQ1xuICAgIF0sXG4gICAgW1xuICAgICAgICBORVhUX1JPVVRFUl9TVEFURV9UUkVFXG4gICAgXSxcbiAgICBbXG4gICAgICAgIE5FWFRfUk9VVEVSX1BSRUZFVENIXG4gICAgXVxuXTtcbmNvbnN0IE5FWFRfUlNDX1VOSU9OX1FVRVJZID0gXCJfcnNjXCI7XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZXItaGVhZGVycy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJtb2R1bGUiLCJSU0MiLCJBQ1RJT04iLCJORVhUX1JPVVRFUl9TVEFURV9UUkVFIiwiTkVYVF9ST1VURVJfUFJFRkVUQ0giLCJORVhUX1VSTCIsIkZFVENIX0NBQ0hFX0hFQURFUiIsIlJTQ19DT05URU5UX1RZUEVfSEVBREVSIiwiUlNDX1ZBUllfSEVBREVSIiwiRkxJR0hUX1BBUkFNRVRFUlMiLCJORVhUX1JTQ19VTklPTl9RVUVSWSIsIl9leHBvcnQiLCJ0YXJnZXQiLCJhbGwiLCJuYW1lIiwiZW51bWVyYWJsZSIsImdldCIsImRlZmF1bHQiLCJfX2VzTW9kdWxlIiwiYXNzaWduIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/client/components/app-router-headers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/client/components/draft-mode.js":
/*!****************************************************************!*\
  !*** ./node_modules/next/dist/client/components/draft-mode.js ***!
  \****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"DraftMode\", ({\n    enumerable: true,\n    get: function() {\n        return DraftMode;\n    }\n}));\nconst _staticgenerationbailout = __webpack_require__(/*! ./static-generation-bailout */ \"(rsc)/./node_modules/next/dist/client/components/static-generation-bailout.js\");\nclass DraftMode {\n    get isEnabled() {\n        return this._provider.isEnabled;\n    }\n    enable() {\n        if ((0, _staticgenerationbailout.staticGenerationBailout)(\"draftMode().enable()\")) {\n            return;\n        }\n        return this._provider.enable();\n    }\n    disable() {\n        if ((0, _staticgenerationbailout.staticGenerationBailout)(\"draftMode().disable()\")) {\n            return;\n        }\n        return this._provider.disable();\n    }\n    constructor(provider){\n        this._provider = provider;\n    }\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=draft-mode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2RyYWZ0LW1vZGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILDZDQUE0QztJQUN4Q0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLDJCQUEyQkMsbUJBQU9BLENBQUMsa0hBQTZCO0FBQ3RFLE1BQU1GO0lBQ0YsSUFBSUcsWUFBWTtRQUNaLE9BQU8sSUFBSSxDQUFDQyxTQUFTLENBQUNELFNBQVM7SUFDbkM7SUFDQUUsU0FBUztRQUNMLElBQUksQ0FBQyxHQUFHSix5QkFBeUJLLHVCQUF1QixFQUFFLHlCQUF5QjtZQUMvRTtRQUNKO1FBQ0EsT0FBTyxJQUFJLENBQUNGLFNBQVMsQ0FBQ0MsTUFBTTtJQUNoQztJQUNBRSxVQUFVO1FBQ04sSUFBSSxDQUFDLEdBQUdOLHlCQUF5QkssdUJBQXVCLEVBQUUsMEJBQTBCO1lBQ2hGO1FBQ0o7UUFDQSxPQUFPLElBQUksQ0FBQ0YsU0FBUyxDQUFDRyxPQUFPO0lBQ2pDO0lBQ0FDLFlBQVlDLFFBQVEsQ0FBQztRQUNqQixJQUFJLENBQUNMLFNBQVMsR0FBR0s7SUFDckI7QUFDSjtBQUVBLElBQUksQ0FBQyxPQUFPYixRQUFRYyxPQUFPLEtBQUssY0FBZSxPQUFPZCxRQUFRYyxPQUFPLEtBQUssWUFBWWQsUUFBUWMsT0FBTyxLQUFLLElBQUksS0FBTSxPQUFPZCxRQUFRYyxPQUFPLENBQUNDLFVBQVUsS0FBSyxhQUFhO0lBQ3JLakIsT0FBT0MsY0FBYyxDQUFDQyxRQUFRYyxPQUFPLEVBQUUsY0FBYztRQUFFYixPQUFPO0lBQUs7SUFDbkVILE9BQU9rQixNQUFNLENBQUNoQixRQUFRYyxPQUFPLEVBQUVkO0lBQy9CaUIsT0FBT2pCLE9BQU8sR0FBR0EsUUFBUWMsT0FBTztBQUNsQyxFQUVBLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2QtYmxvZy8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvZHJhZnQtbW9kZS5qcz8zMWFjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRHJhZnRNb2RlXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBEcmFmdE1vZGU7XG4gICAgfVxufSk7XG5jb25zdCBfc3RhdGljZ2VuZXJhdGlvbmJhaWxvdXQgPSByZXF1aXJlKFwiLi9zdGF0aWMtZ2VuZXJhdGlvbi1iYWlsb3V0XCIpO1xuY2xhc3MgRHJhZnRNb2RlIHtcbiAgICBnZXQgaXNFbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvdmlkZXIuaXNFbmFibGVkO1xuICAgIH1cbiAgICBlbmFibGUoKSB7XG4gICAgICAgIGlmICgoMCwgX3N0YXRpY2dlbmVyYXRpb25iYWlsb3V0LnN0YXRpY0dlbmVyYXRpb25CYWlsb3V0KShcImRyYWZ0TW9kZSgpLmVuYWJsZSgpXCIpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3ZpZGVyLmVuYWJsZSgpO1xuICAgIH1cbiAgICBkaXNhYmxlKCkge1xuICAgICAgICBpZiAoKDAsIF9zdGF0aWNnZW5lcmF0aW9uYmFpbG91dC5zdGF0aWNHZW5lcmF0aW9uQmFpbG91dCkoXCJkcmFmdE1vZGUoKS5kaXNhYmxlKClcIikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcHJvdmlkZXIuZGlzYWJsZSgpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihwcm92aWRlcil7XG4gICAgICAgIHRoaXMuX3Byb3ZpZGVyID0gcHJvdmlkZXI7XG4gICAgfVxufVxuXG5pZiAoKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdvYmplY3QnICYmIGV4cG9ydHMuZGVmYXVsdCAhPT0gbnVsbCkpICYmIHR5cGVvZiBleHBvcnRzLmRlZmF1bHQuX19lc01vZHVsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMuZGVmYXVsdCwgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuICBPYmplY3QuYXNzaWduKGV4cG9ydHMuZGVmYXVsdCwgZXhwb3J0cyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kcmFmdC1tb2RlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJEcmFmdE1vZGUiLCJfc3RhdGljZ2VuZXJhdGlvbmJhaWxvdXQiLCJyZXF1aXJlIiwiaXNFbmFibGVkIiwiX3Byb3ZpZGVyIiwiZW5hYmxlIiwic3RhdGljR2VuZXJhdGlvbkJhaWxvdXQiLCJkaXNhYmxlIiwiY29uc3RydWN0b3IiLCJwcm92aWRlciIsImRlZmF1bHQiLCJfX2VzTW9kdWxlIiwiYXNzaWduIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/client/components/draft-mode.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/client/components/headers.js":
/*!*************************************************************!*\
  !*** ./node_modules/next/dist/client/components/headers.js ***!
  \*************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    headers: function() {\n        return headers;\n    },\n    cookies: function() {\n        return cookies;\n    },\n    draftMode: function() {\n        return draftMode;\n    }\n});\nconst _requestcookies = __webpack_require__(/*! ../../server/web/spec-extension/adapters/request-cookies */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.js\");\nconst _headers = __webpack_require__(/*! ../../server/web/spec-extension/adapters/headers */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/headers.js\");\nconst _cookies = __webpack_require__(/*! ../../server/web/spec-extension/cookies */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/cookies.js\");\nconst _requestasyncstorage = __webpack_require__(/*! ./request-async-storage */ \"(shared)/./node_modules/next/dist/client/components/request-async-storage.js\");\nconst _actionasyncstorage = __webpack_require__(/*! ./action-async-storage */ \"(shared)/./node_modules/next/dist/client/components/action-async-storage.js\");\nconst _staticgenerationbailout = __webpack_require__(/*! ./static-generation-bailout */ \"(rsc)/./node_modules/next/dist/client/components/static-generation-bailout.js\");\nconst _draftmode = __webpack_require__(/*! ./draft-mode */ \"(rsc)/./node_modules/next/dist/client/components/draft-mode.js\");\nfunction headers() {\n    if ((0, _staticgenerationbailout.staticGenerationBailout)(\"headers\")) {\n        return _headers.HeadersAdapter.seal(new Headers({}));\n    }\n    const requestStore = _requestasyncstorage.requestAsyncStorage.getStore();\n    if (!requestStore) {\n        throw new Error(\"Invariant: Method expects to have requestAsyncStorage, none available\");\n    }\n    return requestStore.headers;\n}\nfunction cookies() {\n    if ((0, _staticgenerationbailout.staticGenerationBailout)(\"cookies\")) {\n        return _requestcookies.RequestCookiesAdapter.seal(new _cookies.RequestCookies(new Headers({})));\n    }\n    const requestStore = _requestasyncstorage.requestAsyncStorage.getStore();\n    if (!requestStore) {\n        throw new Error(\"Invariant: Method expects to have requestAsyncStorage, none available\");\n    }\n    const asyncActionStore = _actionasyncstorage.actionAsyncStorage.getStore();\n    if (asyncActionStore && (asyncActionStore.isAction || asyncActionStore.isAppRoute)) {\n        // We can't conditionally return different types here based on the context.\n        // To avoid confusion, we always return the readonly type here.\n        return requestStore.mutableCookies;\n    }\n    return requestStore.cookies;\n}\nfunction draftMode() {\n    const requestStore = _requestasyncstorage.requestAsyncStorage.getStore();\n    if (!requestStore) {\n        throw new Error(\"Invariant: Method expects to have requestAsyncStorage, none available\");\n    }\n    return new _draftmode.DraftMode(requestStore.draftMode);\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=headers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2hlYWRlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0YsS0FBTUMsQ0FBQUEsQ0FJTjtBQUNBLFNBQVNJLFFBQVFDLE1BQU0sRUFBRUMsR0FBRztJQUN4QixJQUFJLElBQUlDLFFBQVFELElBQUlWLE9BQU9DLGNBQWMsQ0FBQ1EsUUFBUUUsTUFBTTtRQUNwREMsWUFBWTtRQUNaQyxLQUFLSCxHQUFHLENBQUNDLEtBQUs7SUFDbEI7QUFDSjtBQUNBSCxRQUFRTixTQUFTO0lBQ2JHLFNBQVM7UUFDTCxPQUFPQTtJQUNYO0lBQ0FDLFNBQVM7UUFDTCxPQUFPQTtJQUNYO0lBQ0FDLFdBQVc7UUFDUCxPQUFPQTtJQUNYO0FBQ0o7QUFDQSxNQUFNTyxrQkFBa0JDLG1CQUFPQSxDQUFDLHNKQUEwRDtBQUMxRixNQUFNQyxXQUFXRCxtQkFBT0EsQ0FBQyxzSUFBa0Q7QUFDM0UsTUFBTUUsV0FBV0YsbUJBQU9BLENBQUMsb0hBQXlDO0FBQ2xFLE1BQU1HLHVCQUF1QkgsbUJBQU9BLENBQUMsNkdBQXlCO0FBQzlELE1BQU1JLHNCQUFzQkosbUJBQU9BLENBQUMsMkdBQXdCO0FBQzVELE1BQU1LLDJCQUEyQkwsbUJBQU9BLENBQUMsa0hBQTZCO0FBQ3RFLE1BQU1NLGFBQWFOLG1CQUFPQSxDQUFDLG9GQUFjO0FBQ3pDLFNBQVNWO0lBQ0wsSUFBSSxDQUFDLEdBQUdlLHlCQUF5QkUsdUJBQXVCLEVBQUUsWUFBWTtRQUNsRSxPQUFPTixTQUFTTyxjQUFjLENBQUNDLElBQUksQ0FBQyxJQUFJQyxRQUFRLENBQUM7SUFDckQ7SUFDQSxNQUFNQyxlQUFlUixxQkFBcUJTLG1CQUFtQixDQUFDQyxRQUFRO0lBQ3RFLElBQUksQ0FBQ0YsY0FBYztRQUNmLE1BQU0sSUFBSUcsTUFBTTtJQUNwQjtJQUNBLE9BQU9ILGFBQWFyQixPQUFPO0FBQy9CO0FBQ0EsU0FBU0M7SUFDTCxJQUFJLENBQUMsR0FBR2MseUJBQXlCRSx1QkFBdUIsRUFBRSxZQUFZO1FBQ2xFLE9BQU9SLGdCQUFnQmdCLHFCQUFxQixDQUFDTixJQUFJLENBQUMsSUFBSVAsU0FBU2MsY0FBYyxDQUFDLElBQUlOLFFBQVEsQ0FBQztJQUMvRjtJQUNBLE1BQU1DLGVBQWVSLHFCQUFxQlMsbUJBQW1CLENBQUNDLFFBQVE7SUFDdEUsSUFBSSxDQUFDRixjQUFjO1FBQ2YsTUFBTSxJQUFJRyxNQUFNO0lBQ3BCO0lBQ0EsTUFBTUcsbUJBQW1CYixvQkFBb0JjLGtCQUFrQixDQUFDTCxRQUFRO0lBQ3hFLElBQUlJLG9CQUFxQkEsQ0FBQUEsaUJBQWlCRSxRQUFRLElBQUlGLGlCQUFpQkcsVUFBVSxHQUFHO1FBQ2hGLDJFQUEyRTtRQUMzRSwrREFBK0Q7UUFDL0QsT0FBT1QsYUFBYVUsY0FBYztJQUN0QztJQUNBLE9BQU9WLGFBQWFwQixPQUFPO0FBQy9CO0FBQ0EsU0FBU0M7SUFDTCxNQUFNbUIsZUFBZVIscUJBQXFCUyxtQkFBbUIsQ0FBQ0MsUUFBUTtJQUN0RSxJQUFJLENBQUNGLGNBQWM7UUFDZixNQUFNLElBQUlHLE1BQU07SUFDcEI7SUFDQSxPQUFPLElBQUlSLFdBQVdnQixTQUFTLENBQUNYLGFBQWFuQixTQUFTO0FBQzFEO0FBRUEsSUFBSSxDQUFDLE9BQU9MLFFBQVFvQyxPQUFPLEtBQUssY0FBZSxPQUFPcEMsUUFBUW9DLE9BQU8sS0FBSyxZQUFZcEMsUUFBUW9DLE9BQU8sS0FBSyxJQUFJLEtBQU0sT0FBT3BDLFFBQVFvQyxPQUFPLENBQUNDLFVBQVUsS0FBSyxhQUFhO0lBQ3JLdkMsT0FBT0MsY0FBYyxDQUFDQyxRQUFRb0MsT0FBTyxFQUFFLGNBQWM7UUFBRW5DLE9BQU87SUFBSztJQUNuRUgsT0FBT3dDLE1BQU0sQ0FBQ3RDLFFBQVFvQyxPQUFPLEVBQUVwQztJQUMvQkUsT0FBT0YsT0FBTyxHQUFHQSxRQUFRb0MsT0FBTztBQUNsQyxFQUVBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2QtYmxvZy8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvaGVhZGVycy5qcz8wYmFmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgaGVhZGVyczogbnVsbCxcbiAgICBjb29raWVzOiBudWxsLFxuICAgIGRyYWZ0TW9kZTogbnVsbFxufSk7XG5mdW5jdGlvbiBfZXhwb3J0KHRhcmdldCwgYWxsKSB7XG4gICAgZm9yKHZhciBuYW1lIGluIGFsbClPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBuYW1lLCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogYWxsW25hbWVdXG4gICAgfSk7XG59XG5fZXhwb3J0KGV4cG9ydHMsIHtcbiAgICBoZWFkZXJzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGhlYWRlcnM7XG4gICAgfSxcbiAgICBjb29raWVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGNvb2tpZXM7XG4gICAgfSxcbiAgICBkcmFmdE1vZGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZHJhZnRNb2RlO1xuICAgIH1cbn0pO1xuY29uc3QgX3JlcXVlc3Rjb29raWVzID0gcmVxdWlyZShcIi4uLy4uL3NlcnZlci93ZWIvc3BlYy1leHRlbnNpb24vYWRhcHRlcnMvcmVxdWVzdC1jb29raWVzXCIpO1xuY29uc3QgX2hlYWRlcnMgPSByZXF1aXJlKFwiLi4vLi4vc2VydmVyL3dlYi9zcGVjLWV4dGVuc2lvbi9hZGFwdGVycy9oZWFkZXJzXCIpO1xuY29uc3QgX2Nvb2tpZXMgPSByZXF1aXJlKFwiLi4vLi4vc2VydmVyL3dlYi9zcGVjLWV4dGVuc2lvbi9jb29raWVzXCIpO1xuY29uc3QgX3JlcXVlc3Rhc3luY3N0b3JhZ2UgPSByZXF1aXJlKFwiLi9yZXF1ZXN0LWFzeW5jLXN0b3JhZ2VcIik7XG5jb25zdCBfYWN0aW9uYXN5bmNzdG9yYWdlID0gcmVxdWlyZShcIi4vYWN0aW9uLWFzeW5jLXN0b3JhZ2VcIik7XG5jb25zdCBfc3RhdGljZ2VuZXJhdGlvbmJhaWxvdXQgPSByZXF1aXJlKFwiLi9zdGF0aWMtZ2VuZXJhdGlvbi1iYWlsb3V0XCIpO1xuY29uc3QgX2RyYWZ0bW9kZSA9IHJlcXVpcmUoXCIuL2RyYWZ0LW1vZGVcIik7XG5mdW5jdGlvbiBoZWFkZXJzKCkge1xuICAgIGlmICgoMCwgX3N0YXRpY2dlbmVyYXRpb25iYWlsb3V0LnN0YXRpY0dlbmVyYXRpb25CYWlsb3V0KShcImhlYWRlcnNcIikpIHtcbiAgICAgICAgcmV0dXJuIF9oZWFkZXJzLkhlYWRlcnNBZGFwdGVyLnNlYWwobmV3IEhlYWRlcnMoe30pKTtcbiAgICB9XG4gICAgY29uc3QgcmVxdWVzdFN0b3JlID0gX3JlcXVlc3Rhc3luY3N0b3JhZ2UucmVxdWVzdEFzeW5jU3RvcmFnZS5nZXRTdG9yZSgpO1xuICAgIGlmICghcmVxdWVzdFN0b3JlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFyaWFudDogTWV0aG9kIGV4cGVjdHMgdG8gaGF2ZSByZXF1ZXN0QXN5bmNTdG9yYWdlLCBub25lIGF2YWlsYWJsZVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcXVlc3RTdG9yZS5oZWFkZXJzO1xufVxuZnVuY3Rpb24gY29va2llcygpIHtcbiAgICBpZiAoKDAsIF9zdGF0aWNnZW5lcmF0aW9uYmFpbG91dC5zdGF0aWNHZW5lcmF0aW9uQmFpbG91dCkoXCJjb29raWVzXCIpKSB7XG4gICAgICAgIHJldHVybiBfcmVxdWVzdGNvb2tpZXMuUmVxdWVzdENvb2tpZXNBZGFwdGVyLnNlYWwobmV3IF9jb29raWVzLlJlcXVlc3RDb29raWVzKG5ldyBIZWFkZXJzKHt9KSkpO1xuICAgIH1cbiAgICBjb25zdCByZXF1ZXN0U3RvcmUgPSBfcmVxdWVzdGFzeW5jc3RvcmFnZS5yZXF1ZXN0QXN5bmNTdG9yYWdlLmdldFN0b3JlKCk7XG4gICAgaWYgKCFyZXF1ZXN0U3RvcmUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YXJpYW50OiBNZXRob2QgZXhwZWN0cyB0byBoYXZlIHJlcXVlc3RBc3luY1N0b3JhZ2UsIG5vbmUgYXZhaWxhYmxlXCIpO1xuICAgIH1cbiAgICBjb25zdCBhc3luY0FjdGlvblN0b3JlID0gX2FjdGlvbmFzeW5jc3RvcmFnZS5hY3Rpb25Bc3luY1N0b3JhZ2UuZ2V0U3RvcmUoKTtcbiAgICBpZiAoYXN5bmNBY3Rpb25TdG9yZSAmJiAoYXN5bmNBY3Rpb25TdG9yZS5pc0FjdGlvbiB8fCBhc3luY0FjdGlvblN0b3JlLmlzQXBwUm91dGUpKSB7XG4gICAgICAgIC8vIFdlIGNhbid0IGNvbmRpdGlvbmFsbHkgcmV0dXJuIGRpZmZlcmVudCB0eXBlcyBoZXJlIGJhc2VkIG9uIHRoZSBjb250ZXh0LlxuICAgICAgICAvLyBUbyBhdm9pZCBjb25mdXNpb24sIHdlIGFsd2F5cyByZXR1cm4gdGhlIHJlYWRvbmx5IHR5cGUgaGVyZS5cbiAgICAgICAgcmV0dXJuIHJlcXVlc3RTdG9yZS5tdXRhYmxlQ29va2llcztcbiAgICB9XG4gICAgcmV0dXJuIHJlcXVlc3RTdG9yZS5jb29raWVzO1xufVxuZnVuY3Rpb24gZHJhZnRNb2RlKCkge1xuICAgIGNvbnN0IHJlcXVlc3RTdG9yZSA9IF9yZXF1ZXN0YXN5bmNzdG9yYWdlLnJlcXVlc3RBc3luY1N0b3JhZ2UuZ2V0U3RvcmUoKTtcbiAgICBpZiAoIXJlcXVlc3RTdG9yZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhcmlhbnQ6IE1ldGhvZCBleHBlY3RzIHRvIGhhdmUgcmVxdWVzdEFzeW5jU3RvcmFnZSwgbm9uZSBhdmFpbGFibGVcIik7XG4gICAgfVxuICAgIHJldHVybiBuZXcgX2RyYWZ0bW9kZS5EcmFmdE1vZGUocmVxdWVzdFN0b3JlLmRyYWZ0TW9kZSk7XG59XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlYWRlcnMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kdWxlIiwiaGVhZGVycyIsImNvb2tpZXMiLCJkcmFmdE1vZGUiLCJfZXhwb3J0IiwidGFyZ2V0IiwiYWxsIiwibmFtZSIsImVudW1lcmFibGUiLCJnZXQiLCJfcmVxdWVzdGNvb2tpZXMiLCJyZXF1aXJlIiwiX2hlYWRlcnMiLCJfY29va2llcyIsIl9yZXF1ZXN0YXN5bmNzdG9yYWdlIiwiX2FjdGlvbmFzeW5jc3RvcmFnZSIsIl9zdGF0aWNnZW5lcmF0aW9uYmFpbG91dCIsIl9kcmFmdG1vZGUiLCJzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCIsIkhlYWRlcnNBZGFwdGVyIiwic2VhbCIsIkhlYWRlcnMiLCJyZXF1ZXN0U3RvcmUiLCJyZXF1ZXN0QXN5bmNTdG9yYWdlIiwiZ2V0U3RvcmUiLCJFcnJvciIsIlJlcXVlc3RDb29raWVzQWRhcHRlciIsIlJlcXVlc3RDb29raWVzIiwiYXN5bmNBY3Rpb25TdG9yZSIsImFjdGlvbkFzeW5jU3RvcmFnZSIsImlzQWN0aW9uIiwiaXNBcHBSb3V0ZSIsIm11dGFibGVDb29raWVzIiwiRHJhZnRNb2RlIiwiZGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/client/components/headers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/client/components/hooks-server-context.js":
/*!**************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/hooks-server-context.js ***!
  \**************************************************************************/
/***/ ((module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    DYNAMIC_ERROR_CODE: function() {\n        return DYNAMIC_ERROR_CODE;\n    },\n    DynamicServerError: function() {\n        return DynamicServerError;\n    }\n});\nconst DYNAMIC_ERROR_CODE = \"DYNAMIC_SERVER_USAGE\";\nclass DynamicServerError extends Error {\n    constructor(type){\n        super(\"Dynamic server usage: \" + type);\n        this.digest = DYNAMIC_ERROR_CODE;\n    }\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=hooks-server-context.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2hvb2tzLXNlcnZlci1jb250ZXh0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGLEtBQU1DLENBQUFBLENBR047QUFDQSxTQUFTRyxRQUFRQyxNQUFNLEVBQUVDLEdBQUc7SUFDeEIsSUFBSSxJQUFJQyxRQUFRRCxJQUFJVCxPQUFPQyxjQUFjLENBQUNPLFFBQVFFLE1BQU07UUFDcERDLFlBQVk7UUFDWkMsS0FBS0gsR0FBRyxDQUFDQyxLQUFLO0lBQ2xCO0FBQ0o7QUFDQUgsUUFBUUwsU0FBUztJQUNiRyxvQkFBb0I7UUFDaEIsT0FBT0E7SUFDWDtJQUNBQyxvQkFBb0I7UUFDaEIsT0FBT0E7SUFDWDtBQUNKO0FBQ0EsTUFBTUQscUJBQXFCO0FBQzNCLE1BQU1DLDJCQUEyQk87SUFDN0JDLFlBQVlDLElBQUksQ0FBQztRQUNiLEtBQUssQ0FBQywyQkFBMkJBO1FBQ2pDLElBQUksQ0FBQ0MsTUFBTSxHQUFHWDtJQUNsQjtBQUNKO0FBRUEsSUFBSSxDQUFDLE9BQU9ILFFBQVFlLE9BQU8sS0FBSyxjQUFlLE9BQU9mLFFBQVFlLE9BQU8sS0FBSyxZQUFZZixRQUFRZSxPQUFPLEtBQUssSUFBSSxLQUFNLE9BQU9mLFFBQVFlLE9BQU8sQ0FBQ0MsVUFBVSxLQUFLLGFBQWE7SUFDcktsQixPQUFPQyxjQUFjLENBQUNDLFFBQVFlLE9BQU8sRUFBRSxjQUFjO1FBQUVkLE9BQU87SUFBSztJQUNuRUgsT0FBT21CLE1BQU0sQ0FBQ2pCLFFBQVFlLE9BQU8sRUFBRWY7SUFDL0JFLE9BQU9GLE9BQU8sR0FBR0EsUUFBUWUsT0FBTztBQUNsQyxFQUVBLGdEQUFnRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2QtYmxvZy8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvaG9va3Mtc2VydmVyLWNvbnRleHQuanM/MDA5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICAgIERZTkFNSUNfRVJST1JfQ09ERTogbnVsbCxcbiAgICBEeW5hbWljU2VydmVyRXJyb3I6IG51bGxcbn0pO1xuZnVuY3Rpb24gX2V4cG9ydCh0YXJnZXQsIGFsbCkge1xuICAgIGZvcih2YXIgbmFtZSBpbiBhbGwpT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGFsbFtuYW1lXVxuICAgIH0pO1xufVxuX2V4cG9ydChleHBvcnRzLCB7XG4gICAgRFlOQU1JQ19FUlJPUl9DT0RFOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIERZTkFNSUNfRVJST1JfQ09ERTtcbiAgICB9LFxuICAgIER5bmFtaWNTZXJ2ZXJFcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBEeW5hbWljU2VydmVyRXJyb3I7XG4gICAgfVxufSk7XG5jb25zdCBEWU5BTUlDX0VSUk9SX0NPREUgPSBcIkRZTkFNSUNfU0VSVkVSX1VTQUdFXCI7XG5jbGFzcyBEeW5hbWljU2VydmVyRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IodHlwZSl7XG4gICAgICAgIHN1cGVyKFwiRHluYW1pYyBzZXJ2ZXIgdXNhZ2U6IFwiICsgdHlwZSk7XG4gICAgICAgIHRoaXMuZGlnZXN0ID0gRFlOQU1JQ19FUlJPUl9DT0RFO1xuICAgIH1cbn1cblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aG9va3Mtc2VydmVyLWNvbnRleHQuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kdWxlIiwiRFlOQU1JQ19FUlJPUl9DT0RFIiwiRHluYW1pY1NlcnZlckVycm9yIiwiX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsInR5cGUiLCJkaWdlc3QiLCJkZWZhdWx0IiwiX19lc01vZHVsZSIsImFzc2lnbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/client/components/hooks-server-context.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/client/components/not-found.js":
/*!***************************************************************!*\
  !*** ./node_modules/next/dist/client/components/not-found.js ***!
  \***************************************************************/
/***/ ((module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    notFound: function() {\n        return notFound;\n    },\n    isNotFoundError: function() {\n        return isNotFoundError;\n    }\n});\nconst NOT_FOUND_ERROR_CODE = \"NEXT_NOT_FOUND\";\nfunction notFound() {\n    // eslint-disable-next-line no-throw-literal\n    const error = new Error(NOT_FOUND_ERROR_CODE);\n    error.digest = NOT_FOUND_ERROR_CODE;\n    throw error;\n}\nfunction isNotFoundError(error) {\n    return (error == null ? void 0 : error.digest) === NOT_FOUND_ERROR_CODE;\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=not-found.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL25vdC1mb3VuZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRixLQUFNQyxDQUFBQSxDQUdOO0FBQ0EsU0FBU0csUUFBUUMsTUFBTSxFQUFFQyxHQUFHO0lBQ3hCLElBQUksSUFBSUMsUUFBUUQsSUFBSVQsT0FBT0MsY0FBYyxDQUFDTyxRQUFRRSxNQUFNO1FBQ3BEQyxZQUFZO1FBQ1pDLEtBQUtILEdBQUcsQ0FBQ0MsS0FBSztJQUNsQjtBQUNKO0FBQ0FILFFBQVFMLFNBQVM7SUFDYkcsVUFBVTtRQUNOLE9BQU9BO0lBQ1g7SUFDQUMsaUJBQWlCO1FBQ2IsT0FBT0E7SUFDWDtBQUNKO0FBQ0EsTUFBTU8sdUJBQXVCO0FBQzdCLFNBQVNSO0lBQ0wsNENBQTRDO0lBQzVDLE1BQU1TLFFBQVEsSUFBSUMsTUFBTUY7SUFDeEJDLE1BQU1FLE1BQU0sR0FBR0g7SUFDZixNQUFNQztBQUNWO0FBQ0EsU0FBU1IsZ0JBQWdCUSxLQUFLO0lBQzFCLE9BQU8sQ0FBQ0EsU0FBUyxPQUFPLEtBQUssSUFBSUEsTUFBTUUsTUFBTSxNQUFNSDtBQUN2RDtBQUVBLElBQUksQ0FBQyxPQUFPWCxRQUFRZSxPQUFPLEtBQUssY0FBZSxPQUFPZixRQUFRZSxPQUFPLEtBQUssWUFBWWYsUUFBUWUsT0FBTyxLQUFLLElBQUksS0FBTSxPQUFPZixRQUFRZSxPQUFPLENBQUNDLFVBQVUsS0FBSyxhQUFhO0lBQ3JLbEIsT0FBT0MsY0FBYyxDQUFDQyxRQUFRZSxPQUFPLEVBQUUsY0FBYztRQUFFZCxPQUFPO0lBQUs7SUFDbkVILE9BQU9tQixNQUFNLENBQUNqQixRQUFRZSxPQUFPLEVBQUVmO0lBQy9CRSxPQUFPRixPQUFPLEdBQUdBLFFBQVFlLE9BQU87QUFDbEMsRUFFQSxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb29kLWJsb2cvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL25vdC1mb3VuZC5qcz80MjAzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgbm90Rm91bmQ6IG51bGwsXG4gICAgaXNOb3RGb3VuZEVycm9yOiBudWxsXG59KTtcbmZ1bmN0aW9uIF9leHBvcnQodGFyZ2V0LCBhbGwpIHtcbiAgICBmb3IodmFyIG5hbWUgaW4gYWxsKU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBhbGxbbmFtZV1cbiAgICB9KTtcbn1cbl9leHBvcnQoZXhwb3J0cywge1xuICAgIG5vdEZvdW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5vdEZvdW5kO1xuICAgIH0sXG4gICAgaXNOb3RGb3VuZEVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGlzTm90Rm91bmRFcnJvcjtcbiAgICB9XG59KTtcbmNvbnN0IE5PVF9GT1VORF9FUlJPUl9DT0RFID0gXCJORVhUX05PVF9GT1VORFwiO1xuZnVuY3Rpb24gbm90Rm91bmQoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihOT1RfRk9VTkRfRVJST1JfQ09ERSk7XG4gICAgZXJyb3IuZGlnZXN0ID0gTk9UX0ZPVU5EX0VSUk9SX0NPREU7XG4gICAgdGhyb3cgZXJyb3I7XG59XG5mdW5jdGlvbiBpc05vdEZvdW5kRXJyb3IoZXJyb3IpIHtcbiAgICByZXR1cm4gKGVycm9yID09IG51bGwgPyB2b2lkIDAgOiBlcnJvci5kaWdlc3QpID09PSBOT1RfRk9VTkRfRVJST1JfQ09ERTtcbn1cblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm90LWZvdW5kLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1vZHVsZSIsIm5vdEZvdW5kIiwiaXNOb3RGb3VuZEVycm9yIiwiX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiTk9UX0ZPVU5EX0VSUk9SX0NPREUiLCJlcnJvciIsIkVycm9yIiwiZGlnZXN0IiwiZGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/client/components/not-found.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/client/components/redirect.js":
/*!**************************************************************!*\
  !*** ./node_modules/next/dist/client/components/redirect.js ***!
  \**************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    RedirectType: function() {\n        return RedirectType;\n    },\n    getRedirectError: function() {\n        return getRedirectError;\n    },\n    redirect: function() {\n        return redirect;\n    },\n    isRedirectError: function() {\n        return isRedirectError;\n    },\n    getURLFromRedirectError: function() {\n        return getURLFromRedirectError;\n    },\n    getRedirectTypeFromError: function() {\n        return getRedirectTypeFromError;\n    }\n});\nconst _requestasyncstorage = __webpack_require__(/*! ./request-async-storage */ \"(shared)/./node_modules/next/dist/client/components/request-async-storage.js\");\nconst REDIRECT_ERROR_CODE = \"NEXT_REDIRECT\";\nvar RedirectType;\n(function(RedirectType) {\n    RedirectType[\"push\"] = \"push\";\n    RedirectType[\"replace\"] = \"replace\";\n})(RedirectType || (RedirectType = {}));\nfunction getRedirectError(url, type) {\n    const error = new Error(REDIRECT_ERROR_CODE);\n    error.digest = REDIRECT_ERROR_CODE + \";\" + type + \";\" + url;\n    const requestStore = _requestasyncstorage.requestAsyncStorage.getStore();\n    if (requestStore) {\n        error.mutableCookies = requestStore.mutableCookies;\n    }\n    return error;\n}\nfunction redirect(url, type) {\n    if (type === void 0) type = \"replace\";\n    throw getRedirectError(url, type);\n}\nfunction isRedirectError(error) {\n    if (typeof (error == null ? void 0 : error.digest) !== \"string\") return false;\n    const [errorCode, type, destination] = error.digest.split(\";\", 3);\n    return errorCode === REDIRECT_ERROR_CODE && (type === \"replace\" || type === \"push\") && typeof destination === \"string\";\n}\nfunction getURLFromRedirectError(error) {\n    if (!isRedirectError(error)) return null;\n    // Slices off the beginning of the digest that contains the code and the\n    // separating ';'.\n    return error.digest.split(\";\", 3)[2];\n}\nfunction getRedirectTypeFromError(error) {\n    if (!isRedirectError(error)) {\n        throw new Error(\"Not a redirect error\");\n    }\n    return error.digest.split(\";\", 3)[1];\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=redirect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL3JlZGlyZWN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGLEtBQU1DLENBQUFBLENBT047QUFDQSxTQUFTTyxRQUFRQyxNQUFNLEVBQUVDLEdBQUc7SUFDeEIsSUFBSSxJQUFJQyxRQUFRRCxJQUFJYixPQUFPQyxjQUFjLENBQUNXLFFBQVFFLE1BQU07UUFDcERDLFlBQVk7UUFDWkMsS0FBS0gsR0FBRyxDQUFDQyxLQUFLO0lBQ2xCO0FBQ0o7QUFDQUgsUUFBUVQsU0FBUztJQUNiRyxjQUFjO1FBQ1YsT0FBT0E7SUFDWDtJQUNBQyxrQkFBa0I7UUFDZCxPQUFPQTtJQUNYO0lBQ0FDLFVBQVU7UUFDTixPQUFPQTtJQUNYO0lBQ0FDLGlCQUFpQjtRQUNiLE9BQU9BO0lBQ1g7SUFDQUMseUJBQXlCO1FBQ3JCLE9BQU9BO0lBQ1g7SUFDQUMsMEJBQTBCO1FBQ3RCLE9BQU9BO0lBQ1g7QUFDSjtBQUNBLE1BQU1PLHVCQUF1QkMsbUJBQU9BLENBQUMsNkdBQXlCO0FBQzlELE1BQU1DLHNCQUFzQjtBQUM1QixJQUFJZDtBQUNILFVBQVNBLFlBQVk7SUFDbEJBLFlBQVksQ0FBQyxPQUFPLEdBQUc7SUFDdkJBLFlBQVksQ0FBQyxVQUFVLEdBQUc7QUFDOUIsR0FBR0EsZ0JBQWlCQSxDQUFBQSxlQUFlLENBQUM7QUFDcEMsU0FBU0MsaUJBQWlCYyxHQUFHLEVBQUVDLElBQUk7SUFDL0IsTUFBTUMsUUFBUSxJQUFJQyxNQUFNSjtJQUN4QkcsTUFBTUUsTUFBTSxHQUFHTCxzQkFBc0IsTUFBTUUsT0FBTyxNQUFNRDtJQUN4RCxNQUFNSyxlQUFlUixxQkFBcUJTLG1CQUFtQixDQUFDQyxRQUFRO0lBQ3RFLElBQUlGLGNBQWM7UUFDZEgsTUFBTU0sY0FBYyxHQUFHSCxhQUFhRyxjQUFjO0lBQ3REO0lBQ0EsT0FBT047QUFDWDtBQUNBLFNBQVNmLFNBQVNhLEdBQUcsRUFBRUMsSUFBSTtJQUN2QixJQUFJQSxTQUFTLEtBQUssR0FBR0EsT0FBTztJQUM1QixNQUFNZixpQkFBaUJjLEtBQUtDO0FBQ2hDO0FBQ0EsU0FBU2IsZ0JBQWdCYyxLQUFLO0lBQzFCLElBQUksT0FBUUEsQ0FBQUEsU0FBUyxPQUFPLEtBQUssSUFBSUEsTUFBTUUsTUFBTSxNQUFNLFVBQVUsT0FBTztJQUN4RSxNQUFNLENBQUNLLFdBQVdSLE1BQU1TLFlBQVksR0FBR1IsTUFBTUUsTUFBTSxDQUFDTyxLQUFLLENBQUMsS0FBSztJQUMvRCxPQUFPRixjQUFjVix1QkFBd0JFLENBQUFBLFNBQVMsYUFBYUEsU0FBUyxNQUFLLEtBQU0sT0FBT1MsZ0JBQWdCO0FBQ2xIO0FBQ0EsU0FBU3JCLHdCQUF3QmEsS0FBSztJQUNsQyxJQUFJLENBQUNkLGdCQUFnQmMsUUFBUSxPQUFPO0lBQ3BDLHdFQUF3RTtJQUN4RSxrQkFBa0I7SUFDbEIsT0FBT0EsTUFBTUUsTUFBTSxDQUFDTyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRTtBQUN4QztBQUNBLFNBQVNyQix5QkFBeUJZLEtBQUs7SUFDbkMsSUFBSSxDQUFDZCxnQkFBZ0JjLFFBQVE7UUFDekIsTUFBTSxJQUFJQyxNQUFNO0lBQ3BCO0lBQ0EsT0FBT0QsTUFBTUUsTUFBTSxDQUFDTyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRTtBQUN4QztBQUVBLElBQUksQ0FBQyxPQUFPN0IsUUFBUThCLE9BQU8sS0FBSyxjQUFlLE9BQU85QixRQUFROEIsT0FBTyxLQUFLLFlBQVk5QixRQUFROEIsT0FBTyxLQUFLLElBQUksS0FBTSxPQUFPOUIsUUFBUThCLE9BQU8sQ0FBQ0MsVUFBVSxLQUFLLGFBQWE7SUFDcktqQyxPQUFPQyxjQUFjLENBQUNDLFFBQVE4QixPQUFPLEVBQUUsY0FBYztRQUFFN0IsT0FBTztJQUFLO0lBQ25FSCxPQUFPa0MsTUFBTSxDQUFDaEMsUUFBUThCLE9BQU8sRUFBRTlCO0lBQy9CRSxPQUFPRixPQUFPLEdBQUdBLFFBQVE4QixPQUFPO0FBQ2xDLEVBRUEsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vZC1ibG9nLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9yZWRpcmVjdC5qcz9iMjViIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgUmVkaXJlY3RUeXBlOiBudWxsLFxuICAgIGdldFJlZGlyZWN0RXJyb3I6IG51bGwsXG4gICAgcmVkaXJlY3Q6IG51bGwsXG4gICAgaXNSZWRpcmVjdEVycm9yOiBudWxsLFxuICAgIGdldFVSTEZyb21SZWRpcmVjdEVycm9yOiBudWxsLFxuICAgIGdldFJlZGlyZWN0VHlwZUZyb21FcnJvcjogbnVsbFxufSk7XG5mdW5jdGlvbiBfZXhwb3J0KHRhcmdldCwgYWxsKSB7XG4gICAgZm9yKHZhciBuYW1lIGluIGFsbClPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBuYW1lLCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogYWxsW25hbWVdXG4gICAgfSk7XG59XG5fZXhwb3J0KGV4cG9ydHMsIHtcbiAgICBSZWRpcmVjdFR5cGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gUmVkaXJlY3RUeXBlO1xuICAgIH0sXG4gICAgZ2V0UmVkaXJlY3RFcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRSZWRpcmVjdEVycm9yO1xuICAgIH0sXG4gICAgcmVkaXJlY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcmVkaXJlY3Q7XG4gICAgfSxcbiAgICBpc1JlZGlyZWN0RXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaXNSZWRpcmVjdEVycm9yO1xuICAgIH0sXG4gICAgZ2V0VVJMRnJvbVJlZGlyZWN0RXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0VVJMRnJvbVJlZGlyZWN0RXJyb3I7XG4gICAgfSxcbiAgICBnZXRSZWRpcmVjdFR5cGVGcm9tRXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0UmVkaXJlY3RUeXBlRnJvbUVycm9yO1xuICAgIH1cbn0pO1xuY29uc3QgX3JlcXVlc3Rhc3luY3N0b3JhZ2UgPSByZXF1aXJlKFwiLi9yZXF1ZXN0LWFzeW5jLXN0b3JhZ2VcIik7XG5jb25zdCBSRURJUkVDVF9FUlJPUl9DT0RFID0gXCJORVhUX1JFRElSRUNUXCI7XG52YXIgUmVkaXJlY3RUeXBlO1xuKGZ1bmN0aW9uKFJlZGlyZWN0VHlwZSkge1xuICAgIFJlZGlyZWN0VHlwZVtcInB1c2hcIl0gPSBcInB1c2hcIjtcbiAgICBSZWRpcmVjdFR5cGVbXCJyZXBsYWNlXCJdID0gXCJyZXBsYWNlXCI7XG59KShSZWRpcmVjdFR5cGUgfHwgKFJlZGlyZWN0VHlwZSA9IHt9KSk7XG5mdW5jdGlvbiBnZXRSZWRpcmVjdEVycm9yKHVybCwgdHlwZSkge1xuICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKFJFRElSRUNUX0VSUk9SX0NPREUpO1xuICAgIGVycm9yLmRpZ2VzdCA9IFJFRElSRUNUX0VSUk9SX0NPREUgKyBcIjtcIiArIHR5cGUgKyBcIjtcIiArIHVybDtcbiAgICBjb25zdCByZXF1ZXN0U3RvcmUgPSBfcmVxdWVzdGFzeW5jc3RvcmFnZS5yZXF1ZXN0QXN5bmNTdG9yYWdlLmdldFN0b3JlKCk7XG4gICAgaWYgKHJlcXVlc3RTdG9yZSkge1xuICAgICAgICBlcnJvci5tdXRhYmxlQ29va2llcyA9IHJlcXVlc3RTdG9yZS5tdXRhYmxlQ29va2llcztcbiAgICB9XG4gICAgcmV0dXJuIGVycm9yO1xufVxuZnVuY3Rpb24gcmVkaXJlY3QodXJsLCB0eXBlKSB7XG4gICAgaWYgKHR5cGUgPT09IHZvaWQgMCkgdHlwZSA9IFwicmVwbGFjZVwiO1xuICAgIHRocm93IGdldFJlZGlyZWN0RXJyb3IodXJsLCB0eXBlKTtcbn1cbmZ1bmN0aW9uIGlzUmVkaXJlY3RFcnJvcihlcnJvcikge1xuICAgIGlmICh0eXBlb2YgKGVycm9yID09IG51bGwgPyB2b2lkIDAgOiBlcnJvci5kaWdlc3QpICE9PSBcInN0cmluZ1wiKSByZXR1cm4gZmFsc2U7XG4gICAgY29uc3QgW2Vycm9yQ29kZSwgdHlwZSwgZGVzdGluYXRpb25dID0gZXJyb3IuZGlnZXN0LnNwbGl0KFwiO1wiLCAzKTtcbiAgICByZXR1cm4gZXJyb3JDb2RlID09PSBSRURJUkVDVF9FUlJPUl9DT0RFICYmICh0eXBlID09PSBcInJlcGxhY2VcIiB8fCB0eXBlID09PSBcInB1c2hcIikgJiYgdHlwZW9mIGRlc3RpbmF0aW9uID09PSBcInN0cmluZ1wiO1xufVxuZnVuY3Rpb24gZ2V0VVJMRnJvbVJlZGlyZWN0RXJyb3IoZXJyb3IpIHtcbiAgICBpZiAoIWlzUmVkaXJlY3RFcnJvcihlcnJvcikpIHJldHVybiBudWxsO1xuICAgIC8vIFNsaWNlcyBvZmYgdGhlIGJlZ2lubmluZyBvZiB0aGUgZGlnZXN0IHRoYXQgY29udGFpbnMgdGhlIGNvZGUgYW5kIHRoZVxuICAgIC8vIHNlcGFyYXRpbmcgJzsnLlxuICAgIHJldHVybiBlcnJvci5kaWdlc3Quc3BsaXQoXCI7XCIsIDMpWzJdO1xufVxuZnVuY3Rpb24gZ2V0UmVkaXJlY3RUeXBlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgaWYgKCFpc1JlZGlyZWN0RXJyb3IoZXJyb3IpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBhIHJlZGlyZWN0IGVycm9yXCIpO1xuICAgIH1cbiAgICByZXR1cm4gZXJyb3IuZGlnZXN0LnNwbGl0KFwiO1wiLCAzKVsxXTtcbn1cblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVkaXJlY3QuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kdWxlIiwiUmVkaXJlY3RUeXBlIiwiZ2V0UmVkaXJlY3RFcnJvciIsInJlZGlyZWN0IiwiaXNSZWRpcmVjdEVycm9yIiwiZ2V0VVJMRnJvbVJlZGlyZWN0RXJyb3IiLCJnZXRSZWRpcmVjdFR5cGVGcm9tRXJyb3IiLCJfZXhwb3J0IiwidGFyZ2V0IiwiYWxsIiwibmFtZSIsImVudW1lcmFibGUiLCJnZXQiLCJfcmVxdWVzdGFzeW5jc3RvcmFnZSIsInJlcXVpcmUiLCJSRURJUkVDVF9FUlJPUl9DT0RFIiwidXJsIiwidHlwZSIsImVycm9yIiwiRXJyb3IiLCJkaWdlc3QiLCJyZXF1ZXN0U3RvcmUiLCJyZXF1ZXN0QXN5bmNTdG9yYWdlIiwiZ2V0U3RvcmUiLCJtdXRhYmxlQ29va2llcyIsImVycm9yQ29kZSIsImRlc3RpbmF0aW9uIiwic3BsaXQiLCJkZWZhdWx0IiwiX19lc01vZHVsZSIsImFzc2lnbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/client/components/redirect.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/client/components/static-generation-bailout.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/static-generation-bailout.js ***!
  \*******************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"staticGenerationBailout\", ({\n    enumerable: true,\n    get: function() {\n        return staticGenerationBailout;\n    }\n}));\nconst _hooksservercontext = __webpack_require__(/*! ./hooks-server-context */ \"(rsc)/./node_modules/next/dist/client/components/hooks-server-context.js\");\nconst _staticgenerationasyncstorage = __webpack_require__(/*! ./static-generation-async-storage */ \"(shared)/./node_modules/next/dist/client/components/static-generation-async-storage.js\");\nclass StaticGenBailoutError extends Error {\n    constructor(...args){\n        super(...args);\n        this.code = \"NEXT_STATIC_GEN_BAILOUT\";\n    }\n}\nconst staticGenerationBailout = (reason, opts)=>{\n    const staticGenerationStore = _staticgenerationasyncstorage.staticGenerationAsyncStorage.getStore();\n    if (staticGenerationStore == null ? void 0 : staticGenerationStore.forceStatic) {\n        return true;\n    }\n    if (staticGenerationStore == null ? void 0 : staticGenerationStore.dynamicShouldError) {\n        const { dynamic = \"error\", link } = opts || {};\n        const suffix = link ? \" See more info here: \" + link : \"\";\n        throw new StaticGenBailoutError('Page with `dynamic = \"' + dynamic + \"\\\"` couldn't be rendered statically because it used `\" + reason + \"`.\" + suffix);\n    }\n    if (staticGenerationStore) {\n        staticGenerationStore.revalidate = 0;\n    }\n    if (staticGenerationStore == null ? void 0 : staticGenerationStore.isStaticGeneration) {\n        const err = new _hooksservercontext.DynamicServerError(reason);\n        staticGenerationStore.dynamicUsageDescription = reason;\n        staticGenerationStore.dynamicUsageStack = err.stack;\n        throw err;\n    }\n    return false;\n};\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=static-generation-bailout.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL3N0YXRpYy1nZW5lcmF0aW9uLWJhaWxvdXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILDJEQUEwRDtJQUN0REksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLHNCQUFzQkMsbUJBQU9BLENBQUMsd0dBQXdCO0FBQzVELE1BQU1DLGdDQUFnQ0QsbUJBQU9BLENBQUMsaUlBQW1DO0FBQ2pGLE1BQU1FLDhCQUE4QkM7SUFDaENDLFlBQVksR0FBR0MsSUFBSSxDQUFDO1FBQ2hCLEtBQUssSUFBSUE7UUFDVCxJQUFJLENBQUNDLElBQUksR0FBRztJQUNoQjtBQUNKO0FBQ0EsTUFBTVIsMEJBQTBCLENBQUNTLFFBQVFDO0lBQ3JDLE1BQU1DLHdCQUF3QlIsOEJBQThCUyw0QkFBNEIsQ0FBQ0MsUUFBUTtJQUNqRyxJQUFJRix5QkFBeUIsT0FBTyxLQUFLLElBQUlBLHNCQUFzQkcsV0FBVyxFQUFFO1FBQzVFLE9BQU87SUFDWDtJQUNBLElBQUlILHlCQUF5QixPQUFPLEtBQUssSUFBSUEsc0JBQXNCSSxrQkFBa0IsRUFBRTtRQUNuRixNQUFNLEVBQUVDLFVBQVMsT0FBTyxFQUFHQyxJQUFJLEVBQUcsR0FBR1AsUUFBUSxDQUFDO1FBQzlDLE1BQU1RLFNBQVNELE9BQU8sMEJBQTBCQSxPQUFPO1FBQ3ZELE1BQU0sSUFBSWIsc0JBQXNCLDJCQUEyQlksVUFBVSwwREFBMERQLFNBQVMsT0FBT1M7SUFDbko7SUFDQSxJQUFJUCx1QkFBdUI7UUFDdkJBLHNCQUFzQlEsVUFBVSxHQUFHO0lBQ3ZDO0lBQ0EsSUFBSVIseUJBQXlCLE9BQU8sS0FBSyxJQUFJQSxzQkFBc0JTLGtCQUFrQixFQUFFO1FBQ25GLE1BQU1DLE1BQU0sSUFBSXBCLG9CQUFvQnFCLGtCQUFrQixDQUFDYjtRQUN2REUsc0JBQXNCWSx1QkFBdUIsR0FBR2Q7UUFDaERFLHNCQUFzQmEsaUJBQWlCLEdBQUdILElBQUlJLEtBQUs7UUFDbkQsTUFBTUo7SUFDVjtJQUNBLE9BQU87QUFDWDtBQUVBLElBQUksQ0FBQyxPQUFPekIsUUFBUThCLE9BQU8sS0FBSyxjQUFlLE9BQU85QixRQUFROEIsT0FBTyxLQUFLLFlBQVk5QixRQUFROEIsT0FBTyxLQUFLLElBQUksS0FBTSxPQUFPOUIsUUFBUThCLE9BQU8sQ0FBQ0MsVUFBVSxLQUFLLGFBQWE7SUFDcktqQyxPQUFPQyxjQUFjLENBQUNDLFFBQVE4QixPQUFPLEVBQUUsY0FBYztRQUFFN0IsT0FBTztJQUFLO0lBQ25FSCxPQUFPa0MsTUFBTSxDQUFDaEMsUUFBUThCLE9BQU8sRUFBRTlCO0lBQy9CaUMsT0FBT2pDLE9BQU8sR0FBR0EsUUFBUThCLE9BQU87QUFDbEMsRUFFQSxxREFBcUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb29kLWJsb2cvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL3N0YXRpYy1nZW5lcmF0aW9uLWJhaWxvdXQuanM/MDQ2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN0YXRpY0dlbmVyYXRpb25CYWlsb3V0XCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dDtcbiAgICB9XG59KTtcbmNvbnN0IF9ob29rc3NlcnZlcmNvbnRleHQgPSByZXF1aXJlKFwiLi9ob29rcy1zZXJ2ZXItY29udGV4dFwiKTtcbmNvbnN0IF9zdGF0aWNnZW5lcmF0aW9uYXN5bmNzdG9yYWdlID0gcmVxdWlyZShcIi4vc3RhdGljLWdlbmVyYXRpb24tYXN5bmMtc3RvcmFnZVwiKTtcbmNsYXNzIFN0YXRpY0dlbkJhaWxvdXRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvciguLi5hcmdzKXtcbiAgICAgICAgc3VwZXIoLi4uYXJncyk7XG4gICAgICAgIHRoaXMuY29kZSA9IFwiTkVYVF9TVEFUSUNfR0VOX0JBSUxPVVRcIjtcbiAgICB9XG59XG5jb25zdCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCA9IChyZWFzb24sIG9wdHMpPT57XG4gICAgY29uc3Qgc3RhdGljR2VuZXJhdGlvblN0b3JlID0gX3N0YXRpY2dlbmVyYXRpb25hc3luY3N0b3JhZ2Uuc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZS5nZXRTdG9yZSgpO1xuICAgIGlmIChzdGF0aWNHZW5lcmF0aW9uU3RvcmUgPT0gbnVsbCA/IHZvaWQgMCA6IHN0YXRpY0dlbmVyYXRpb25TdG9yZS5mb3JjZVN0YXRpYykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHN0YXRpY0dlbmVyYXRpb25TdG9yZSA9PSBudWxsID8gdm9pZCAwIDogc3RhdGljR2VuZXJhdGlvblN0b3JlLmR5bmFtaWNTaG91bGRFcnJvcikge1xuICAgICAgICBjb25zdCB7IGR5bmFtaWMgPVwiZXJyb3JcIiAsIGxpbmsgIH0gPSBvcHRzIHx8IHt9O1xuICAgICAgICBjb25zdCBzdWZmaXggPSBsaW5rID8gXCIgU2VlIG1vcmUgaW5mbyBoZXJlOiBcIiArIGxpbmsgOiBcIlwiO1xuICAgICAgICB0aHJvdyBuZXcgU3RhdGljR2VuQmFpbG91dEVycm9yKCdQYWdlIHdpdGggYGR5bmFtaWMgPSBcIicgKyBkeW5hbWljICsgXCJcXFwiYCBjb3VsZG4ndCBiZSByZW5kZXJlZCBzdGF0aWNhbGx5IGJlY2F1c2UgaXQgdXNlZCBgXCIgKyByZWFzb24gKyBcImAuXCIgKyBzdWZmaXgpO1xuICAgIH1cbiAgICBpZiAoc3RhdGljR2VuZXJhdGlvblN0b3JlKSB7XG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25TdG9yZS5yZXZhbGlkYXRlID0gMDtcbiAgICB9XG4gICAgaWYgKHN0YXRpY0dlbmVyYXRpb25TdG9yZSA9PSBudWxsID8gdm9pZCAwIDogc3RhdGljR2VuZXJhdGlvblN0b3JlLmlzU3RhdGljR2VuZXJhdGlvbikge1xuICAgICAgICBjb25zdCBlcnIgPSBuZXcgX2hvb2tzc2VydmVyY29udGV4dC5EeW5hbWljU2VydmVyRXJyb3IocmVhc29uKTtcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvblN0b3JlLmR5bmFtaWNVc2FnZURlc2NyaXB0aW9uID0gcmVhc29uO1xuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uU3RvcmUuZHluYW1pY1VzYWdlU3RhY2sgPSBlcnIuc3RhY2s7XG4gICAgICAgIHRocm93IGVycjtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdGljLWdlbmVyYXRpb24tYmFpbG91dC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwic3RhdGljR2VuZXJhdGlvbkJhaWxvdXQiLCJfaG9va3NzZXJ2ZXJjb250ZXh0IiwicmVxdWlyZSIsIl9zdGF0aWNnZW5lcmF0aW9uYXN5bmNzdG9yYWdlIiwiU3RhdGljR2VuQmFpbG91dEVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsImFyZ3MiLCJjb2RlIiwicmVhc29uIiwib3B0cyIsInN0YXRpY0dlbmVyYXRpb25TdG9yZSIsInN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UiLCJnZXRTdG9yZSIsImZvcmNlU3RhdGljIiwiZHluYW1pY1Nob3VsZEVycm9yIiwiZHluYW1pYyIsImxpbmsiLCJzdWZmaXgiLCJyZXZhbGlkYXRlIiwiaXNTdGF0aWNHZW5lcmF0aW9uIiwiZXJyIiwiRHluYW1pY1NlcnZlckVycm9yIiwiZHluYW1pY1VzYWdlRGVzY3JpcHRpb24iLCJkeW5hbWljVXNhZ2VTdGFjayIsInN0YWNrIiwiZGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/client/components/static-generation-bailout.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/@edge-runtime/cookies/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/@edge-runtime/cookies/index.js ***!
  \************************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    RequestCookies: ()=>RequestCookies,\n    ResponseCookies: ()=>ResponseCookies\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/serialize.ts\nfunction serialize(c) {\n    var _a;\n    const attrs = [\n        \"path\" in c && c.path && `Path=${c.path}`,\n        \"expires\" in c && (c.expires || c.expires === 0) && `Expires=${(typeof c.expires === \"number\" ? new Date(c.expires) : c.expires).toUTCString()}`,\n        \"maxAge\" in c && typeof c.maxAge === \"number\" && `Max-Age=${c.maxAge}`,\n        \"domain\" in c && c.domain && `Domain=${c.domain}`,\n        \"secure\" in c && c.secure && \"Secure\",\n        \"httpOnly\" in c && c.httpOnly && \"HttpOnly\",\n        \"sameSite\" in c && c.sameSite && `SameSite=${c.sameSite}`\n    ].filter(Boolean);\n    return `${c.name}=${encodeURIComponent((_a = c.value) != null ? _a : \"\")}; ${attrs.join(\"; \")}`;\n}\nfunction parseCookieString(cookie) {\n    const map = /* @__PURE__ */ new Map();\n    for (const pair of cookie.split(/; */)){\n        if (!pair) continue;\n        const splitAt = pair.indexOf(\"=\");\n        if (splitAt === -1) {\n            map.set(pair, \"true\");\n            continue;\n        }\n        const [key, value] = [\n            pair.slice(0, splitAt),\n            pair.slice(splitAt + 1)\n        ];\n        try {\n            map.set(key, decodeURIComponent(value != null ? value : \"true\"));\n        } catch  {}\n    }\n    return map;\n}\nfunction parseSetCookieString(setCookie) {\n    if (!setCookie) {\n        return void 0;\n    }\n    const [[name, value], ...attributes] = parseCookieString(setCookie);\n    const { domain, expires, httponly, maxage, path, samesite, secure } = Object.fromEntries(attributes.map(([key, value2])=>[\n            key.toLowerCase(),\n            value2\n        ]));\n    const cookie = {\n        name,\n        value: decodeURIComponent(value),\n        domain,\n        ...expires && {\n            expires: new Date(expires)\n        },\n        ...httponly && {\n            httpOnly: true\n        },\n        ...typeof maxage === \"string\" && {\n            maxAge: Number(maxage)\n        },\n        path,\n        ...samesite && {\n            sameSite: parseSameSite(samesite)\n        },\n        ...secure && {\n            secure: true\n        }\n    };\n    return compact(cookie);\n}\nfunction compact(t) {\n    const newT = {};\n    for(const key in t){\n        if (t[key]) {\n            newT[key] = t[key];\n        }\n    }\n    return newT;\n}\nvar SAME_SITE = [\n    \"strict\",\n    \"lax\",\n    \"none\"\n];\nfunction parseSameSite(string) {\n    string = string.toLowerCase();\n    return SAME_SITE.includes(string) ? string : void 0;\n}\n// src/request-cookies.ts\nvar RequestCookies = class {\n    constructor(requestHeaders){\n        /** @internal */ this._parsed = /* @__PURE__ */ new Map();\n        this._headers = requestHeaders;\n        const header = requestHeaders.get(\"cookie\");\n        if (header) {\n            const parsed = parseCookieString(header);\n            for (const [name, value] of parsed){\n                this._parsed.set(name, {\n                    name,\n                    value\n                });\n            }\n        }\n    }\n    [Symbol.iterator]() {\n        return this._parsed[Symbol.iterator]();\n    }\n    /**\n   * The amount of cookies received from the client\n   */ get size() {\n        return this._parsed.size;\n    }\n    get(...args) {\n        const name = typeof args[0] === \"string\" ? args[0] : args[0].name;\n        return this._parsed.get(name);\n    }\n    getAll(...args) {\n        var _a;\n        const all = Array.from(this._parsed);\n        if (!args.length) {\n            return all.map(([_, value])=>value);\n        }\n        const name = typeof args[0] === \"string\" ? args[0] : (_a = args[0]) == null ? void 0 : _a.name;\n        return all.filter(([n])=>n === name).map(([_, value])=>value);\n    }\n    has(name) {\n        return this._parsed.has(name);\n    }\n    set(...args) {\n        const [name, value] = args.length === 1 ? [\n            args[0].name,\n            args[0].value\n        ] : args;\n        const map = this._parsed;\n        map.set(name, {\n            name,\n            value\n        });\n        this._headers.set(\"cookie\", Array.from(map).map(([_, value2])=>serialize(value2)).join(\"; \"));\n        return this;\n    }\n    /**\n   * Delete the cookies matching the passed name or names in the request.\n   */ delete(names) {\n        const map = this._parsed;\n        const result = !Array.isArray(names) ? map.delete(names) : names.map((name)=>map.delete(name));\n        this._headers.set(\"cookie\", Array.from(map).map(([_, value])=>serialize(value)).join(\"; \"));\n        return result;\n    }\n    /**\n   * Delete all the cookies in the cookies in the request.\n   */ clear() {\n        this.delete(Array.from(this._parsed.keys()));\n        return this;\n    }\n    /**\n   * Format the cookies in the request as a string for logging\n   */ [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return `RequestCookies ${JSON.stringify(Object.fromEntries(this._parsed))}`;\n    }\n    toString() {\n        return [\n            ...this._parsed.values()\n        ].map((v)=>`${v.name}=${encodeURIComponent(v.value)}`).join(\"; \");\n    }\n};\n// src/response-cookies.ts\nvar ResponseCookies = class {\n    constructor(responseHeaders){\n        /** @internal */ this._parsed = /* @__PURE__ */ new Map();\n        var _a, _b, _c;\n        this._headers = responseHeaders;\n        const setCookie = // @ts-expect-error See https://github.com/whatwg/fetch/issues/973\n        (_c = (_b = (_a = responseHeaders.getAll) == null ? void 0 : _a.call(responseHeaders, \"set-cookie\")) != null ? _b : responseHeaders.get(\"set-cookie\")) != null ? _c : [];\n        const cookieStrings = Array.isArray(setCookie) ? setCookie : splitCookiesString(setCookie);\n        for (const cookieString of cookieStrings){\n            const parsed = parseSetCookieString(cookieString);\n            if (parsed) this._parsed.set(parsed.name, parsed);\n        }\n    }\n    /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-get CookieStore#get} without the Promise.\n   */ get(...args) {\n        const key = typeof args[0] === \"string\" ? args[0] : args[0].name;\n        return this._parsed.get(key);\n    }\n    /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-getAll CookieStore#getAll} without the Promise.\n   */ getAll(...args) {\n        var _a;\n        const all = Array.from(this._parsed.values());\n        if (!args.length) {\n            return all;\n        }\n        const key = typeof args[0] === \"string\" ? args[0] : (_a = args[0]) == null ? void 0 : _a.name;\n        return all.filter((c)=>c.name === key);\n    }\n    /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-set CookieStore#set} without the Promise.\n   */ set(...args) {\n        const [name, value, cookie] = args.length === 1 ? [\n            args[0].name,\n            args[0].value,\n            args[0]\n        ] : args;\n        const map = this._parsed;\n        map.set(name, normalizeCookie({\n            name,\n            value,\n            ...cookie\n        }));\n        replace(map, this._headers);\n        return this;\n    }\n    /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-delete CookieStore#delete} without the Promise.\n   */ delete(...args) {\n        const name = typeof args[0] === \"string\" ? args[0] : args[0].name;\n        return this.set({\n            name,\n            value: \"\",\n            expires: /* @__PURE__ */ new Date(0)\n        });\n    }\n    [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return `ResponseCookies ${JSON.stringify(Object.fromEntries(this._parsed))}`;\n    }\n    toString() {\n        return [\n            ...this._parsed.values()\n        ].map(serialize).join(\"; \");\n    }\n};\nfunction replace(bag, headers) {\n    headers.delete(\"set-cookie\");\n    for (const [, value] of bag){\n        const serialized = serialize(value);\n        headers.append(\"set-cookie\", serialized);\n    }\n}\nfunction normalizeCookie(cookie = {\n    name: \"\",\n    value: \"\"\n}) {\n    if (typeof cookie.expires === \"number\") {\n        cookie.expires = new Date(cookie.expires);\n    }\n    if (cookie.maxAge) {\n        cookie.expires = new Date(Date.now() + cookie.maxAge * 1e3);\n    }\n    if (cookie.path === null || cookie.path === void 0) {\n        cookie.path = \"/\";\n    }\n    return cookie;\n}\nfunction splitCookiesString(cookiesString) {\n    if (!cookiesString) return [];\n    var cookiesStrings = [];\n    var pos = 0;\n    var start;\n    var ch;\n    var lastComma;\n    var nextStart;\n    var cookiesSeparatorFound;\n    function skipWhitespace() {\n        while(pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))){\n            pos += 1;\n        }\n        return pos < cookiesString.length;\n    }\n    function notSpecialChar() {\n        ch = cookiesString.charAt(pos);\n        return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n    }\n    while(pos < cookiesString.length){\n        start = pos;\n        cookiesSeparatorFound = false;\n        while(skipWhitespace()){\n            ch = cookiesString.charAt(pos);\n            if (ch === \",\") {\n                lastComma = pos;\n                pos += 1;\n                skipWhitespace();\n                nextStart = pos;\n                while(pos < cookiesString.length && notSpecialChar()){\n                    pos += 1;\n                }\n                if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n                    cookiesSeparatorFound = true;\n                    pos = nextStart;\n                    cookiesStrings.push(cookiesString.substring(start, lastComma));\n                    start = pos;\n                } else {\n                    pos = lastComma + 1;\n                }\n            } else {\n                pos += 1;\n            }\n        }\n        if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n            cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n        }\n    }\n    return cookiesStrings;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/@edge-runtime/cookies/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/@opentelemetry/api/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/next/dist/compiled/@opentelemetry/api/index.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("\n(()=>{\n    \"use strict\";\n    var e = {\n        339: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.ContextAPI = void 0;\n            const n = r(44);\n            const a = r(38);\n            const o = r(741);\n            const i = \"context\";\n            const c = new n.NoopContextManager;\n            class ContextAPI {\n                constructor(){}\n                static getInstance() {\n                    if (!this._instance) {\n                        this._instance = new ContextAPI;\n                    }\n                    return this._instance;\n                }\n                setGlobalContextManager(e) {\n                    return (0, a.registerGlobal)(i, e, o.DiagAPI.instance());\n                }\n                active() {\n                    return this._getContextManager().active();\n                }\n                with(e, t, r, ...n) {\n                    return this._getContextManager().with(e, t, r, ...n);\n                }\n                bind(e, t) {\n                    return this._getContextManager().bind(e, t);\n                }\n                _getContextManager() {\n                    return (0, a.getGlobal)(i) || c;\n                }\n                disable() {\n                    this._getContextManager().disable();\n                    (0, a.unregisterGlobal)(i, o.DiagAPI.instance());\n                }\n            }\n            t.ContextAPI = ContextAPI;\n        },\n        741: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.DiagAPI = void 0;\n            const n = r(144);\n            const a = r(871);\n            const o = r(133);\n            const i = r(38);\n            const c = \"diag\";\n            class DiagAPI {\n                constructor(){\n                    function _logProxy(e) {\n                        return function(...t) {\n                            const r = (0, i.getGlobal)(\"diag\");\n                            if (!r) return;\n                            return r[e](...t);\n                        };\n                    }\n                    const e = this;\n                    const setLogger = (t, r = {\n                        logLevel: o.DiagLogLevel.INFO\n                    })=>{\n                        var n, c, s;\n                        if (t === e) {\n                            const t = new Error(\"Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation\");\n                            e.error((n = t.stack) !== null && n !== void 0 ? n : t.message);\n                            return false;\n                        }\n                        if (typeof r === \"number\") {\n                            r = {\n                                logLevel: r\n                            };\n                        }\n                        const u = (0, i.getGlobal)(\"diag\");\n                        const l = (0, a.createLogLevelDiagLogger)((c = r.logLevel) !== null && c !== void 0 ? c : o.DiagLogLevel.INFO, t);\n                        if (u && !r.suppressOverrideMessage) {\n                            const e = (s = (new Error).stack) !== null && s !== void 0 ? s : \"<failed to generate stacktrace>\";\n                            u.warn(`Current logger will be overwritten from ${e}`);\n                            l.warn(`Current logger will overwrite one already registered from ${e}`);\n                        }\n                        return (0, i.registerGlobal)(\"diag\", l, e, true);\n                    };\n                    e.setLogger = setLogger;\n                    e.disable = ()=>{\n                        (0, i.unregisterGlobal)(c, e);\n                    };\n                    e.createComponentLogger = (e)=>new n.DiagComponentLogger(e);\n                    e.verbose = _logProxy(\"verbose\");\n                    e.debug = _logProxy(\"debug\");\n                    e.info = _logProxy(\"info\");\n                    e.warn = _logProxy(\"warn\");\n                    e.error = _logProxy(\"error\");\n                }\n                static instance() {\n                    if (!this._instance) {\n                        this._instance = new DiagAPI;\n                    }\n                    return this._instance;\n                }\n            }\n            t.DiagAPI = DiagAPI;\n        },\n        128: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.MetricsAPI = void 0;\n            const n = r(333);\n            const a = r(38);\n            const o = r(741);\n            const i = \"metrics\";\n            class MetricsAPI {\n                constructor(){}\n                static getInstance() {\n                    if (!this._instance) {\n                        this._instance = new MetricsAPI;\n                    }\n                    return this._instance;\n                }\n                setGlobalMeterProvider(e) {\n                    return (0, a.registerGlobal)(i, e, o.DiagAPI.instance());\n                }\n                getMeterProvider() {\n                    return (0, a.getGlobal)(i) || n.NOOP_METER_PROVIDER;\n                }\n                getMeter(e, t, r) {\n                    return this.getMeterProvider().getMeter(e, t, r);\n                }\n                disable() {\n                    (0, a.unregisterGlobal)(i, o.DiagAPI.instance());\n                }\n            }\n            t.MetricsAPI = MetricsAPI;\n        },\n        930: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.PropagationAPI = void 0;\n            const n = r(38);\n            const a = r(600);\n            const o = r(625);\n            const i = r(377);\n            const c = r(701);\n            const s = r(741);\n            const u = \"propagation\";\n            const l = new a.NoopTextMapPropagator;\n            class PropagationAPI {\n                constructor(){\n                    this.createBaggage = c.createBaggage;\n                    this.getBaggage = i.getBaggage;\n                    this.getActiveBaggage = i.getActiveBaggage;\n                    this.setBaggage = i.setBaggage;\n                    this.deleteBaggage = i.deleteBaggage;\n                }\n                static getInstance() {\n                    if (!this._instance) {\n                        this._instance = new PropagationAPI;\n                    }\n                    return this._instance;\n                }\n                setGlobalPropagator(e) {\n                    return (0, n.registerGlobal)(u, e, s.DiagAPI.instance());\n                }\n                inject(e, t, r = o.defaultTextMapSetter) {\n                    return this._getGlobalPropagator().inject(e, t, r);\n                }\n                extract(e, t, r = o.defaultTextMapGetter) {\n                    return this._getGlobalPropagator().extract(e, t, r);\n                }\n                fields() {\n                    return this._getGlobalPropagator().fields();\n                }\n                disable() {\n                    (0, n.unregisterGlobal)(u, s.DiagAPI.instance());\n                }\n                _getGlobalPropagator() {\n                    return (0, n.getGlobal)(u) || l;\n                }\n            }\n            t.PropagationAPI = PropagationAPI;\n        },\n        967: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.TraceAPI = void 0;\n            const n = r(38);\n            const a = r(414);\n            const o = r(994);\n            const i = r(542);\n            const c = r(741);\n            const s = \"trace\";\n            class TraceAPI {\n                constructor(){\n                    this._proxyTracerProvider = new a.ProxyTracerProvider;\n                    this.wrapSpanContext = o.wrapSpanContext;\n                    this.isSpanContextValid = o.isSpanContextValid;\n                    this.deleteSpan = i.deleteSpan;\n                    this.getSpan = i.getSpan;\n                    this.getActiveSpan = i.getActiveSpan;\n                    this.getSpanContext = i.getSpanContext;\n                    this.setSpan = i.setSpan;\n                    this.setSpanContext = i.setSpanContext;\n                }\n                static getInstance() {\n                    if (!this._instance) {\n                        this._instance = new TraceAPI;\n                    }\n                    return this._instance;\n                }\n                setGlobalTracerProvider(e) {\n                    const t = (0, n.registerGlobal)(s, this._proxyTracerProvider, c.DiagAPI.instance());\n                    if (t) {\n                        this._proxyTracerProvider.setDelegate(e);\n                    }\n                    return t;\n                }\n                getTracerProvider() {\n                    return (0, n.getGlobal)(s) || this._proxyTracerProvider;\n                }\n                getTracer(e, t) {\n                    return this.getTracerProvider().getTracer(e, t);\n                }\n                disable() {\n                    (0, n.unregisterGlobal)(s, c.DiagAPI.instance());\n                    this._proxyTracerProvider = new a.ProxyTracerProvider;\n                }\n            }\n            t.TraceAPI = TraceAPI;\n        },\n        377: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.deleteBaggage = t.setBaggage = t.getActiveBaggage = t.getBaggage = void 0;\n            const n = r(339);\n            const a = r(421);\n            const o = (0, a.createContextKey)(\"OpenTelemetry Baggage Key\");\n            function getBaggage(e) {\n                return e.getValue(o) || undefined;\n            }\n            t.getBaggage = getBaggage;\n            function getActiveBaggage() {\n                return getBaggage(n.ContextAPI.getInstance().active());\n            }\n            t.getActiveBaggage = getActiveBaggage;\n            function setBaggage(e, t) {\n                return e.setValue(o, t);\n            }\n            t.setBaggage = setBaggage;\n            function deleteBaggage(e) {\n                return e.deleteValue(o);\n            }\n            t.deleteBaggage = deleteBaggage;\n        },\n        496: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.BaggageImpl = void 0;\n            class BaggageImpl {\n                constructor(e){\n                    this._entries = e ? new Map(e) : new Map;\n                }\n                getEntry(e) {\n                    const t = this._entries.get(e);\n                    if (!t) {\n                        return undefined;\n                    }\n                    return Object.assign({}, t);\n                }\n                getAllEntries() {\n                    return Array.from(this._entries.entries()).map(([e, t])=>[\n                            e,\n                            t\n                        ]);\n                }\n                setEntry(e, t) {\n                    const r = new BaggageImpl(this._entries);\n                    r._entries.set(e, t);\n                    return r;\n                }\n                removeEntry(e) {\n                    const t = new BaggageImpl(this._entries);\n                    t._entries.delete(e);\n                    return t;\n                }\n                removeEntries(...e) {\n                    const t = new BaggageImpl(this._entries);\n                    for (const r of e){\n                        t._entries.delete(r);\n                    }\n                    return t;\n                }\n                clear() {\n                    return new BaggageImpl;\n                }\n            }\n            t.BaggageImpl = BaggageImpl;\n        },\n        817: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.baggageEntryMetadataSymbol = void 0;\n            t.baggageEntryMetadataSymbol = Symbol(\"BaggageEntryMetadata\");\n        },\n        701: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.baggageEntryMetadataFromString = t.createBaggage = void 0;\n            const n = r(741);\n            const a = r(496);\n            const o = r(817);\n            const i = n.DiagAPI.instance();\n            function createBaggage(e = {}) {\n                return new a.BaggageImpl(new Map(Object.entries(e)));\n            }\n            t.createBaggage = createBaggage;\n            function baggageEntryMetadataFromString(e) {\n                if (typeof e !== \"string\") {\n                    i.error(`Cannot create baggage metadata from unknown type: ${typeof e}`);\n                    e = \"\";\n                }\n                return {\n                    __TYPE__: o.baggageEntryMetadataSymbol,\n                    toString () {\n                        return e;\n                    }\n                };\n            }\n            t.baggageEntryMetadataFromString = baggageEntryMetadataFromString;\n        },\n        388: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.context = void 0;\n            const n = r(339);\n            t.context = n.ContextAPI.getInstance();\n        },\n        44: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.NoopContextManager = void 0;\n            const n = r(421);\n            class NoopContextManager {\n                active() {\n                    return n.ROOT_CONTEXT;\n                }\n                with(e, t, r, ...n) {\n                    return t.call(r, ...n);\n                }\n                bind(e, t) {\n                    return t;\n                }\n                enable() {\n                    return this;\n                }\n                disable() {\n                    return this;\n                }\n            }\n            t.NoopContextManager = NoopContextManager;\n        },\n        421: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.ROOT_CONTEXT = t.createContextKey = void 0;\n            function createContextKey(e) {\n                return Symbol.for(e);\n            }\n            t.createContextKey = createContextKey;\n            class BaseContext {\n                constructor(e){\n                    const t = this;\n                    t._currentContext = e ? new Map(e) : new Map;\n                    t.getValue = (e)=>t._currentContext.get(e);\n                    t.setValue = (e, r)=>{\n                        const n = new BaseContext(t._currentContext);\n                        n._currentContext.set(e, r);\n                        return n;\n                    };\n                    t.deleteValue = (e)=>{\n                        const r = new BaseContext(t._currentContext);\n                        r._currentContext.delete(e);\n                        return r;\n                    };\n                }\n            }\n            t.ROOT_CONTEXT = new BaseContext;\n        },\n        920: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.diag = void 0;\n            const n = r(741);\n            t.diag = n.DiagAPI.instance();\n        },\n        144: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.DiagComponentLogger = void 0;\n            const n = r(38);\n            class DiagComponentLogger {\n                constructor(e){\n                    this._namespace = e.namespace || \"DiagComponentLogger\";\n                }\n                debug(...e) {\n                    return logProxy(\"debug\", this._namespace, e);\n                }\n                error(...e) {\n                    return logProxy(\"error\", this._namespace, e);\n                }\n                info(...e) {\n                    return logProxy(\"info\", this._namespace, e);\n                }\n                warn(...e) {\n                    return logProxy(\"warn\", this._namespace, e);\n                }\n                verbose(...e) {\n                    return logProxy(\"verbose\", this._namespace, e);\n                }\n            }\n            t.DiagComponentLogger = DiagComponentLogger;\n            function logProxy(e, t, r) {\n                const a = (0, n.getGlobal)(\"diag\");\n                if (!a) {\n                    return;\n                }\n                r.unshift(t);\n                return a[e](...r);\n            }\n        },\n        689: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.DiagConsoleLogger = void 0;\n            const r = [\n                {\n                    n: \"error\",\n                    c: \"error\"\n                },\n                {\n                    n: \"warn\",\n                    c: \"warn\"\n                },\n                {\n                    n: \"info\",\n                    c: \"info\"\n                },\n                {\n                    n: \"debug\",\n                    c: \"debug\"\n                },\n                {\n                    n: \"verbose\",\n                    c: \"trace\"\n                }\n            ];\n            class DiagConsoleLogger {\n                constructor(){\n                    function _consoleFunc(e) {\n                        return function(...t) {\n                            if (console) {\n                                let r = console[e];\n                                if (typeof r !== \"function\") {\n                                    r = console.log;\n                                }\n                                if (typeof r === \"function\") {\n                                    return r.apply(console, t);\n                                }\n                            }\n                        };\n                    }\n                    for(let e = 0; e < r.length; e++){\n                        this[r[e].n] = _consoleFunc(r[e].c);\n                    }\n                }\n            }\n            t.DiagConsoleLogger = DiagConsoleLogger;\n        },\n        871: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.createLogLevelDiagLogger = void 0;\n            const n = r(133);\n            function createLogLevelDiagLogger(e, t) {\n                if (e < n.DiagLogLevel.NONE) {\n                    e = n.DiagLogLevel.NONE;\n                } else if (e > n.DiagLogLevel.ALL) {\n                    e = n.DiagLogLevel.ALL;\n                }\n                t = t || {};\n                function _filterFunc(r, n) {\n                    const a = t[r];\n                    if (typeof a === \"function\" && e >= n) {\n                        return a.bind(t);\n                    }\n                    return function() {};\n                }\n                return {\n                    error: _filterFunc(\"error\", n.DiagLogLevel.ERROR),\n                    warn: _filterFunc(\"warn\", n.DiagLogLevel.WARN),\n                    info: _filterFunc(\"info\", n.DiagLogLevel.INFO),\n                    debug: _filterFunc(\"debug\", n.DiagLogLevel.DEBUG),\n                    verbose: _filterFunc(\"verbose\", n.DiagLogLevel.VERBOSE)\n                };\n            }\n            t.createLogLevelDiagLogger = createLogLevelDiagLogger;\n        },\n        133: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.DiagLogLevel = void 0;\n            var r;\n            (function(e) {\n                e[e[\"NONE\"] = 0] = \"NONE\";\n                e[e[\"ERROR\"] = 30] = \"ERROR\";\n                e[e[\"WARN\"] = 50] = \"WARN\";\n                e[e[\"INFO\"] = 60] = \"INFO\";\n                e[e[\"DEBUG\"] = 70] = \"DEBUG\";\n                e[e[\"VERBOSE\"] = 80] = \"VERBOSE\";\n                e[e[\"ALL\"] = 9999] = \"ALL\";\n            })(r = t.DiagLogLevel || (t.DiagLogLevel = {}));\n        },\n        38: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.unregisterGlobal = t.getGlobal = t.registerGlobal = void 0;\n            const n = r(966);\n            const a = r(520);\n            const o = r(565);\n            const i = a.VERSION.split(\".\")[0];\n            const c = Symbol.for(`opentelemetry.js.api.${i}`);\n            const s = n._globalThis;\n            function registerGlobal(e, t, r, n = false) {\n                var o;\n                const i = s[c] = (o = s[c]) !== null && o !== void 0 ? o : {\n                    version: a.VERSION\n                };\n                if (!n && i[e]) {\n                    const t = new Error(`@opentelemetry/api: Attempted duplicate registration of API: ${e}`);\n                    r.error(t.stack || t.message);\n                    return false;\n                }\n                if (i.version !== a.VERSION) {\n                    const t = new Error(`@opentelemetry/api: Registration of version v${i.version} for ${e} does not match previously registered API v${a.VERSION}`);\n                    r.error(t.stack || t.message);\n                    return false;\n                }\n                i[e] = t;\n                r.debug(`@opentelemetry/api: Registered a global for ${e} v${a.VERSION}.`);\n                return true;\n            }\n            t.registerGlobal = registerGlobal;\n            function getGlobal(e) {\n                var t, r;\n                const n = (t = s[c]) === null || t === void 0 ? void 0 : t.version;\n                if (!n || !(0, o.isCompatible)(n)) {\n                    return;\n                }\n                return (r = s[c]) === null || r === void 0 ? void 0 : r[e];\n            }\n            t.getGlobal = getGlobal;\n            function unregisterGlobal(e, t) {\n                t.debug(`@opentelemetry/api: Unregistering a global for ${e} v${a.VERSION}.`);\n                const r = s[c];\n                if (r) {\n                    delete r[e];\n                }\n            }\n            t.unregisterGlobal = unregisterGlobal;\n        },\n        565: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.isCompatible = t._makeCompatibilityCheck = void 0;\n            const n = r(520);\n            const a = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\n            function _makeCompatibilityCheck(e) {\n                const t = new Set([\n                    e\n                ]);\n                const r = new Set;\n                const n = e.match(a);\n                if (!n) {\n                    return ()=>false;\n                }\n                const o = {\n                    major: +n[1],\n                    minor: +n[2],\n                    patch: +n[3],\n                    prerelease: n[4]\n                };\n                if (o.prerelease != null) {\n                    return function isExactmatch(t) {\n                        return t === e;\n                    };\n                }\n                function _reject(e) {\n                    r.add(e);\n                    return false;\n                }\n                function _accept(e) {\n                    t.add(e);\n                    return true;\n                }\n                return function isCompatible(e) {\n                    if (t.has(e)) {\n                        return true;\n                    }\n                    if (r.has(e)) {\n                        return false;\n                    }\n                    const n = e.match(a);\n                    if (!n) {\n                        return _reject(e);\n                    }\n                    const i = {\n                        major: +n[1],\n                        minor: +n[2],\n                        patch: +n[3],\n                        prerelease: n[4]\n                    };\n                    if (i.prerelease != null) {\n                        return _reject(e);\n                    }\n                    if (o.major !== i.major) {\n                        return _reject(e);\n                    }\n                    if (o.major === 0) {\n                        if (o.minor === i.minor && o.patch <= i.patch) {\n                            return _accept(e);\n                        }\n                        return _reject(e);\n                    }\n                    if (o.minor <= i.minor) {\n                        return _accept(e);\n                    }\n                    return _reject(e);\n                };\n            }\n            t._makeCompatibilityCheck = _makeCompatibilityCheck;\n            t.isCompatible = _makeCompatibilityCheck(n.VERSION);\n        },\n        934: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.metrics = void 0;\n            const n = r(128);\n            t.metrics = n.MetricsAPI.getInstance();\n        },\n        28: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.ValueType = void 0;\n            var r;\n            (function(e) {\n                e[e[\"INT\"] = 0] = \"INT\";\n                e[e[\"DOUBLE\"] = 1] = \"DOUBLE\";\n            })(r = t.ValueType || (t.ValueType = {}));\n        },\n        962: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.createNoopMeter = t.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = t.NOOP_OBSERVABLE_GAUGE_METRIC = t.NOOP_OBSERVABLE_COUNTER_METRIC = t.NOOP_UP_DOWN_COUNTER_METRIC = t.NOOP_HISTOGRAM_METRIC = t.NOOP_COUNTER_METRIC = t.NOOP_METER = t.NoopObservableUpDownCounterMetric = t.NoopObservableGaugeMetric = t.NoopObservableCounterMetric = t.NoopObservableMetric = t.NoopHistogramMetric = t.NoopUpDownCounterMetric = t.NoopCounterMetric = t.NoopMetric = t.NoopMeter = void 0;\n            class NoopMeter {\n                constructor(){}\n                createHistogram(e, r) {\n                    return t.NOOP_HISTOGRAM_METRIC;\n                }\n                createCounter(e, r) {\n                    return t.NOOP_COUNTER_METRIC;\n                }\n                createUpDownCounter(e, r) {\n                    return t.NOOP_UP_DOWN_COUNTER_METRIC;\n                }\n                createObservableGauge(e, r) {\n                    return t.NOOP_OBSERVABLE_GAUGE_METRIC;\n                }\n                createObservableCounter(e, r) {\n                    return t.NOOP_OBSERVABLE_COUNTER_METRIC;\n                }\n                createObservableUpDownCounter(e, r) {\n                    return t.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;\n                }\n                addBatchObservableCallback(e, t) {}\n                removeBatchObservableCallback(e) {}\n            }\n            t.NoopMeter = NoopMeter;\n            class NoopMetric {\n            }\n            t.NoopMetric = NoopMetric;\n            class NoopCounterMetric extends NoopMetric {\n                add(e, t) {}\n            }\n            t.NoopCounterMetric = NoopCounterMetric;\n            class NoopUpDownCounterMetric extends NoopMetric {\n                add(e, t) {}\n            }\n            t.NoopUpDownCounterMetric = NoopUpDownCounterMetric;\n            class NoopHistogramMetric extends NoopMetric {\n                record(e, t) {}\n            }\n            t.NoopHistogramMetric = NoopHistogramMetric;\n            class NoopObservableMetric {\n                addCallback(e) {}\n                removeCallback(e) {}\n            }\n            t.NoopObservableMetric = NoopObservableMetric;\n            class NoopObservableCounterMetric extends NoopObservableMetric {\n            }\n            t.NoopObservableCounterMetric = NoopObservableCounterMetric;\n            class NoopObservableGaugeMetric extends NoopObservableMetric {\n            }\n            t.NoopObservableGaugeMetric = NoopObservableGaugeMetric;\n            class NoopObservableUpDownCounterMetric extends NoopObservableMetric {\n            }\n            t.NoopObservableUpDownCounterMetric = NoopObservableUpDownCounterMetric;\n            t.NOOP_METER = new NoopMeter;\n            t.NOOP_COUNTER_METRIC = new NoopCounterMetric;\n            t.NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric;\n            t.NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric;\n            t.NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableCounterMetric;\n            t.NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableGaugeMetric;\n            t.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = new NoopObservableUpDownCounterMetric;\n            function createNoopMeter() {\n                return t.NOOP_METER;\n            }\n            t.createNoopMeter = createNoopMeter;\n        },\n        333: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.NOOP_METER_PROVIDER = t.NoopMeterProvider = void 0;\n            const n = r(962);\n            class NoopMeterProvider {\n                getMeter(e, t, r) {\n                    return n.NOOP_METER;\n                }\n            }\n            t.NoopMeterProvider = NoopMeterProvider;\n            t.NOOP_METER_PROVIDER = new NoopMeterProvider;\n        },\n        966: function(e, t, r) {\n            var n = this && this.__createBinding || (Object.create ? function(e, t, r, n) {\n                if (n === undefined) n = r;\n                Object.defineProperty(e, n, {\n                    enumerable: true,\n                    get: function() {\n                        return t[r];\n                    }\n                });\n            } : function(e, t, r, n) {\n                if (n === undefined) n = r;\n                e[n] = t[r];\n            });\n            var a = this && this.__exportStar || function(e, t) {\n                for(var r in e)if (r !== \"default\" && !Object.prototype.hasOwnProperty.call(t, r)) n(t, e, r);\n            };\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            a(r(652), t);\n        },\n        385: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t._globalThis = void 0;\n            t._globalThis = typeof globalThis === \"object\" ? globalThis : global;\n        },\n        652: function(e, t, r) {\n            var n = this && this.__createBinding || (Object.create ? function(e, t, r, n) {\n                if (n === undefined) n = r;\n                Object.defineProperty(e, n, {\n                    enumerable: true,\n                    get: function() {\n                        return t[r];\n                    }\n                });\n            } : function(e, t, r, n) {\n                if (n === undefined) n = r;\n                e[n] = t[r];\n            });\n            var a = this && this.__exportStar || function(e, t) {\n                for(var r in e)if (r !== \"default\" && !Object.prototype.hasOwnProperty.call(t, r)) n(t, e, r);\n            };\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            a(r(385), t);\n        },\n        251: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.propagation = void 0;\n            const n = r(930);\n            t.propagation = n.PropagationAPI.getInstance();\n        },\n        600: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.NoopTextMapPropagator = void 0;\n            class NoopTextMapPropagator {\n                inject(e, t) {}\n                extract(e, t) {\n                    return e;\n                }\n                fields() {\n                    return [];\n                }\n            }\n            t.NoopTextMapPropagator = NoopTextMapPropagator;\n        },\n        625: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.defaultTextMapSetter = t.defaultTextMapGetter = void 0;\n            t.defaultTextMapGetter = {\n                get (e, t) {\n                    if (e == null) {\n                        return undefined;\n                    }\n                    return e[t];\n                },\n                keys (e) {\n                    if (e == null) {\n                        return [];\n                    }\n                    return Object.keys(e);\n                }\n            };\n            t.defaultTextMapSetter = {\n                set (e, t, r) {\n                    if (e == null) {\n                        return;\n                    }\n                    e[t] = r;\n                }\n            };\n        },\n        978: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.trace = void 0;\n            const n = r(967);\n            t.trace = n.TraceAPI.getInstance();\n        },\n        76: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.NonRecordingSpan = void 0;\n            const n = r(304);\n            class NonRecordingSpan {\n                constructor(e = n.INVALID_SPAN_CONTEXT){\n                    this._spanContext = e;\n                }\n                spanContext() {\n                    return this._spanContext;\n                }\n                setAttribute(e, t) {\n                    return this;\n                }\n                setAttributes(e) {\n                    return this;\n                }\n                addEvent(e, t) {\n                    return this;\n                }\n                setStatus(e) {\n                    return this;\n                }\n                updateName(e) {\n                    return this;\n                }\n                end(e) {}\n                isRecording() {\n                    return false;\n                }\n                recordException(e, t) {}\n            }\n            t.NonRecordingSpan = NonRecordingSpan;\n        },\n        527: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.NoopTracer = void 0;\n            const n = r(339);\n            const a = r(542);\n            const o = r(76);\n            const i = r(994);\n            const c = n.ContextAPI.getInstance();\n            class NoopTracer {\n                startSpan(e, t, r = c.active()) {\n                    const n = Boolean(t === null || t === void 0 ? void 0 : t.root);\n                    if (n) {\n                        return new o.NonRecordingSpan;\n                    }\n                    const s = r && (0, a.getSpanContext)(r);\n                    if (isSpanContext(s) && (0, i.isSpanContextValid)(s)) {\n                        return new o.NonRecordingSpan(s);\n                    } else {\n                        return new o.NonRecordingSpan;\n                    }\n                }\n                startActiveSpan(e, t, r, n) {\n                    let o;\n                    let i;\n                    let s;\n                    if (arguments.length < 2) {\n                        return;\n                    } else if (arguments.length === 2) {\n                        s = t;\n                    } else if (arguments.length === 3) {\n                        o = t;\n                        s = r;\n                    } else {\n                        o = t;\n                        i = r;\n                        s = n;\n                    }\n                    const u = i !== null && i !== void 0 ? i : c.active();\n                    const l = this.startSpan(e, o, u);\n                    const g = (0, a.setSpan)(u, l);\n                    return c.with(g, s, undefined, l);\n                }\n            }\n            t.NoopTracer = NoopTracer;\n            function isSpanContext(e) {\n                return typeof e === \"object\" && typeof e[\"spanId\"] === \"string\" && typeof e[\"traceId\"] === \"string\" && typeof e[\"traceFlags\"] === \"number\";\n            }\n        },\n        228: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.NoopTracerProvider = void 0;\n            const n = r(527);\n            class NoopTracerProvider {\n                getTracer(e, t, r) {\n                    return new n.NoopTracer;\n                }\n            }\n            t.NoopTracerProvider = NoopTracerProvider;\n        },\n        387: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.ProxyTracer = void 0;\n            const n = r(527);\n            const a = new n.NoopTracer;\n            class ProxyTracer {\n                constructor(e, t, r, n){\n                    this._provider = e;\n                    this.name = t;\n                    this.version = r;\n                    this.options = n;\n                }\n                startSpan(e, t, r) {\n                    return this._getTracer().startSpan(e, t, r);\n                }\n                startActiveSpan(e, t, r, n) {\n                    const a = this._getTracer();\n                    return Reflect.apply(a.startActiveSpan, a, arguments);\n                }\n                _getTracer() {\n                    if (this._delegate) {\n                        return this._delegate;\n                    }\n                    const e = this._provider.getDelegateTracer(this.name, this.version, this.options);\n                    if (!e) {\n                        return a;\n                    }\n                    this._delegate = e;\n                    return this._delegate;\n                }\n            }\n            t.ProxyTracer = ProxyTracer;\n        },\n        414: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.ProxyTracerProvider = void 0;\n            const n = r(387);\n            const a = r(228);\n            const o = new a.NoopTracerProvider;\n            class ProxyTracerProvider {\n                getTracer(e, t, r) {\n                    var a;\n                    return (a = this.getDelegateTracer(e, t, r)) !== null && a !== void 0 ? a : new n.ProxyTracer(this, e, t, r);\n                }\n                getDelegate() {\n                    var e;\n                    return (e = this._delegate) !== null && e !== void 0 ? e : o;\n                }\n                setDelegate(e) {\n                    this._delegate = e;\n                }\n                getDelegateTracer(e, t, r) {\n                    var n;\n                    return (n = this._delegate) === null || n === void 0 ? void 0 : n.getTracer(e, t, r);\n                }\n            }\n            t.ProxyTracerProvider = ProxyTracerProvider;\n        },\n        505: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.SamplingDecision = void 0;\n            var r;\n            (function(e) {\n                e[e[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n                e[e[\"RECORD\"] = 1] = \"RECORD\";\n                e[e[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n            })(r = t.SamplingDecision || (t.SamplingDecision = {}));\n        },\n        542: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.getSpanContext = t.setSpanContext = t.deleteSpan = t.setSpan = t.getActiveSpan = t.getSpan = void 0;\n            const n = r(421);\n            const a = r(76);\n            const o = r(339);\n            const i = (0, n.createContextKey)(\"OpenTelemetry Context Key SPAN\");\n            function getSpan(e) {\n                return e.getValue(i) || undefined;\n            }\n            t.getSpan = getSpan;\n            function getActiveSpan() {\n                return getSpan(o.ContextAPI.getInstance().active());\n            }\n            t.getActiveSpan = getActiveSpan;\n            function setSpan(e, t) {\n                return e.setValue(i, t);\n            }\n            t.setSpan = setSpan;\n            function deleteSpan(e) {\n                return e.deleteValue(i);\n            }\n            t.deleteSpan = deleteSpan;\n            function setSpanContext(e, t) {\n                return setSpan(e, new a.NonRecordingSpan(t));\n            }\n            t.setSpanContext = setSpanContext;\n            function getSpanContext(e) {\n                var t;\n                return (t = getSpan(e)) === null || t === void 0 ? void 0 : t.spanContext();\n            }\n            t.getSpanContext = getSpanContext;\n        },\n        430: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.TraceStateImpl = void 0;\n            const n = r(450);\n            const a = 32;\n            const o = 512;\n            const i = \",\";\n            const c = \"=\";\n            class TraceStateImpl {\n                constructor(e){\n                    this._internalState = new Map;\n                    if (e) this._parse(e);\n                }\n                set(e, t) {\n                    const r = this._clone();\n                    if (r._internalState.has(e)) {\n                        r._internalState.delete(e);\n                    }\n                    r._internalState.set(e, t);\n                    return r;\n                }\n                unset(e) {\n                    const t = this._clone();\n                    t._internalState.delete(e);\n                    return t;\n                }\n                get(e) {\n                    return this._internalState.get(e);\n                }\n                serialize() {\n                    return this._keys().reduce((e, t)=>{\n                        e.push(t + c + this.get(t));\n                        return e;\n                    }, []).join(i);\n                }\n                _parse(e) {\n                    if (e.length > o) return;\n                    this._internalState = e.split(i).reverse().reduce((e, t)=>{\n                        const r = t.trim();\n                        const a = r.indexOf(c);\n                        if (a !== -1) {\n                            const o = r.slice(0, a);\n                            const i = r.slice(a + 1, t.length);\n                            if ((0, n.validateKey)(o) && (0, n.validateValue)(i)) {\n                                e.set(o, i);\n                            } else {}\n                        }\n                        return e;\n                    }, new Map);\n                    if (this._internalState.size > a) {\n                        this._internalState = new Map(Array.from(this._internalState.entries()).reverse().slice(0, a));\n                    }\n                }\n                _keys() {\n                    return Array.from(this._internalState.keys()).reverse();\n                }\n                _clone() {\n                    const e = new TraceStateImpl;\n                    e._internalState = new Map(this._internalState);\n                    return e;\n                }\n            }\n            t.TraceStateImpl = TraceStateImpl;\n        },\n        450: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.validateValue = t.validateKey = void 0;\n            const r = \"[_0-9a-z-*/]\";\n            const n = `[a-z]${r}{0,255}`;\n            const a = `[a-z0-9]${r}{0,240}@[a-z]${r}{0,13}`;\n            const o = new RegExp(`^(?:${n}|${a})$`);\n            const i = /^[ -~]{0,255}[!-~]$/;\n            const c = /,|=/;\n            function validateKey(e) {\n                return o.test(e);\n            }\n            t.validateKey = validateKey;\n            function validateValue(e) {\n                return i.test(e) && !c.test(e);\n            }\n            t.validateValue = validateValue;\n        },\n        757: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.createTraceState = void 0;\n            const n = r(430);\n            function createTraceState(e) {\n                return new n.TraceStateImpl(e);\n            }\n            t.createTraceState = createTraceState;\n        },\n        304: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.INVALID_SPAN_CONTEXT = t.INVALID_TRACEID = t.INVALID_SPANID = void 0;\n            const n = r(762);\n            t.INVALID_SPANID = \"0000000000000000\";\n            t.INVALID_TRACEID = \"00000000000000000000000000000000\";\n            t.INVALID_SPAN_CONTEXT = {\n                traceId: t.INVALID_TRACEID,\n                spanId: t.INVALID_SPANID,\n                traceFlags: n.TraceFlags.NONE\n            };\n        },\n        902: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.SpanKind = void 0;\n            var r;\n            (function(e) {\n                e[e[\"INTERNAL\"] = 0] = \"INTERNAL\";\n                e[e[\"SERVER\"] = 1] = \"SERVER\";\n                e[e[\"CLIENT\"] = 2] = \"CLIENT\";\n                e[e[\"PRODUCER\"] = 3] = \"PRODUCER\";\n                e[e[\"CONSUMER\"] = 4] = \"CONSUMER\";\n            })(r = t.SpanKind || (t.SpanKind = {}));\n        },\n        994: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.wrapSpanContext = t.isSpanContextValid = t.isValidSpanId = t.isValidTraceId = void 0;\n            const n = r(304);\n            const a = r(76);\n            const o = /^([0-9a-f]{32})$/i;\n            const i = /^[0-9a-f]{16}$/i;\n            function isValidTraceId(e) {\n                return o.test(e) && e !== n.INVALID_TRACEID;\n            }\n            t.isValidTraceId = isValidTraceId;\n            function isValidSpanId(e) {\n                return i.test(e) && e !== n.INVALID_SPANID;\n            }\n            t.isValidSpanId = isValidSpanId;\n            function isSpanContextValid(e) {\n                return isValidTraceId(e.traceId) && isValidSpanId(e.spanId);\n            }\n            t.isSpanContextValid = isSpanContextValid;\n            function wrapSpanContext(e) {\n                return new a.NonRecordingSpan(e);\n            }\n            t.wrapSpanContext = wrapSpanContext;\n        },\n        832: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.SpanStatusCode = void 0;\n            var r;\n            (function(e) {\n                e[e[\"UNSET\"] = 0] = \"UNSET\";\n                e[e[\"OK\"] = 1] = \"OK\";\n                e[e[\"ERROR\"] = 2] = \"ERROR\";\n            })(r = t.SpanStatusCode || (t.SpanStatusCode = {}));\n        },\n        762: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.TraceFlags = void 0;\n            var r;\n            (function(e) {\n                e[e[\"NONE\"] = 0] = \"NONE\";\n                e[e[\"SAMPLED\"] = 1] = \"SAMPLED\";\n            })(r = t.TraceFlags || (t.TraceFlags = {}));\n        },\n        520: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.VERSION = void 0;\n            t.VERSION = \"1.4.1\";\n        }\n    };\n    var t = {};\n    function __nccwpck_require__(r) {\n        var n = t[r];\n        if (n !== undefined) {\n            return n.exports;\n        }\n        var a = t[r] = {\n            exports: {}\n        };\n        var o = true;\n        try {\n            e[r].call(a.exports, a, a.exports, __nccwpck_require__);\n            o = false;\n        } finally{\n            if (o) delete t[r];\n        }\n        return a.exports;\n    }\n    if (typeof __nccwpck_require__ !== \"undefined\") __nccwpck_require__.ab = __dirname + \"/\";\n    var r = {};\n    (()=>{\n        var e = r;\n        Object.defineProperty(e, \"__esModule\", {\n            value: true\n        });\n        e.trace = e.propagation = e.metrics = e.diag = e.context = e.INVALID_SPAN_CONTEXT = e.INVALID_TRACEID = e.INVALID_SPANID = e.isValidSpanId = e.isValidTraceId = e.isSpanContextValid = e.createTraceState = e.TraceFlags = e.SpanStatusCode = e.SpanKind = e.SamplingDecision = e.ProxyTracerProvider = e.ProxyTracer = e.defaultTextMapSetter = e.defaultTextMapGetter = e.ValueType = e.createNoopMeter = e.DiagLogLevel = e.DiagConsoleLogger = e.ROOT_CONTEXT = e.createContextKey = e.baggageEntryMetadataFromString = void 0;\n        var t = __nccwpck_require__(701);\n        Object.defineProperty(e, \"baggageEntryMetadataFromString\", {\n            enumerable: true,\n            get: function() {\n                return t.baggageEntryMetadataFromString;\n            }\n        });\n        var n = __nccwpck_require__(421);\n        Object.defineProperty(e, \"createContextKey\", {\n            enumerable: true,\n            get: function() {\n                return n.createContextKey;\n            }\n        });\n        Object.defineProperty(e, \"ROOT_CONTEXT\", {\n            enumerable: true,\n            get: function() {\n                return n.ROOT_CONTEXT;\n            }\n        });\n        var a = __nccwpck_require__(689);\n        Object.defineProperty(e, \"DiagConsoleLogger\", {\n            enumerable: true,\n            get: function() {\n                return a.DiagConsoleLogger;\n            }\n        });\n        var o = __nccwpck_require__(133);\n        Object.defineProperty(e, \"DiagLogLevel\", {\n            enumerable: true,\n            get: function() {\n                return o.DiagLogLevel;\n            }\n        });\n        var i = __nccwpck_require__(962);\n        Object.defineProperty(e, \"createNoopMeter\", {\n            enumerable: true,\n            get: function() {\n                return i.createNoopMeter;\n            }\n        });\n        var c = __nccwpck_require__(28);\n        Object.defineProperty(e, \"ValueType\", {\n            enumerable: true,\n            get: function() {\n                return c.ValueType;\n            }\n        });\n        var s = __nccwpck_require__(625);\n        Object.defineProperty(e, \"defaultTextMapGetter\", {\n            enumerable: true,\n            get: function() {\n                return s.defaultTextMapGetter;\n            }\n        });\n        Object.defineProperty(e, \"defaultTextMapSetter\", {\n            enumerable: true,\n            get: function() {\n                return s.defaultTextMapSetter;\n            }\n        });\n        var u = __nccwpck_require__(387);\n        Object.defineProperty(e, \"ProxyTracer\", {\n            enumerable: true,\n            get: function() {\n                return u.ProxyTracer;\n            }\n        });\n        var l = __nccwpck_require__(414);\n        Object.defineProperty(e, \"ProxyTracerProvider\", {\n            enumerable: true,\n            get: function() {\n                return l.ProxyTracerProvider;\n            }\n        });\n        var g = __nccwpck_require__(505);\n        Object.defineProperty(e, \"SamplingDecision\", {\n            enumerable: true,\n            get: function() {\n                return g.SamplingDecision;\n            }\n        });\n        var p = __nccwpck_require__(902);\n        Object.defineProperty(e, \"SpanKind\", {\n            enumerable: true,\n            get: function() {\n                return p.SpanKind;\n            }\n        });\n        var d = __nccwpck_require__(832);\n        Object.defineProperty(e, \"SpanStatusCode\", {\n            enumerable: true,\n            get: function() {\n                return d.SpanStatusCode;\n            }\n        });\n        var _ = __nccwpck_require__(762);\n        Object.defineProperty(e, \"TraceFlags\", {\n            enumerable: true,\n            get: function() {\n                return _.TraceFlags;\n            }\n        });\n        var f = __nccwpck_require__(757);\n        Object.defineProperty(e, \"createTraceState\", {\n            enumerable: true,\n            get: function() {\n                return f.createTraceState;\n            }\n        });\n        var b = __nccwpck_require__(994);\n        Object.defineProperty(e, \"isSpanContextValid\", {\n            enumerable: true,\n            get: function() {\n                return b.isSpanContextValid;\n            }\n        });\n        Object.defineProperty(e, \"isValidTraceId\", {\n            enumerable: true,\n            get: function() {\n                return b.isValidTraceId;\n            }\n        });\n        Object.defineProperty(e, \"isValidSpanId\", {\n            enumerable: true,\n            get: function() {\n                return b.isValidSpanId;\n            }\n        });\n        var v = __nccwpck_require__(304);\n        Object.defineProperty(e, \"INVALID_SPANID\", {\n            enumerable: true,\n            get: function() {\n                return v.INVALID_SPANID;\n            }\n        });\n        Object.defineProperty(e, \"INVALID_TRACEID\", {\n            enumerable: true,\n            get: function() {\n                return v.INVALID_TRACEID;\n            }\n        });\n        Object.defineProperty(e, \"INVALID_SPAN_CONTEXT\", {\n            enumerable: true,\n            get: function() {\n                return v.INVALID_SPAN_CONTEXT;\n            }\n        });\n        const O = __nccwpck_require__(388);\n        Object.defineProperty(e, \"context\", {\n            enumerable: true,\n            get: function() {\n                return O.context;\n            }\n        });\n        const P = __nccwpck_require__(920);\n        Object.defineProperty(e, \"diag\", {\n            enumerable: true,\n            get: function() {\n                return P.diag;\n            }\n        });\n        const N = __nccwpck_require__(934);\n        Object.defineProperty(e, \"metrics\", {\n            enumerable: true,\n            get: function() {\n                return N.metrics;\n            }\n        });\n        const S = __nccwpck_require__(251);\n        Object.defineProperty(e, \"propagation\", {\n            enumerable: true,\n            get: function() {\n                return S.propagation;\n            }\n        });\n        const C = __nccwpck_require__(978);\n        Object.defineProperty(e, \"trace\", {\n            enumerable: true,\n            get: function() {\n                return C.trace;\n            }\n        });\n        e[\"default\"] = {\n            context: O.context,\n            diag: P.diag,\n            metrics: N.metrics,\n            propagation: S.propagation,\n            trace: C.trace\n        };\n    })();\n    module.exports = r;\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/@opentelemetry/api/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/chalk/index.js":
/*!********************************************************!*\
  !*** ./node_modules/next/dist/compiled/chalk/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n(()=>{\n    var r = {\n        535: (r, e, n)=>{\n            \"use strict\";\n            r = n.nmd(r);\n            const t = n(54);\n            const wrapAnsi16 = (r, e)=>function() {\n                    const n = r.apply(t, arguments);\n                    return `\u001b[${n + e}m`;\n                };\n            const wrapAnsi256 = (r, e)=>function() {\n                    const n = r.apply(t, arguments);\n                    return `\u001b[${38 + e};5;${n}m`;\n                };\n            const wrapAnsi16m = (r, e)=>function() {\n                    const n = r.apply(t, arguments);\n                    return `\u001b[${38 + e};2;${n[0]};${n[1]};${n[2]}m`;\n                };\n            function assembleStyles() {\n                const r = new Map;\n                const e = {\n                    modifier: {\n                        reset: [\n                            0,\n                            0\n                        ],\n                        bold: [\n                            1,\n                            22\n                        ],\n                        dim: [\n                            2,\n                            22\n                        ],\n                        italic: [\n                            3,\n                            23\n                        ],\n                        underline: [\n                            4,\n                            24\n                        ],\n                        inverse: [\n                            7,\n                            27\n                        ],\n                        hidden: [\n                            8,\n                            28\n                        ],\n                        strikethrough: [\n                            9,\n                            29\n                        ]\n                    },\n                    color: {\n                        black: [\n                            30,\n                            39\n                        ],\n                        red: [\n                            31,\n                            39\n                        ],\n                        green: [\n                            32,\n                            39\n                        ],\n                        yellow: [\n                            33,\n                            39\n                        ],\n                        blue: [\n                            34,\n                            39\n                        ],\n                        magenta: [\n                            35,\n                            39\n                        ],\n                        cyan: [\n                            36,\n                            39\n                        ],\n                        white: [\n                            37,\n                            39\n                        ],\n                        gray: [\n                            90,\n                            39\n                        ],\n                        redBright: [\n                            91,\n                            39\n                        ],\n                        greenBright: [\n                            92,\n                            39\n                        ],\n                        yellowBright: [\n                            93,\n                            39\n                        ],\n                        blueBright: [\n                            94,\n                            39\n                        ],\n                        magentaBright: [\n                            95,\n                            39\n                        ],\n                        cyanBright: [\n                            96,\n                            39\n                        ],\n                        whiteBright: [\n                            97,\n                            39\n                        ]\n                    },\n                    bgColor: {\n                        bgBlack: [\n                            40,\n                            49\n                        ],\n                        bgRed: [\n                            41,\n                            49\n                        ],\n                        bgGreen: [\n                            42,\n                            49\n                        ],\n                        bgYellow: [\n                            43,\n                            49\n                        ],\n                        bgBlue: [\n                            44,\n                            49\n                        ],\n                        bgMagenta: [\n                            45,\n                            49\n                        ],\n                        bgCyan: [\n                            46,\n                            49\n                        ],\n                        bgWhite: [\n                            47,\n                            49\n                        ],\n                        bgBlackBright: [\n                            100,\n                            49\n                        ],\n                        bgRedBright: [\n                            101,\n                            49\n                        ],\n                        bgGreenBright: [\n                            102,\n                            49\n                        ],\n                        bgYellowBright: [\n                            103,\n                            49\n                        ],\n                        bgBlueBright: [\n                            104,\n                            49\n                        ],\n                        bgMagentaBright: [\n                            105,\n                            49\n                        ],\n                        bgCyanBright: [\n                            106,\n                            49\n                        ],\n                        bgWhiteBright: [\n                            107,\n                            49\n                        ]\n                    }\n                };\n                e.color.grey = e.color.gray;\n                for (const n of Object.keys(e)){\n                    const t = e[n];\n                    for (const n of Object.keys(t)){\n                        const a = t[n];\n                        e[n] = {\n                            open: `\u001b[${a[0]}m`,\n                            close: `\u001b[${a[1]}m`\n                        };\n                        t[n] = e[n];\n                        r.set(a[0], a[1]);\n                    }\n                    Object.defineProperty(e, n, {\n                        value: t,\n                        enumerable: false\n                    });\n                    Object.defineProperty(e, \"codes\", {\n                        value: r,\n                        enumerable: false\n                    });\n                }\n                const ansi2ansi = (r)=>r;\n                const rgb2rgb = (r, e, n)=>[\n                        r,\n                        e,\n                        n\n                    ];\n                e.color.close = \"\\x1b[39m\";\n                e.bgColor.close = \"\\x1b[49m\";\n                e.color.ansi = {\n                    ansi: wrapAnsi16(ansi2ansi, 0)\n                };\n                e.color.ansi256 = {\n                    ansi256: wrapAnsi256(ansi2ansi, 0)\n                };\n                e.color.ansi16m = {\n                    rgb: wrapAnsi16m(rgb2rgb, 0)\n                };\n                e.bgColor.ansi = {\n                    ansi: wrapAnsi16(ansi2ansi, 10)\n                };\n                e.bgColor.ansi256 = {\n                    ansi256: wrapAnsi256(ansi2ansi, 10)\n                };\n                e.bgColor.ansi16m = {\n                    rgb: wrapAnsi16m(rgb2rgb, 10)\n                };\n                for (let r of Object.keys(t)){\n                    if (typeof t[r] !== \"object\") {\n                        continue;\n                    }\n                    const n = t[r];\n                    if (r === \"ansi16\") {\n                        r = \"ansi\";\n                    }\n                    if (\"ansi16\" in n) {\n                        e.color.ansi[r] = wrapAnsi16(n.ansi16, 0);\n                        e.bgColor.ansi[r] = wrapAnsi16(n.ansi16, 10);\n                    }\n                    if (\"ansi256\" in n) {\n                        e.color.ansi256[r] = wrapAnsi256(n.ansi256, 0);\n                        e.bgColor.ansi256[r] = wrapAnsi256(n.ansi256, 10);\n                    }\n                    if (\"rgb\" in n) {\n                        e.color.ansi16m[r] = wrapAnsi16m(n.rgb, 0);\n                        e.bgColor.ansi16m[r] = wrapAnsi16m(n.rgb, 10);\n                    }\n                }\n                return e;\n            }\n            Object.defineProperty(r, \"exports\", {\n                enumerable: true,\n                get: assembleStyles\n            });\n        },\n        148: (r, e, n)=>{\n            \"use strict\";\n            const t = n(379);\n            const a = n(535);\n            const o = n(220).stdout;\n            const s = n(299);\n            const l = process.platform === \"win32\" && !(process.env.TERM || \"\").toLowerCase().startsWith(\"xterm\");\n            const i = [\n                \"ansi\",\n                \"ansi\",\n                \"ansi256\",\n                \"ansi16m\"\n            ];\n            const c = new Set([\n                \"gray\"\n            ]);\n            const u = Object.create(null);\n            function applyOptions(r, e) {\n                e = e || {};\n                const n = o ? o.level : 0;\n                r.level = e.level === undefined ? n : e.level;\n                r.enabled = \"enabled\" in e ? e.enabled : r.level > 0;\n            }\n            function Chalk(r) {\n                if (!this || !(this instanceof Chalk) || this.template) {\n                    const e = {};\n                    applyOptions(e, r);\n                    e.template = function() {\n                        const r = [].slice.call(arguments);\n                        return chalkTag.apply(null, [\n                            e.template\n                        ].concat(r));\n                    };\n                    Object.setPrototypeOf(e, Chalk.prototype);\n                    Object.setPrototypeOf(e.template, e);\n                    e.template.constructor = Chalk;\n                    return e.template;\n                }\n                applyOptions(this, r);\n            }\n            if (l) {\n                a.blue.open = \"\\x1b[94m\";\n            }\n            for (const r of Object.keys(a)){\n                a[r].closeRe = new RegExp(t(a[r].close), \"g\");\n                u[r] = {\n                    get () {\n                        const e = a[r];\n                        return build.call(this, this._styles ? this._styles.concat(e) : [\n                            e\n                        ], this._empty, r);\n                    }\n                };\n            }\n            u.visible = {\n                get () {\n                    return build.call(this, this._styles || [], true, \"visible\");\n                }\n            };\n            a.color.closeRe = new RegExp(t(a.color.close), \"g\");\n            for (const r of Object.keys(a.color.ansi)){\n                if (c.has(r)) {\n                    continue;\n                }\n                u[r] = {\n                    get () {\n                        const e = this.level;\n                        return function() {\n                            const n = a.color[i[e]][r].apply(null, arguments);\n                            const t = {\n                                open: n,\n                                close: a.color.close,\n                                closeRe: a.color.closeRe\n                            };\n                            return build.call(this, this._styles ? this._styles.concat(t) : [\n                                t\n                            ], this._empty, r);\n                        };\n                    }\n                };\n            }\n            a.bgColor.closeRe = new RegExp(t(a.bgColor.close), \"g\");\n            for (const r of Object.keys(a.bgColor.ansi)){\n                if (c.has(r)) {\n                    continue;\n                }\n                const e = \"bg\" + r[0].toUpperCase() + r.slice(1);\n                u[e] = {\n                    get () {\n                        const e = this.level;\n                        return function() {\n                            const n = a.bgColor[i[e]][r].apply(null, arguments);\n                            const t = {\n                                open: n,\n                                close: a.bgColor.close,\n                                closeRe: a.bgColor.closeRe\n                            };\n                            return build.call(this, this._styles ? this._styles.concat(t) : [\n                                t\n                            ], this._empty, r);\n                        };\n                    }\n                };\n            }\n            const v = Object.defineProperties(()=>{}, u);\n            function build(r, e, n) {\n                const builder = function() {\n                    return applyStyle.apply(builder, arguments);\n                };\n                builder._styles = r;\n                builder._empty = e;\n                const t = this;\n                Object.defineProperty(builder, \"level\", {\n                    enumerable: true,\n                    get () {\n                        return t.level;\n                    },\n                    set (r) {\n                        t.level = r;\n                    }\n                });\n                Object.defineProperty(builder, \"enabled\", {\n                    enumerable: true,\n                    get () {\n                        return t.enabled;\n                    },\n                    set (r) {\n                        t.enabled = r;\n                    }\n                });\n                builder.hasGrey = this.hasGrey || n === \"gray\" || n === \"grey\";\n                builder.__proto__ = v;\n                return builder;\n            }\n            function applyStyle() {\n                const r = arguments;\n                const e = r.length;\n                let n = String(arguments[0]);\n                if (e === 0) {\n                    return \"\";\n                }\n                if (e > 1) {\n                    for(let t = 1; t < e; t++){\n                        n += \" \" + r[t];\n                    }\n                }\n                if (!this.enabled || this.level <= 0 || !n) {\n                    return this._empty ? \"\" : n;\n                }\n                const t = a.dim.open;\n                if (l && this.hasGrey) {\n                    a.dim.open = \"\";\n                }\n                for (const r of this._styles.slice().reverse()){\n                    n = r.open + n.replace(r.closeRe, r.open) + r.close;\n                    n = n.replace(/\\r?\\n/g, `${r.close}$&${r.open}`);\n                }\n                a.dim.open = t;\n                return n;\n            }\n            function chalkTag(r, e) {\n                if (!Array.isArray(e)) {\n                    return [].slice.call(arguments, 1).join(\" \");\n                }\n                const n = [].slice.call(arguments, 2);\n                const t = [\n                    e.raw[0]\n                ];\n                for(let r = 1; r < e.length; r++){\n                    t.push(String(n[r - 1]).replace(/[{}\\\\]/g, \"\\\\$&\"));\n                    t.push(String(e.raw[r]));\n                }\n                return s(r, t.join(\"\"));\n            }\n            Object.defineProperties(Chalk.prototype, u);\n            r.exports = Chalk();\n            r.exports.supportsColor = o;\n            r.exports[\"default\"] = r.exports;\n        },\n        299: (r)=>{\n            \"use strict\";\n            const e = /(?:\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi;\n            const n = /(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g;\n            const t = /^(['\"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/;\n            const a = /\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.)|([^\\\\])/gi;\n            const o = new Map([\n                [\n                    \"n\",\n                    \"\\n\"\n                ],\n                [\n                    \"r\",\n                    \"\\r\"\n                ],\n                [\n                    \"t\",\n                    \"\t\"\n                ],\n                [\n                    \"b\",\n                    \"\\b\"\n                ],\n                [\n                    \"f\",\n                    \"\\f\"\n                ],\n                [\n                    \"v\",\n                    \"\\v\"\n                ],\n                [\n                    \"0\",\n                    \"\\x00\"\n                ],\n                [\n                    \"\\\\\",\n                    \"\\\\\"\n                ],\n                [\n                    \"e\",\n                    \"\\x1b\"\n                ],\n                [\n                    \"a\",\n                    \"\\x07\"\n                ]\n            ]);\n            function unescape(r) {\n                if (r[0] === \"u\" && r.length === 5 || r[0] === \"x\" && r.length === 3) {\n                    return String.fromCharCode(parseInt(r.slice(1), 16));\n                }\n                return o.get(r) || r;\n            }\n            function parseArguments(r, e) {\n                const n = [];\n                const o = e.trim().split(/\\s*,\\s*/g);\n                let s;\n                for (const e of o){\n                    if (!isNaN(e)) {\n                        n.push(Number(e));\n                    } else if (s = e.match(t)) {\n                        n.push(s[2].replace(a, (r, e, n)=>e ? unescape(e) : n));\n                    } else {\n                        throw new Error(`Invalid Chalk template style argument: ${e} (in style '${r}')`);\n                    }\n                }\n                return n;\n            }\n            function parseStyle(r) {\n                n.lastIndex = 0;\n                const e = [];\n                let t;\n                while((t = n.exec(r)) !== null){\n                    const r = t[1];\n                    if (t[2]) {\n                        const n = parseArguments(r, t[2]);\n                        e.push([\n                            r\n                        ].concat(n));\n                    } else {\n                        e.push([\n                            r\n                        ]);\n                    }\n                }\n                return e;\n            }\n            function buildStyle(r, e) {\n                const n = {};\n                for (const r of e){\n                    for (const e of r.styles){\n                        n[e[0]] = r.inverse ? null : e.slice(1);\n                    }\n                }\n                let t = r;\n                for (const r of Object.keys(n)){\n                    if (Array.isArray(n[r])) {\n                        if (!(r in t)) {\n                            throw new Error(`Unknown Chalk style: ${r}`);\n                        }\n                        if (n[r].length > 0) {\n                            t = t[r].apply(t, n[r]);\n                        } else {\n                            t = t[r];\n                        }\n                    }\n                }\n                return t;\n            }\n            r.exports = (r, n)=>{\n                const t = [];\n                const a = [];\n                let o = [];\n                n.replace(e, (e, n, s, l, i, c)=>{\n                    if (n) {\n                        o.push(unescape(n));\n                    } else if (l) {\n                        const e = o.join(\"\");\n                        o = [];\n                        a.push(t.length === 0 ? e : buildStyle(r, t)(e));\n                        t.push({\n                            inverse: s,\n                            styles: parseStyle(l)\n                        });\n                    } else if (i) {\n                        if (t.length === 0) {\n                            throw new Error(\"Found extraneous } in Chalk template literal\");\n                        }\n                        a.push(buildStyle(r, t)(o.join(\"\")));\n                        o = [];\n                        t.pop();\n                    } else {\n                        o.push(c);\n                    }\n                });\n                a.push(o.join(\"\"));\n                if (t.length > 0) {\n                    const r = `Chalk template literal is missing ${t.length} closing bracket${t.length === 1 ? \"\" : \"s\"} (\\`}\\`)`;\n                    throw new Error(r);\n                }\n                return a.join(\"\");\n            };\n        },\n        117: (r, e, n)=>{\n            var t = n(251);\n            var a = {};\n            for(var o in t){\n                if (t.hasOwnProperty(o)) {\n                    a[t[o]] = o;\n                }\n            }\n            var s = r.exports = {\n                rgb: {\n                    channels: 3,\n                    labels: \"rgb\"\n                },\n                hsl: {\n                    channels: 3,\n                    labels: \"hsl\"\n                },\n                hsv: {\n                    channels: 3,\n                    labels: \"hsv\"\n                },\n                hwb: {\n                    channels: 3,\n                    labels: \"hwb\"\n                },\n                cmyk: {\n                    channels: 4,\n                    labels: \"cmyk\"\n                },\n                xyz: {\n                    channels: 3,\n                    labels: \"xyz\"\n                },\n                lab: {\n                    channels: 3,\n                    labels: \"lab\"\n                },\n                lch: {\n                    channels: 3,\n                    labels: \"lch\"\n                },\n                hex: {\n                    channels: 1,\n                    labels: [\n                        \"hex\"\n                    ]\n                },\n                keyword: {\n                    channels: 1,\n                    labels: [\n                        \"keyword\"\n                    ]\n                },\n                ansi16: {\n                    channels: 1,\n                    labels: [\n                        \"ansi16\"\n                    ]\n                },\n                ansi256: {\n                    channels: 1,\n                    labels: [\n                        \"ansi256\"\n                    ]\n                },\n                hcg: {\n                    channels: 3,\n                    labels: [\n                        \"h\",\n                        \"c\",\n                        \"g\"\n                    ]\n                },\n                apple: {\n                    channels: 3,\n                    labels: [\n                        \"r16\",\n                        \"g16\",\n                        \"b16\"\n                    ]\n                },\n                gray: {\n                    channels: 1,\n                    labels: [\n                        \"gray\"\n                    ]\n                }\n            };\n            for(var l in s){\n                if (s.hasOwnProperty(l)) {\n                    if (!(\"channels\" in s[l])) {\n                        throw new Error(\"missing channels property: \" + l);\n                    }\n                    if (!(\"labels\" in s[l])) {\n                        throw new Error(\"missing channel labels property: \" + l);\n                    }\n                    if (s[l].labels.length !== s[l].channels) {\n                        throw new Error(\"channel and label counts mismatch: \" + l);\n                    }\n                    var i = s[l].channels;\n                    var c = s[l].labels;\n                    delete s[l].channels;\n                    delete s[l].labels;\n                    Object.defineProperty(s[l], \"channels\", {\n                        value: i\n                    });\n                    Object.defineProperty(s[l], \"labels\", {\n                        value: c\n                    });\n                }\n            }\n            s.rgb.hsl = function(r) {\n                var e = r[0] / 255;\n                var n = r[1] / 255;\n                var t = r[2] / 255;\n                var a = Math.min(e, n, t);\n                var o = Math.max(e, n, t);\n                var s = o - a;\n                var l;\n                var i;\n                var c;\n                if (o === a) {\n                    l = 0;\n                } else if (e === o) {\n                    l = (n - t) / s;\n                } else if (n === o) {\n                    l = 2 + (t - e) / s;\n                } else if (t === o) {\n                    l = 4 + (e - n) / s;\n                }\n                l = Math.min(l * 60, 360);\n                if (l < 0) {\n                    l += 360;\n                }\n                c = (a + o) / 2;\n                if (o === a) {\n                    i = 0;\n                } else if (c <= .5) {\n                    i = s / (o + a);\n                } else {\n                    i = s / (2 - o - a);\n                }\n                return [\n                    l,\n                    i * 100,\n                    c * 100\n                ];\n            };\n            s.rgb.hsv = function(r) {\n                var e;\n                var n;\n                var t;\n                var a;\n                var o;\n                var s = r[0] / 255;\n                var l = r[1] / 255;\n                var i = r[2] / 255;\n                var c = Math.max(s, l, i);\n                var u = c - Math.min(s, l, i);\n                var diffc = function(r) {\n                    return (c - r) / 6 / u + 1 / 2;\n                };\n                if (u === 0) {\n                    a = o = 0;\n                } else {\n                    o = u / c;\n                    e = diffc(s);\n                    n = diffc(l);\n                    t = diffc(i);\n                    if (s === c) {\n                        a = t - n;\n                    } else if (l === c) {\n                        a = 1 / 3 + e - t;\n                    } else if (i === c) {\n                        a = 2 / 3 + n - e;\n                    }\n                    if (a < 0) {\n                        a += 1;\n                    } else if (a > 1) {\n                        a -= 1;\n                    }\n                }\n                return [\n                    a * 360,\n                    o * 100,\n                    c * 100\n                ];\n            };\n            s.rgb.hwb = function(r) {\n                var e = r[0];\n                var n = r[1];\n                var t = r[2];\n                var a = s.rgb.hsl(r)[0];\n                var o = 1 / 255 * Math.min(e, Math.min(n, t));\n                t = 1 - 1 / 255 * Math.max(e, Math.max(n, t));\n                return [\n                    a,\n                    o * 100,\n                    t * 100\n                ];\n            };\n            s.rgb.cmyk = function(r) {\n                var e = r[0] / 255;\n                var n = r[1] / 255;\n                var t = r[2] / 255;\n                var a;\n                var o;\n                var s;\n                var l;\n                l = Math.min(1 - e, 1 - n, 1 - t);\n                a = (1 - e - l) / (1 - l) || 0;\n                o = (1 - n - l) / (1 - l) || 0;\n                s = (1 - t - l) / (1 - l) || 0;\n                return [\n                    a * 100,\n                    o * 100,\n                    s * 100,\n                    l * 100\n                ];\n            };\n            function comparativeDistance(r, e) {\n                return Math.pow(r[0] - e[0], 2) + Math.pow(r[1] - e[1], 2) + Math.pow(r[2] - e[2], 2);\n            }\n            s.rgb.keyword = function(r) {\n                var e = a[r];\n                if (e) {\n                    return e;\n                }\n                var n = Infinity;\n                var o;\n                for(var s in t){\n                    if (t.hasOwnProperty(s)) {\n                        var l = t[s];\n                        var i = comparativeDistance(r, l);\n                        if (i < n) {\n                            n = i;\n                            o = s;\n                        }\n                    }\n                }\n                return o;\n            };\n            s.keyword.rgb = function(r) {\n                return t[r];\n            };\n            s.rgb.xyz = function(r) {\n                var e = r[0] / 255;\n                var n = r[1] / 255;\n                var t = r[2] / 255;\n                e = e > .04045 ? Math.pow((e + .055) / 1.055, 2.4) : e / 12.92;\n                n = n > .04045 ? Math.pow((n + .055) / 1.055, 2.4) : n / 12.92;\n                t = t > .04045 ? Math.pow((t + .055) / 1.055, 2.4) : t / 12.92;\n                var a = e * .4124 + n * .3576 + t * .1805;\n                var o = e * .2126 + n * .7152 + t * .0722;\n                var s = e * .0193 + n * .1192 + t * .9505;\n                return [\n                    a * 100,\n                    o * 100,\n                    s * 100\n                ];\n            };\n            s.rgb.lab = function(r) {\n                var e = s.rgb.xyz(r);\n                var n = e[0];\n                var t = e[1];\n                var a = e[2];\n                var o;\n                var l;\n                var i;\n                n /= 95.047;\n                t /= 100;\n                a /= 108.883;\n                n = n > .008856 ? Math.pow(n, 1 / 3) : 7.787 * n + 16 / 116;\n                t = t > .008856 ? Math.pow(t, 1 / 3) : 7.787 * t + 16 / 116;\n                a = a > .008856 ? Math.pow(a, 1 / 3) : 7.787 * a + 16 / 116;\n                o = 116 * t - 16;\n                l = 500 * (n - t);\n                i = 200 * (t - a);\n                return [\n                    o,\n                    l,\n                    i\n                ];\n            };\n            s.hsl.rgb = function(r) {\n                var e = r[0] / 360;\n                var n = r[1] / 100;\n                var t = r[2] / 100;\n                var a;\n                var o;\n                var s;\n                var l;\n                var i;\n                if (n === 0) {\n                    i = t * 255;\n                    return [\n                        i,\n                        i,\n                        i\n                    ];\n                }\n                if (t < .5) {\n                    o = t * (1 + n);\n                } else {\n                    o = t + n - t * n;\n                }\n                a = 2 * t - o;\n                l = [\n                    0,\n                    0,\n                    0\n                ];\n                for(var c = 0; c < 3; c++){\n                    s = e + 1 / 3 * -(c - 1);\n                    if (s < 0) {\n                        s++;\n                    }\n                    if (s > 1) {\n                        s--;\n                    }\n                    if (6 * s < 1) {\n                        i = a + (o - a) * 6 * s;\n                    } else if (2 * s < 1) {\n                        i = o;\n                    } else if (3 * s < 2) {\n                        i = a + (o - a) * (2 / 3 - s) * 6;\n                    } else {\n                        i = a;\n                    }\n                    l[c] = i * 255;\n                }\n                return l;\n            };\n            s.hsl.hsv = function(r) {\n                var e = r[0];\n                var n = r[1] / 100;\n                var t = r[2] / 100;\n                var a = n;\n                var o = Math.max(t, .01);\n                var s;\n                var l;\n                t *= 2;\n                n *= t <= 1 ? t : 2 - t;\n                a *= o <= 1 ? o : 2 - o;\n                l = (t + n) / 2;\n                s = t === 0 ? 2 * a / (o + a) : 2 * n / (t + n);\n                return [\n                    e,\n                    s * 100,\n                    l * 100\n                ];\n            };\n            s.hsv.rgb = function(r) {\n                var e = r[0] / 60;\n                var n = r[1] / 100;\n                var t = r[2] / 100;\n                var a = Math.floor(e) % 6;\n                var o = e - Math.floor(e);\n                var s = 255 * t * (1 - n);\n                var l = 255 * t * (1 - n * o);\n                var i = 255 * t * (1 - n * (1 - o));\n                t *= 255;\n                switch(a){\n                    case 0:\n                        return [\n                            t,\n                            i,\n                            s\n                        ];\n                    case 1:\n                        return [\n                            l,\n                            t,\n                            s\n                        ];\n                    case 2:\n                        return [\n                            s,\n                            t,\n                            i\n                        ];\n                    case 3:\n                        return [\n                            s,\n                            l,\n                            t\n                        ];\n                    case 4:\n                        return [\n                            i,\n                            s,\n                            t\n                        ];\n                    case 5:\n                        return [\n                            t,\n                            s,\n                            l\n                        ];\n                }\n            };\n            s.hsv.hsl = function(r) {\n                var e = r[0];\n                var n = r[1] / 100;\n                var t = r[2] / 100;\n                var a = Math.max(t, .01);\n                var o;\n                var s;\n                var l;\n                l = (2 - n) * t;\n                o = (2 - n) * a;\n                s = n * a;\n                s /= o <= 1 ? o : 2 - o;\n                s = s || 0;\n                l /= 2;\n                return [\n                    e,\n                    s * 100,\n                    l * 100\n                ];\n            };\n            s.hwb.rgb = function(r) {\n                var e = r[0] / 360;\n                var n = r[1] / 100;\n                var t = r[2] / 100;\n                var a = n + t;\n                var o;\n                var s;\n                var l;\n                var i;\n                if (a > 1) {\n                    n /= a;\n                    t /= a;\n                }\n                o = Math.floor(6 * e);\n                s = 1 - t;\n                l = 6 * e - o;\n                if ((o & 1) !== 0) {\n                    l = 1 - l;\n                }\n                i = n + l * (s - n);\n                var c;\n                var u;\n                var v;\n                switch(o){\n                    default:\n                    case 6:\n                    case 0:\n                        c = s;\n                        u = i;\n                        v = n;\n                        break;\n                    case 1:\n                        c = i;\n                        u = s;\n                        v = n;\n                        break;\n                    case 2:\n                        c = n;\n                        u = s;\n                        v = i;\n                        break;\n                    case 3:\n                        c = n;\n                        u = i;\n                        v = s;\n                        break;\n                    case 4:\n                        c = i;\n                        u = n;\n                        v = s;\n                        break;\n                    case 5:\n                        c = s;\n                        u = n;\n                        v = i;\n                        break;\n                }\n                return [\n                    c * 255,\n                    u * 255,\n                    v * 255\n                ];\n            };\n            s.cmyk.rgb = function(r) {\n                var e = r[0] / 100;\n                var n = r[1] / 100;\n                var t = r[2] / 100;\n                var a = r[3] / 100;\n                var o;\n                var s;\n                var l;\n                o = 1 - Math.min(1, e * (1 - a) + a);\n                s = 1 - Math.min(1, n * (1 - a) + a);\n                l = 1 - Math.min(1, t * (1 - a) + a);\n                return [\n                    o * 255,\n                    s * 255,\n                    l * 255\n                ];\n            };\n            s.xyz.rgb = function(r) {\n                var e = r[0] / 100;\n                var n = r[1] / 100;\n                var t = r[2] / 100;\n                var a;\n                var o;\n                var s;\n                a = e * 3.2406 + n * -1.5372 + t * -.4986;\n                o = e * -.9689 + n * 1.8758 + t * .0415;\n                s = e * .0557 + n * -.204 + t * 1.057;\n                a = a > .0031308 ? 1.055 * Math.pow(a, 1 / 2.4) - .055 : a * 12.92;\n                o = o > .0031308 ? 1.055 * Math.pow(o, 1 / 2.4) - .055 : o * 12.92;\n                s = s > .0031308 ? 1.055 * Math.pow(s, 1 / 2.4) - .055 : s * 12.92;\n                a = Math.min(Math.max(0, a), 1);\n                o = Math.min(Math.max(0, o), 1);\n                s = Math.min(Math.max(0, s), 1);\n                return [\n                    a * 255,\n                    o * 255,\n                    s * 255\n                ];\n            };\n            s.xyz.lab = function(r) {\n                var e = r[0];\n                var n = r[1];\n                var t = r[2];\n                var a;\n                var o;\n                var s;\n                e /= 95.047;\n                n /= 100;\n                t /= 108.883;\n                e = e > .008856 ? Math.pow(e, 1 / 3) : 7.787 * e + 16 / 116;\n                n = n > .008856 ? Math.pow(n, 1 / 3) : 7.787 * n + 16 / 116;\n                t = t > .008856 ? Math.pow(t, 1 / 3) : 7.787 * t + 16 / 116;\n                a = 116 * n - 16;\n                o = 500 * (e - n);\n                s = 200 * (n - t);\n                return [\n                    a,\n                    o,\n                    s\n                ];\n            };\n            s.lab.xyz = function(r) {\n                var e = r[0];\n                var n = r[1];\n                var t = r[2];\n                var a;\n                var o;\n                var s;\n                o = (e + 16) / 116;\n                a = n / 500 + o;\n                s = o - t / 200;\n                var l = Math.pow(o, 3);\n                var i = Math.pow(a, 3);\n                var c = Math.pow(s, 3);\n                o = l > .008856 ? l : (o - 16 / 116) / 7.787;\n                a = i > .008856 ? i : (a - 16 / 116) / 7.787;\n                s = c > .008856 ? c : (s - 16 / 116) / 7.787;\n                a *= 95.047;\n                o *= 100;\n                s *= 108.883;\n                return [\n                    a,\n                    o,\n                    s\n                ];\n            };\n            s.lab.lch = function(r) {\n                var e = r[0];\n                var n = r[1];\n                var t = r[2];\n                var a;\n                var o;\n                var s;\n                a = Math.atan2(t, n);\n                o = a * 360 / 2 / Math.PI;\n                if (o < 0) {\n                    o += 360;\n                }\n                s = Math.sqrt(n * n + t * t);\n                return [\n                    e,\n                    s,\n                    o\n                ];\n            };\n            s.lch.lab = function(r) {\n                var e = r[0];\n                var n = r[1];\n                var t = r[2];\n                var a;\n                var o;\n                var s;\n                s = t / 360 * 2 * Math.PI;\n                a = n * Math.cos(s);\n                o = n * Math.sin(s);\n                return [\n                    e,\n                    a,\n                    o\n                ];\n            };\n            s.rgb.ansi16 = function(r) {\n                var e = r[0];\n                var n = r[1];\n                var t = r[2];\n                var a = 1 in arguments ? arguments[1] : s.rgb.hsv(r)[2];\n                a = Math.round(a / 50);\n                if (a === 0) {\n                    return 30;\n                }\n                var o = 30 + (Math.round(t / 255) << 2 | Math.round(n / 255) << 1 | Math.round(e / 255));\n                if (a === 2) {\n                    o += 60;\n                }\n                return o;\n            };\n            s.hsv.ansi16 = function(r) {\n                return s.rgb.ansi16(s.hsv.rgb(r), r[2]);\n            };\n            s.rgb.ansi256 = function(r) {\n                var e = r[0];\n                var n = r[1];\n                var t = r[2];\n                if (e === n && n === t) {\n                    if (e < 8) {\n                        return 16;\n                    }\n                    if (e > 248) {\n                        return 231;\n                    }\n                    return Math.round((e - 8) / 247 * 24) + 232;\n                }\n                var a = 16 + 36 * Math.round(e / 255 * 5) + 6 * Math.round(n / 255 * 5) + Math.round(t / 255 * 5);\n                return a;\n            };\n            s.ansi16.rgb = function(r) {\n                var e = r % 10;\n                if (e === 0 || e === 7) {\n                    if (r > 50) {\n                        e += 3.5;\n                    }\n                    e = e / 10.5 * 255;\n                    return [\n                        e,\n                        e,\n                        e\n                    ];\n                }\n                var n = (~~(r > 50) + 1) * .5;\n                var t = (e & 1) * n * 255;\n                var a = (e >> 1 & 1) * n * 255;\n                var o = (e >> 2 & 1) * n * 255;\n                return [\n                    t,\n                    a,\n                    o\n                ];\n            };\n            s.ansi256.rgb = function(r) {\n                if (r >= 232) {\n                    var e = (r - 232) * 10 + 8;\n                    return [\n                        e,\n                        e,\n                        e\n                    ];\n                }\n                r -= 16;\n                var n;\n                var t = Math.floor(r / 36) / 5 * 255;\n                var a = Math.floor((n = r % 36) / 6) / 5 * 255;\n                var o = n % 6 / 5 * 255;\n                return [\n                    t,\n                    a,\n                    o\n                ];\n            };\n            s.rgb.hex = function(r) {\n                var e = ((Math.round(r[0]) & 255) << 16) + ((Math.round(r[1]) & 255) << 8) + (Math.round(r[2]) & 255);\n                var n = e.toString(16).toUpperCase();\n                return \"000000\".substring(n.length) + n;\n            };\n            s.hex.rgb = function(r) {\n                var e = r.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n                if (!e) {\n                    return [\n                        0,\n                        0,\n                        0\n                    ];\n                }\n                var n = e[0];\n                if (e[0].length === 3) {\n                    n = n.split(\"\").map(function(r) {\n                        return r + r;\n                    }).join(\"\");\n                }\n                var t = parseInt(n, 16);\n                var a = t >> 16 & 255;\n                var o = t >> 8 & 255;\n                var s = t & 255;\n                return [\n                    a,\n                    o,\n                    s\n                ];\n            };\n            s.rgb.hcg = function(r) {\n                var e = r[0] / 255;\n                var n = r[1] / 255;\n                var t = r[2] / 255;\n                var a = Math.max(Math.max(e, n), t);\n                var o = Math.min(Math.min(e, n), t);\n                var s = a - o;\n                var l;\n                var i;\n                if (s < 1) {\n                    l = o / (1 - s);\n                } else {\n                    l = 0;\n                }\n                if (s <= 0) {\n                    i = 0;\n                } else if (a === e) {\n                    i = (n - t) / s % 6;\n                } else if (a === n) {\n                    i = 2 + (t - e) / s;\n                } else {\n                    i = 4 + (e - n) / s + 4;\n                }\n                i /= 6;\n                i %= 1;\n                return [\n                    i * 360,\n                    s * 100,\n                    l * 100\n                ];\n            };\n            s.hsl.hcg = function(r) {\n                var e = r[1] / 100;\n                var n = r[2] / 100;\n                var t = 1;\n                var a = 0;\n                if (n < .5) {\n                    t = 2 * e * n;\n                } else {\n                    t = 2 * e * (1 - n);\n                }\n                if (t < 1) {\n                    a = (n - .5 * t) / (1 - t);\n                }\n                return [\n                    r[0],\n                    t * 100,\n                    a * 100\n                ];\n            };\n            s.hsv.hcg = function(r) {\n                var e = r[1] / 100;\n                var n = r[2] / 100;\n                var t = e * n;\n                var a = 0;\n                if (t < 1) {\n                    a = (n - t) / (1 - t);\n                }\n                return [\n                    r[0],\n                    t * 100,\n                    a * 100\n                ];\n            };\n            s.hcg.rgb = function(r) {\n                var e = r[0] / 360;\n                var n = r[1] / 100;\n                var t = r[2] / 100;\n                if (n === 0) {\n                    return [\n                        t * 255,\n                        t * 255,\n                        t * 255\n                    ];\n                }\n                var a = [\n                    0,\n                    0,\n                    0\n                ];\n                var o = e % 1 * 6;\n                var s = o % 1;\n                var l = 1 - s;\n                var i = 0;\n                switch(Math.floor(o)){\n                    case 0:\n                        a[0] = 1;\n                        a[1] = s;\n                        a[2] = 0;\n                        break;\n                    case 1:\n                        a[0] = l;\n                        a[1] = 1;\n                        a[2] = 0;\n                        break;\n                    case 2:\n                        a[0] = 0;\n                        a[1] = 1;\n                        a[2] = s;\n                        break;\n                    case 3:\n                        a[0] = 0;\n                        a[1] = l;\n                        a[2] = 1;\n                        break;\n                    case 4:\n                        a[0] = s;\n                        a[1] = 0;\n                        a[2] = 1;\n                        break;\n                    default:\n                        a[0] = 1;\n                        a[1] = 0;\n                        a[2] = l;\n                }\n                i = (1 - n) * t;\n                return [\n                    (n * a[0] + i) * 255,\n                    (n * a[1] + i) * 255,\n                    (n * a[2] + i) * 255\n                ];\n            };\n            s.hcg.hsv = function(r) {\n                var e = r[1] / 100;\n                var n = r[2] / 100;\n                var t = e + n * (1 - e);\n                var a = 0;\n                if (t > 0) {\n                    a = e / t;\n                }\n                return [\n                    r[0],\n                    a * 100,\n                    t * 100\n                ];\n            };\n            s.hcg.hsl = function(r) {\n                var e = r[1] / 100;\n                var n = r[2] / 100;\n                var t = n * (1 - e) + .5 * e;\n                var a = 0;\n                if (t > 0 && t < .5) {\n                    a = e / (2 * t);\n                } else if (t >= .5 && t < 1) {\n                    a = e / (2 * (1 - t));\n                }\n                return [\n                    r[0],\n                    a * 100,\n                    t * 100\n                ];\n            };\n            s.hcg.hwb = function(r) {\n                var e = r[1] / 100;\n                var n = r[2] / 100;\n                var t = e + n * (1 - e);\n                return [\n                    r[0],\n                    (t - e) * 100,\n                    (1 - t) * 100\n                ];\n            };\n            s.hwb.hcg = function(r) {\n                var e = r[1] / 100;\n                var n = r[2] / 100;\n                var t = 1 - n;\n                var a = t - e;\n                var o = 0;\n                if (a < 1) {\n                    o = (t - a) / (1 - a);\n                }\n                return [\n                    r[0],\n                    a * 100,\n                    o * 100\n                ];\n            };\n            s.apple.rgb = function(r) {\n                return [\n                    r[0] / 65535 * 255,\n                    r[1] / 65535 * 255,\n                    r[2] / 65535 * 255\n                ];\n            };\n            s.rgb.apple = function(r) {\n                return [\n                    r[0] / 255 * 65535,\n                    r[1] / 255 * 65535,\n                    r[2] / 255 * 65535\n                ];\n            };\n            s.gray.rgb = function(r) {\n                return [\n                    r[0] / 100 * 255,\n                    r[0] / 100 * 255,\n                    r[0] / 100 * 255\n                ];\n            };\n            s.gray.hsl = s.gray.hsv = function(r) {\n                return [\n                    0,\n                    0,\n                    r[0]\n                ];\n            };\n            s.gray.hwb = function(r) {\n                return [\n                    0,\n                    100,\n                    r[0]\n                ];\n            };\n            s.gray.cmyk = function(r) {\n                return [\n                    0,\n                    0,\n                    0,\n                    r[0]\n                ];\n            };\n            s.gray.lab = function(r) {\n                return [\n                    r[0],\n                    0,\n                    0\n                ];\n            };\n            s.gray.hex = function(r) {\n                var e = Math.round(r[0] / 100 * 255) & 255;\n                var n = (e << 16) + (e << 8) + e;\n                var t = n.toString(16).toUpperCase();\n                return \"000000\".substring(t.length) + t;\n            };\n            s.rgb.gray = function(r) {\n                var e = (r[0] + r[1] + r[2]) / 3;\n                return [\n                    e / 255 * 100\n                ];\n            };\n        },\n        54: (r, e, n)=>{\n            var t = n(117);\n            var a = n(528);\n            var o = {};\n            var s = Object.keys(t);\n            function wrapRaw(r) {\n                var wrappedFn = function(e) {\n                    if (e === undefined || e === null) {\n                        return e;\n                    }\n                    if (arguments.length > 1) {\n                        e = Array.prototype.slice.call(arguments);\n                    }\n                    return r(e);\n                };\n                if (\"conversion\" in r) {\n                    wrappedFn.conversion = r.conversion;\n                }\n                return wrappedFn;\n            }\n            function wrapRounded(r) {\n                var wrappedFn = function(e) {\n                    if (e === undefined || e === null) {\n                        return e;\n                    }\n                    if (arguments.length > 1) {\n                        e = Array.prototype.slice.call(arguments);\n                    }\n                    var n = r(e);\n                    if (typeof n === \"object\") {\n                        for(var t = n.length, a = 0; a < t; a++){\n                            n[a] = Math.round(n[a]);\n                        }\n                    }\n                    return n;\n                };\n                if (\"conversion\" in r) {\n                    wrappedFn.conversion = r.conversion;\n                }\n                return wrappedFn;\n            }\n            s.forEach(function(r) {\n                o[r] = {};\n                Object.defineProperty(o[r], \"channels\", {\n                    value: t[r].channels\n                });\n                Object.defineProperty(o[r], \"labels\", {\n                    value: t[r].labels\n                });\n                var e = a(r);\n                var n = Object.keys(e);\n                n.forEach(function(n) {\n                    var t = e[n];\n                    o[r][n] = wrapRounded(t);\n                    o[r][n].raw = wrapRaw(t);\n                });\n            });\n            r.exports = o;\n        },\n        528: (r, e, n)=>{\n            var t = n(117);\n            function buildGraph() {\n                var r = {};\n                var e = Object.keys(t);\n                for(var n = e.length, a = 0; a < n; a++){\n                    r[e[a]] = {\n                        distance: -1,\n                        parent: null\n                    };\n                }\n                return r;\n            }\n            function deriveBFS(r) {\n                var e = buildGraph();\n                var n = [\n                    r\n                ];\n                e[r].distance = 0;\n                while(n.length){\n                    var a = n.pop();\n                    var o = Object.keys(t[a]);\n                    for(var s = o.length, l = 0; l < s; l++){\n                        var i = o[l];\n                        var c = e[i];\n                        if (c.distance === -1) {\n                            c.distance = e[a].distance + 1;\n                            c.parent = a;\n                            n.unshift(i);\n                        }\n                    }\n                }\n                return e;\n            }\n            function link(r, e) {\n                return function(n) {\n                    return e(r(n));\n                };\n            }\n            function wrapConversion(r, e) {\n                var n = [\n                    e[r].parent,\n                    r\n                ];\n                var a = t[e[r].parent][r];\n                var o = e[r].parent;\n                while(e[o].parent){\n                    n.unshift(e[o].parent);\n                    a = link(t[e[o].parent][o], a);\n                    o = e[o].parent;\n                }\n                a.conversion = n;\n                return a;\n            }\n            r.exports = function(r) {\n                var e = deriveBFS(r);\n                var n = {};\n                var t = Object.keys(e);\n                for(var a = t.length, o = 0; o < a; o++){\n                    var s = t[o];\n                    var l = e[s];\n                    if (l.parent === null) {\n                        continue;\n                    }\n                    n[s] = wrapConversion(s, e);\n                }\n                return n;\n            };\n        },\n        251: (r)=>{\n            \"use strict\";\n            r.exports = {\n                aliceblue: [\n                    240,\n                    248,\n                    255\n                ],\n                antiquewhite: [\n                    250,\n                    235,\n                    215\n                ],\n                aqua: [\n                    0,\n                    255,\n                    255\n                ],\n                aquamarine: [\n                    127,\n                    255,\n                    212\n                ],\n                azure: [\n                    240,\n                    255,\n                    255\n                ],\n                beige: [\n                    245,\n                    245,\n                    220\n                ],\n                bisque: [\n                    255,\n                    228,\n                    196\n                ],\n                black: [\n                    0,\n                    0,\n                    0\n                ],\n                blanchedalmond: [\n                    255,\n                    235,\n                    205\n                ],\n                blue: [\n                    0,\n                    0,\n                    255\n                ],\n                blueviolet: [\n                    138,\n                    43,\n                    226\n                ],\n                brown: [\n                    165,\n                    42,\n                    42\n                ],\n                burlywood: [\n                    222,\n                    184,\n                    135\n                ],\n                cadetblue: [\n                    95,\n                    158,\n                    160\n                ],\n                chartreuse: [\n                    127,\n                    255,\n                    0\n                ],\n                chocolate: [\n                    210,\n                    105,\n                    30\n                ],\n                coral: [\n                    255,\n                    127,\n                    80\n                ],\n                cornflowerblue: [\n                    100,\n                    149,\n                    237\n                ],\n                cornsilk: [\n                    255,\n                    248,\n                    220\n                ],\n                crimson: [\n                    220,\n                    20,\n                    60\n                ],\n                cyan: [\n                    0,\n                    255,\n                    255\n                ],\n                darkblue: [\n                    0,\n                    0,\n                    139\n                ],\n                darkcyan: [\n                    0,\n                    139,\n                    139\n                ],\n                darkgoldenrod: [\n                    184,\n                    134,\n                    11\n                ],\n                darkgray: [\n                    169,\n                    169,\n                    169\n                ],\n                darkgreen: [\n                    0,\n                    100,\n                    0\n                ],\n                darkgrey: [\n                    169,\n                    169,\n                    169\n                ],\n                darkkhaki: [\n                    189,\n                    183,\n                    107\n                ],\n                darkmagenta: [\n                    139,\n                    0,\n                    139\n                ],\n                darkolivegreen: [\n                    85,\n                    107,\n                    47\n                ],\n                darkorange: [\n                    255,\n                    140,\n                    0\n                ],\n                darkorchid: [\n                    153,\n                    50,\n                    204\n                ],\n                darkred: [\n                    139,\n                    0,\n                    0\n                ],\n                darksalmon: [\n                    233,\n                    150,\n                    122\n                ],\n                darkseagreen: [\n                    143,\n                    188,\n                    143\n                ],\n                darkslateblue: [\n                    72,\n                    61,\n                    139\n                ],\n                darkslategray: [\n                    47,\n                    79,\n                    79\n                ],\n                darkslategrey: [\n                    47,\n                    79,\n                    79\n                ],\n                darkturquoise: [\n                    0,\n                    206,\n                    209\n                ],\n                darkviolet: [\n                    148,\n                    0,\n                    211\n                ],\n                deeppink: [\n                    255,\n                    20,\n                    147\n                ],\n                deepskyblue: [\n                    0,\n                    191,\n                    255\n                ],\n                dimgray: [\n                    105,\n                    105,\n                    105\n                ],\n                dimgrey: [\n                    105,\n                    105,\n                    105\n                ],\n                dodgerblue: [\n                    30,\n                    144,\n                    255\n                ],\n                firebrick: [\n                    178,\n                    34,\n                    34\n                ],\n                floralwhite: [\n                    255,\n                    250,\n                    240\n                ],\n                forestgreen: [\n                    34,\n                    139,\n                    34\n                ],\n                fuchsia: [\n                    255,\n                    0,\n                    255\n                ],\n                gainsboro: [\n                    220,\n                    220,\n                    220\n                ],\n                ghostwhite: [\n                    248,\n                    248,\n                    255\n                ],\n                gold: [\n                    255,\n                    215,\n                    0\n                ],\n                goldenrod: [\n                    218,\n                    165,\n                    32\n                ],\n                gray: [\n                    128,\n                    128,\n                    128\n                ],\n                green: [\n                    0,\n                    128,\n                    0\n                ],\n                greenyellow: [\n                    173,\n                    255,\n                    47\n                ],\n                grey: [\n                    128,\n                    128,\n                    128\n                ],\n                honeydew: [\n                    240,\n                    255,\n                    240\n                ],\n                hotpink: [\n                    255,\n                    105,\n                    180\n                ],\n                indianred: [\n                    205,\n                    92,\n                    92\n                ],\n                indigo: [\n                    75,\n                    0,\n                    130\n                ],\n                ivory: [\n                    255,\n                    255,\n                    240\n                ],\n                khaki: [\n                    240,\n                    230,\n                    140\n                ],\n                lavender: [\n                    230,\n                    230,\n                    250\n                ],\n                lavenderblush: [\n                    255,\n                    240,\n                    245\n                ],\n                lawngreen: [\n                    124,\n                    252,\n                    0\n                ],\n                lemonchiffon: [\n                    255,\n                    250,\n                    205\n                ],\n                lightblue: [\n                    173,\n                    216,\n                    230\n                ],\n                lightcoral: [\n                    240,\n                    128,\n                    128\n                ],\n                lightcyan: [\n                    224,\n                    255,\n                    255\n                ],\n                lightgoldenrodyellow: [\n                    250,\n                    250,\n                    210\n                ],\n                lightgray: [\n                    211,\n                    211,\n                    211\n                ],\n                lightgreen: [\n                    144,\n                    238,\n                    144\n                ],\n                lightgrey: [\n                    211,\n                    211,\n                    211\n                ],\n                lightpink: [\n                    255,\n                    182,\n                    193\n                ],\n                lightsalmon: [\n                    255,\n                    160,\n                    122\n                ],\n                lightseagreen: [\n                    32,\n                    178,\n                    170\n                ],\n                lightskyblue: [\n                    135,\n                    206,\n                    250\n                ],\n                lightslategray: [\n                    119,\n                    136,\n                    153\n                ],\n                lightslategrey: [\n                    119,\n                    136,\n                    153\n                ],\n                lightsteelblue: [\n                    176,\n                    196,\n                    222\n                ],\n                lightyellow: [\n                    255,\n                    255,\n                    224\n                ],\n                lime: [\n                    0,\n                    255,\n                    0\n                ],\n                limegreen: [\n                    50,\n                    205,\n                    50\n                ],\n                linen: [\n                    250,\n                    240,\n                    230\n                ],\n                magenta: [\n                    255,\n                    0,\n                    255\n                ],\n                maroon: [\n                    128,\n                    0,\n                    0\n                ],\n                mediumaquamarine: [\n                    102,\n                    205,\n                    170\n                ],\n                mediumblue: [\n                    0,\n                    0,\n                    205\n                ],\n                mediumorchid: [\n                    186,\n                    85,\n                    211\n                ],\n                mediumpurple: [\n                    147,\n                    112,\n                    219\n                ],\n                mediumseagreen: [\n                    60,\n                    179,\n                    113\n                ],\n                mediumslateblue: [\n                    123,\n                    104,\n                    238\n                ],\n                mediumspringgreen: [\n                    0,\n                    250,\n                    154\n                ],\n                mediumturquoise: [\n                    72,\n                    209,\n                    204\n                ],\n                mediumvioletred: [\n                    199,\n                    21,\n                    133\n                ],\n                midnightblue: [\n                    25,\n                    25,\n                    112\n                ],\n                mintcream: [\n                    245,\n                    255,\n                    250\n                ],\n                mistyrose: [\n                    255,\n                    228,\n                    225\n                ],\n                moccasin: [\n                    255,\n                    228,\n                    181\n                ],\n                navajowhite: [\n                    255,\n                    222,\n                    173\n                ],\n                navy: [\n                    0,\n                    0,\n                    128\n                ],\n                oldlace: [\n                    253,\n                    245,\n                    230\n                ],\n                olive: [\n                    128,\n                    128,\n                    0\n                ],\n                olivedrab: [\n                    107,\n                    142,\n                    35\n                ],\n                orange: [\n                    255,\n                    165,\n                    0\n                ],\n                orangered: [\n                    255,\n                    69,\n                    0\n                ],\n                orchid: [\n                    218,\n                    112,\n                    214\n                ],\n                palegoldenrod: [\n                    238,\n                    232,\n                    170\n                ],\n                palegreen: [\n                    152,\n                    251,\n                    152\n                ],\n                paleturquoise: [\n                    175,\n                    238,\n                    238\n                ],\n                palevioletred: [\n                    219,\n                    112,\n                    147\n                ],\n                papayawhip: [\n                    255,\n                    239,\n                    213\n                ],\n                peachpuff: [\n                    255,\n                    218,\n                    185\n                ],\n                peru: [\n                    205,\n                    133,\n                    63\n                ],\n                pink: [\n                    255,\n                    192,\n                    203\n                ],\n                plum: [\n                    221,\n                    160,\n                    221\n                ],\n                powderblue: [\n                    176,\n                    224,\n                    230\n                ],\n                purple: [\n                    128,\n                    0,\n                    128\n                ],\n                rebeccapurple: [\n                    102,\n                    51,\n                    153\n                ],\n                red: [\n                    255,\n                    0,\n                    0\n                ],\n                rosybrown: [\n                    188,\n                    143,\n                    143\n                ],\n                royalblue: [\n                    65,\n                    105,\n                    225\n                ],\n                saddlebrown: [\n                    139,\n                    69,\n                    19\n                ],\n                salmon: [\n                    250,\n                    128,\n                    114\n                ],\n                sandybrown: [\n                    244,\n                    164,\n                    96\n                ],\n                seagreen: [\n                    46,\n                    139,\n                    87\n                ],\n                seashell: [\n                    255,\n                    245,\n                    238\n                ],\n                sienna: [\n                    160,\n                    82,\n                    45\n                ],\n                silver: [\n                    192,\n                    192,\n                    192\n                ],\n                skyblue: [\n                    135,\n                    206,\n                    235\n                ],\n                slateblue: [\n                    106,\n                    90,\n                    205\n                ],\n                slategray: [\n                    112,\n                    128,\n                    144\n                ],\n                slategrey: [\n                    112,\n                    128,\n                    144\n                ],\n                snow: [\n                    255,\n                    250,\n                    250\n                ],\n                springgreen: [\n                    0,\n                    255,\n                    127\n                ],\n                steelblue: [\n                    70,\n                    130,\n                    180\n                ],\n                tan: [\n                    210,\n                    180,\n                    140\n                ],\n                teal: [\n                    0,\n                    128,\n                    128\n                ],\n                thistle: [\n                    216,\n                    191,\n                    216\n                ],\n                tomato: [\n                    255,\n                    99,\n                    71\n                ],\n                turquoise: [\n                    64,\n                    224,\n                    208\n                ],\n                violet: [\n                    238,\n                    130,\n                    238\n                ],\n                wheat: [\n                    245,\n                    222,\n                    179\n                ],\n                white: [\n                    255,\n                    255,\n                    255\n                ],\n                whitesmoke: [\n                    245,\n                    245,\n                    245\n                ],\n                yellow: [\n                    255,\n                    255,\n                    0\n                ],\n                yellowgreen: [\n                    154,\n                    205,\n                    50\n                ]\n            };\n        },\n        379: (r)=>{\n            \"use strict\";\n            var e = /[|\\\\{}()[\\]^$+*?.]/g;\n            r.exports = function(r) {\n                if (typeof r !== \"string\") {\n                    throw new TypeError(\"Expected a string\");\n                }\n                return r.replace(e, \"\\\\$&\");\n            };\n        },\n        343: (r)=>{\n            \"use strict\";\n            r.exports = (r, e)=>{\n                e = e || process.argv;\n                const n = r.startsWith(\"-\") ? \"\" : r.length === 1 ? \"-\" : \"--\";\n                const t = e.indexOf(n + r);\n                const a = e.indexOf(\"--\");\n                return t !== -1 && (a === -1 ? true : t < a);\n            };\n        },\n        220: (r, e, n)=>{\n            \"use strict\";\n            const t = n(37);\n            const a = n(343);\n            const o = process.env;\n            let s;\n            if (a(\"no-color\") || a(\"no-colors\") || a(\"color=false\")) {\n                s = false;\n            } else if (a(\"color\") || a(\"colors\") || a(\"color=true\") || a(\"color=always\")) {\n                s = true;\n            }\n            if (\"FORCE_COLOR\" in o) {\n                s = o.FORCE_COLOR.length === 0 || parseInt(o.FORCE_COLOR, 10) !== 0;\n            }\n            function translateLevel(r) {\n                if (r === 0) {\n                    return false;\n                }\n                return {\n                    level: r,\n                    hasBasic: true,\n                    has256: r >= 2,\n                    has16m: r >= 3\n                };\n            }\n            function supportsColor(r) {\n                if (s === false) {\n                    return 0;\n                }\n                if (a(\"color=16m\") || a(\"color=full\") || a(\"color=truecolor\")) {\n                    return 3;\n                }\n                if (a(\"color=256\")) {\n                    return 2;\n                }\n                if (r && !r.isTTY && s !== true) {\n                    return 0;\n                }\n                const e = s ? 1 : 0;\n                if (process.platform === \"win32\") {\n                    const r = t.release().split(\".\");\n                    if (Number(process.versions.node.split(\".\")[0]) >= 8 && Number(r[0]) >= 10 && Number(r[2]) >= 10586) {\n                        return Number(r[2]) >= 14931 ? 3 : 2;\n                    }\n                    return 1;\n                }\n                if (\"CI\" in o) {\n                    if ([\n                        \"TRAVIS\",\n                        \"CIRCLECI\",\n                        \"APPVEYOR\",\n                        \"GITLAB_CI\"\n                    ].some((r)=>r in o) || o.CI_NAME === \"codeship\") {\n                        return 1;\n                    }\n                    return e;\n                }\n                if (\"TEAMCITY_VERSION\" in o) {\n                    return /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(o.TEAMCITY_VERSION) ? 1 : 0;\n                }\n                if (o.COLORTERM === \"truecolor\") {\n                    return 3;\n                }\n                if (\"TERM_PROGRAM\" in o) {\n                    const r = parseInt((o.TERM_PROGRAM_VERSION || \"\").split(\".\")[0], 10);\n                    switch(o.TERM_PROGRAM){\n                        case \"iTerm.app\":\n                            return r >= 3 ? 3 : 2;\n                        case \"Apple_Terminal\":\n                            return 2;\n                    }\n                }\n                if (/-256(color)?$/i.test(o.TERM)) {\n                    return 2;\n                }\n                if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(o.TERM)) {\n                    return 1;\n                }\n                if (\"COLORTERM\" in o) {\n                    return 1;\n                }\n                if (o.TERM === \"dumb\") {\n                    return e;\n                }\n                return e;\n            }\n            function getSupportLevel(r) {\n                const e = supportsColor(r);\n                return translateLevel(e);\n            }\n            r.exports = {\n                supportsColor: getSupportLevel,\n                stdout: getSupportLevel(process.stdout),\n                stderr: getSupportLevel(process.stderr)\n            };\n        },\n        37: (r)=>{\n            \"use strict\";\n            r.exports = __webpack_require__(/*! os */ \"os\");\n        }\n    };\n    var e = {};\n    function __nccwpck_require__(n) {\n        var t = e[n];\n        if (t !== undefined) {\n            return t.exports;\n        }\n        var a = e[n] = {\n            id: n,\n            loaded: false,\n            exports: {}\n        };\n        var o = true;\n        try {\n            r[n](a, a.exports, __nccwpck_require__);\n            o = false;\n        } finally{\n            if (o) delete e[n];\n        }\n        a.loaded = true;\n        return a.exports;\n    }\n    (()=>{\n        __nccwpck_require__.nmd = (r)=>{\n            r.paths = [];\n            if (!r.children) r.children = [];\n            return r;\n        };\n    })();\n    if (typeof __nccwpck_require__ !== \"undefined\") __nccwpck_require__.ab = __dirname + \"/\";\n    var n = __nccwpck_require__(148);\n    module.exports = n;\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/chalk/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/cookie/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/next/dist/compiled/cookie/index.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("\n(()=>{\n    \"use strict\";\n    if (typeof __nccwpck_require__ !== \"undefined\") __nccwpck_require__.ab = __dirname + \"/\";\n    var e = {};\n    (()=>{\n        var r = e;\n        /*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */ r.parse = parse;\n        r.serialize = serialize;\n        var i = decodeURIComponent;\n        var t = encodeURIComponent;\n        var a = /; */;\n        var n = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n        function parse(e, r) {\n            if (typeof e !== \"string\") {\n                throw new TypeError(\"argument str must be a string\");\n            }\n            var t = {};\n            var n = r || {};\n            var o = e.split(a);\n            var s = n.decode || i;\n            for(var p = 0; p < o.length; p++){\n                var f = o[p];\n                var u = f.indexOf(\"=\");\n                if (u < 0) {\n                    continue;\n                }\n                var v = f.substr(0, u).trim();\n                var c = f.substr(++u, f.length).trim();\n                if ('\"' == c[0]) {\n                    c = c.slice(1, -1);\n                }\n                if (undefined == t[v]) {\n                    t[v] = tryDecode(c, s);\n                }\n            }\n            return t;\n        }\n        function serialize(e, r, i) {\n            var a = i || {};\n            var o = a.encode || t;\n            if (typeof o !== \"function\") {\n                throw new TypeError(\"option encode is invalid\");\n            }\n            if (!n.test(e)) {\n                throw new TypeError(\"argument name is invalid\");\n            }\n            var s = o(r);\n            if (s && !n.test(s)) {\n                throw new TypeError(\"argument val is invalid\");\n            }\n            var p = e + \"=\" + s;\n            if (null != a.maxAge) {\n                var f = a.maxAge - 0;\n                if (isNaN(f) || !isFinite(f)) {\n                    throw new TypeError(\"option maxAge is invalid\");\n                }\n                p += \"; Max-Age=\" + Math.floor(f);\n            }\n            if (a.domain) {\n                if (!n.test(a.domain)) {\n                    throw new TypeError(\"option domain is invalid\");\n                }\n                p += \"; Domain=\" + a.domain;\n            }\n            if (a.path) {\n                if (!n.test(a.path)) {\n                    throw new TypeError(\"option path is invalid\");\n                }\n                p += \"; Path=\" + a.path;\n            }\n            if (a.expires) {\n                if (typeof a.expires.toUTCString !== \"function\") {\n                    throw new TypeError(\"option expires is invalid\");\n                }\n                p += \"; Expires=\" + a.expires.toUTCString();\n            }\n            if (a.httpOnly) {\n                p += \"; HttpOnly\";\n            }\n            if (a.secure) {\n                p += \"; Secure\";\n            }\n            if (a.sameSite) {\n                var u = typeof a.sameSite === \"string\" ? a.sameSite.toLowerCase() : a.sameSite;\n                switch(u){\n                    case true:\n                        p += \"; SameSite=Strict\";\n                        break;\n                    case \"lax\":\n                        p += \"; SameSite=Lax\";\n                        break;\n                    case \"strict\":\n                        p += \"; SameSite=Strict\";\n                        break;\n                    case \"none\":\n                        p += \"; SameSite=None\";\n                        break;\n                    default:\n                        throw new TypeError(\"option sameSite is invalid\");\n                }\n            }\n            return p;\n        }\n        function tryDecode(e, r) {\n            try {\n                return r(e);\n            } catch (r) {\n                return e;\n            }\n        }\n    })();\n    module.exports = e;\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL2Nvb2tpZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUM7SUFBSztJQUFhLElBQUcsT0FBT0Esd0JBQXNCLGFBQVlBLG9CQUFvQkMsRUFBRSxHQUFDQyxZQUFVO0lBQUksSUFBSUMsSUFBRSxDQUFDO0lBQUc7UUFBSyxJQUFJQyxJQUFFRDtRQUN6SDs7Ozs7Q0FLQyxHQUFFQyxFQUFFQyxLQUFLLEdBQUNBO1FBQU1ELEVBQUVFLFNBQVMsR0FBQ0E7UUFBVSxJQUFJQyxJQUFFQztRQUFtQixJQUFJQyxJQUFFQztRQUFtQixJQUFJQyxJQUFFO1FBQU0sSUFBSUMsSUFBRTtRQUF3QyxTQUFTUCxNQUFNRixDQUFDLEVBQUNDLENBQUM7WUFBRSxJQUFHLE9BQU9ELE1BQUksVUFBUztnQkFBQyxNQUFNLElBQUlVLFVBQVU7WUFBZ0M7WUFBQyxJQUFJSixJQUFFLENBQUM7WUFBRSxJQUFJRyxJQUFFUixLQUFHLENBQUM7WUFBRSxJQUFJVSxJQUFFWCxFQUFFWSxLQUFLLENBQUNKO1lBQUcsSUFBSUssSUFBRUosRUFBRUssTUFBTSxJQUFFVjtZQUFFLElBQUksSUFBSVcsSUFBRSxHQUFFQSxJQUFFSixFQUFFSyxNQUFNLEVBQUNELElBQUk7Z0JBQUMsSUFBSUUsSUFBRU4sQ0FBQyxDQUFDSSxFQUFFO2dCQUFDLElBQUlHLElBQUVELEVBQUVFLE9BQU8sQ0FBQztnQkFBSyxJQUFHRCxJQUFFLEdBQUU7b0JBQUM7Z0JBQVE7Z0JBQUMsSUFBSUUsSUFBRUgsRUFBRUksTUFBTSxDQUFDLEdBQUVILEdBQUdJLElBQUk7Z0JBQUcsSUFBSUMsSUFBRU4sRUFBRUksTUFBTSxDQUFDLEVBQUVILEdBQUVELEVBQUVELE1BQU0sRUFBRU0sSUFBSTtnQkFBRyxJQUFHLE9BQUtDLENBQUMsQ0FBQyxFQUFFLEVBQUM7b0JBQUNBLElBQUVBLEVBQUVDLEtBQUssQ0FBQyxHQUFFLENBQUM7Z0JBQUU7Z0JBQUMsSUFBR0MsYUFBV25CLENBQUMsQ0FBQ2MsRUFBRSxFQUFDO29CQUFDZCxDQUFDLENBQUNjLEVBQUUsR0FBQ00sVUFBVUgsR0FBRVY7Z0JBQUU7WUFBQztZQUFDLE9BQU9QO1FBQUM7UUFBQyxTQUFTSCxVQUFVSCxDQUFDLEVBQUNDLENBQUMsRUFBQ0csQ0FBQztZQUFFLElBQUlJLElBQUVKLEtBQUcsQ0FBQztZQUFFLElBQUlPLElBQUVILEVBQUVtQixNQUFNLElBQUVyQjtZQUFFLElBQUcsT0FBT0ssTUFBSSxZQUFXO2dCQUFDLE1BQU0sSUFBSUQsVUFBVTtZQUEyQjtZQUFDLElBQUcsQ0FBQ0QsRUFBRW1CLElBQUksQ0FBQzVCLElBQUc7Z0JBQUMsTUFBTSxJQUFJVSxVQUFVO1lBQTJCO1lBQUMsSUFBSUcsSUFBRUYsRUFBRVY7WUFBRyxJQUFHWSxLQUFHLENBQUNKLEVBQUVtQixJQUFJLENBQUNmLElBQUc7Z0JBQUMsTUFBTSxJQUFJSCxVQUFVO1lBQTBCO1lBQUMsSUFBSUssSUFBRWYsSUFBRSxNQUFJYTtZQUFFLElBQUcsUUFBTUwsRUFBRXFCLE1BQU0sRUFBQztnQkFBQyxJQUFJWixJQUFFVCxFQUFFcUIsTUFBTSxHQUFDO2dCQUFFLElBQUdDLE1BQU1iLE1BQUksQ0FBQ2MsU0FBU2QsSUFBRztvQkFBQyxNQUFNLElBQUlQLFVBQVU7Z0JBQTJCO2dCQUFDSyxLQUFHLGVBQWFpQixLQUFLQyxLQUFLLENBQUNoQjtZQUFFO1lBQUMsSUFBR1QsRUFBRTBCLE1BQU0sRUFBQztnQkFBQyxJQUFHLENBQUN6QixFQUFFbUIsSUFBSSxDQUFDcEIsRUFBRTBCLE1BQU0sR0FBRTtvQkFBQyxNQUFNLElBQUl4QixVQUFVO2dCQUEyQjtnQkFBQ0ssS0FBRyxjQUFZUCxFQUFFMEIsTUFBTTtZQUFBO1lBQUMsSUFBRzFCLEVBQUUyQixJQUFJLEVBQUM7Z0JBQUMsSUFBRyxDQUFDMUIsRUFBRW1CLElBQUksQ0FBQ3BCLEVBQUUyQixJQUFJLEdBQUU7b0JBQUMsTUFBTSxJQUFJekIsVUFBVTtnQkFBeUI7Z0JBQUNLLEtBQUcsWUFBVVAsRUFBRTJCLElBQUk7WUFBQTtZQUFDLElBQUczQixFQUFFNEIsT0FBTyxFQUFDO2dCQUFDLElBQUcsT0FBTzVCLEVBQUU0QixPQUFPLENBQUNDLFdBQVcsS0FBRyxZQUFXO29CQUFDLE1BQU0sSUFBSTNCLFVBQVU7Z0JBQTRCO2dCQUFDSyxLQUFHLGVBQWFQLEVBQUU0QixPQUFPLENBQUNDLFdBQVc7WUFBRTtZQUFDLElBQUc3QixFQUFFOEIsUUFBUSxFQUFDO2dCQUFDdkIsS0FBRztZQUFZO1lBQUMsSUFBR1AsRUFBRStCLE1BQU0sRUFBQztnQkFBQ3hCLEtBQUc7WUFBVTtZQUFDLElBQUdQLEVBQUVnQyxRQUFRLEVBQUM7Z0JBQUMsSUFBSXRCLElBQUUsT0FBT1YsRUFBRWdDLFFBQVEsS0FBRyxXQUFTaEMsRUFBRWdDLFFBQVEsQ0FBQ0MsV0FBVyxLQUFHakMsRUFBRWdDLFFBQVE7Z0JBQUMsT0FBT3RCO29CQUFHLEtBQUs7d0JBQUtILEtBQUc7d0JBQW9CO29CQUFNLEtBQUk7d0JBQU1BLEtBQUc7d0JBQWlCO29CQUFNLEtBQUk7d0JBQVNBLEtBQUc7d0JBQW9CO29CQUFNLEtBQUk7d0JBQU9BLEtBQUc7d0JBQWtCO29CQUFNO3dCQUFRLE1BQU0sSUFBSUwsVUFBVTtnQkFBNkI7WUFBQztZQUFDLE9BQU9LO1FBQUM7UUFBQyxTQUFTVyxVQUFVMUIsQ0FBQyxFQUFDQyxDQUFDO1lBQUUsSUFBRztnQkFBQyxPQUFPQSxFQUFFRDtZQUFFLEVBQUMsT0FBTUMsR0FBRTtnQkFBQyxPQUFPRDtZQUFDO1FBQUM7SUFBQztJQUFLMEMsT0FBT0MsT0FBTyxHQUFDM0M7QUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2QtYmxvZy8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvY29va2llL2luZGV4LmpzP2IyNWUiXSwic291cmNlc0NvbnRlbnQiOlsiKCgpPT57XCJ1c2Ugc3RyaWN0XCI7aWYodHlwZW9mIF9fbmNjd3Bja19yZXF1aXJlX18hPT1cInVuZGVmaW5lZFwiKV9fbmNjd3Bja19yZXF1aXJlX18uYWI9X19kaXJuYW1lK1wiL1wiO3ZhciBlPXt9OygoKT0+e3ZhciByPWU7XG4vKiFcbiAqIGNvb2tpZVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBSb21hbiBTaHR5bG1hblxuICogQ29weXJpZ2h0KGMpIDIwMTUgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovci5wYXJzZT1wYXJzZTtyLnNlcmlhbGl6ZT1zZXJpYWxpemU7dmFyIGk9ZGVjb2RlVVJJQ29tcG9uZW50O3ZhciB0PWVuY29kZVVSSUNvbXBvbmVudDt2YXIgYT0vOyAqLzt2YXIgbj0vXltcXHUwMDA5XFx1MDAyMC1cXHUwMDdlXFx1MDA4MC1cXHUwMGZmXSskLztmdW5jdGlvbiBwYXJzZShlLHIpe2lmKHR5cGVvZiBlIT09XCJzdHJpbmdcIil7dGhyb3cgbmV3IFR5cGVFcnJvcihcImFyZ3VtZW50IHN0ciBtdXN0IGJlIGEgc3RyaW5nXCIpfXZhciB0PXt9O3ZhciBuPXJ8fHt9O3ZhciBvPWUuc3BsaXQoYSk7dmFyIHM9bi5kZWNvZGV8fGk7Zm9yKHZhciBwPTA7cDxvLmxlbmd0aDtwKyspe3ZhciBmPW9bcF07dmFyIHU9Zi5pbmRleE9mKFwiPVwiKTtpZih1PDApe2NvbnRpbnVlfXZhciB2PWYuc3Vic3RyKDAsdSkudHJpbSgpO3ZhciBjPWYuc3Vic3RyKCsrdSxmLmxlbmd0aCkudHJpbSgpO2lmKCdcIic9PWNbMF0pe2M9Yy5zbGljZSgxLC0xKX1pZih1bmRlZmluZWQ9PXRbdl0pe3Rbdl09dHJ5RGVjb2RlKGMscyl9fXJldHVybiB0fWZ1bmN0aW9uIHNlcmlhbGl6ZShlLHIsaSl7dmFyIGE9aXx8e307dmFyIG89YS5lbmNvZGV8fHQ7aWYodHlwZW9mIG8hPT1cImZ1bmN0aW9uXCIpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJvcHRpb24gZW5jb2RlIGlzIGludmFsaWRcIil9aWYoIW4udGVzdChlKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcImFyZ3VtZW50IG5hbWUgaXMgaW52YWxpZFwiKX12YXIgcz1vKHIpO2lmKHMmJiFuLnRlc3Qocykpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJhcmd1bWVudCB2YWwgaXMgaW52YWxpZFwiKX12YXIgcD1lK1wiPVwiK3M7aWYobnVsbCE9YS5tYXhBZ2Upe3ZhciBmPWEubWF4QWdlLTA7aWYoaXNOYU4oZil8fCFpc0Zpbml0ZShmKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIm9wdGlvbiBtYXhBZ2UgaXMgaW52YWxpZFwiKX1wKz1cIjsgTWF4LUFnZT1cIitNYXRoLmZsb29yKGYpfWlmKGEuZG9tYWluKXtpZighbi50ZXN0KGEuZG9tYWluKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIm9wdGlvbiBkb21haW4gaXMgaW52YWxpZFwiKX1wKz1cIjsgRG9tYWluPVwiK2EuZG9tYWlufWlmKGEucGF0aCl7aWYoIW4udGVzdChhLnBhdGgpKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwib3B0aW9uIHBhdGggaXMgaW52YWxpZFwiKX1wKz1cIjsgUGF0aD1cIithLnBhdGh9aWYoYS5leHBpcmVzKXtpZih0eXBlb2YgYS5leHBpcmVzLnRvVVRDU3RyaW5nIT09XCJmdW5jdGlvblwiKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwib3B0aW9uIGV4cGlyZXMgaXMgaW52YWxpZFwiKX1wKz1cIjsgRXhwaXJlcz1cIithLmV4cGlyZXMudG9VVENTdHJpbmcoKX1pZihhLmh0dHBPbmx5KXtwKz1cIjsgSHR0cE9ubHlcIn1pZihhLnNlY3VyZSl7cCs9XCI7IFNlY3VyZVwifWlmKGEuc2FtZVNpdGUpe3ZhciB1PXR5cGVvZiBhLnNhbWVTaXRlPT09XCJzdHJpbmdcIj9hLnNhbWVTaXRlLnRvTG93ZXJDYXNlKCk6YS5zYW1lU2l0ZTtzd2l0Y2godSl7Y2FzZSB0cnVlOnArPVwiOyBTYW1lU2l0ZT1TdHJpY3RcIjticmVhaztjYXNlXCJsYXhcIjpwKz1cIjsgU2FtZVNpdGU9TGF4XCI7YnJlYWs7Y2FzZVwic3RyaWN0XCI6cCs9XCI7IFNhbWVTaXRlPVN0cmljdFwiO2JyZWFrO2Nhc2VcIm5vbmVcIjpwKz1cIjsgU2FtZVNpdGU9Tm9uZVwiO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IFR5cGVFcnJvcihcIm9wdGlvbiBzYW1lU2l0ZSBpcyBpbnZhbGlkXCIpfX1yZXR1cm4gcH1mdW5jdGlvbiB0cnlEZWNvZGUoZSxyKXt0cnl7cmV0dXJuIHIoZSl9Y2F0Y2gocil7cmV0dXJuIGV9fX0pKCk7bW9kdWxlLmV4cG9ydHM9ZX0pKCk7Il0sIm5hbWVzIjpbIl9fbmNjd3Bja19yZXF1aXJlX18iLCJhYiIsIl9fZGlybmFtZSIsImUiLCJyIiwicGFyc2UiLCJzZXJpYWxpemUiLCJpIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwidCIsImVuY29kZVVSSUNvbXBvbmVudCIsImEiLCJuIiwiVHlwZUVycm9yIiwibyIsInNwbGl0IiwicyIsImRlY29kZSIsInAiLCJsZW5ndGgiLCJmIiwidSIsImluZGV4T2YiLCJ2Iiwic3Vic3RyIiwidHJpbSIsImMiLCJzbGljZSIsInVuZGVmaW5lZCIsInRyeURlY29kZSIsImVuY29kZSIsInRlc3QiLCJtYXhBZ2UiLCJpc05hTiIsImlzRmluaXRlIiwiTWF0aCIsImZsb29yIiwiZG9tYWluIiwicGF0aCIsImV4cGlyZXMiLCJ0b1VUQ1N0cmluZyIsImh0dHBPbmx5Iiwic2VjdXJlIiwic2FtZVNpdGUiLCJ0b0xvd2VyQ2FzZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/cookie/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/lib/chalk.js":
/*!*********************************************!*\
  !*** ./node_modules/next/dist/lib/chalk.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"default\", ({\n    enumerable: true,\n    get: function() {\n        return _default;\n    }\n}));\nlet chalk;\nif (false) {} else {\n    chalk = __webpack_require__(/*! next/dist/compiled/chalk */ \"(rsc)/./node_modules/next/dist/compiled/chalk/index.js\");\n}\nconst _default = chalk; //# sourceMappingURL=chalk.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2xpYi9jaGFsay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsMkNBQTBDO0lBQ3RDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsSUFBSUM7QUFDSixJQUFJQyxLQUFtQyxFQUFFLEVBRXhDLE1BQU07SUFDSEQsUUFBUUksbUJBQU9BLENBQUMsd0ZBQTBCO0FBQzlDO0FBQ0EsTUFBTUwsV0FBV0MsT0FFakIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vZC1ibG9nLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9saWIvY2hhbGsuanM/NTQ5MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9kZWZhdWx0O1xuICAgIH1cbn0pO1xubGV0IGNoYWxrO1xuaWYgKHByb2Nlc3MuZW52Lk5FWFRfUlVOVElNRSA9PT0gXCJlZGdlXCIpIHtcbiAgICBjaGFsayA9IHJlcXVpcmUoXCIuL3dlYi9jaGFsa1wiKS5kZWZhdWx0O1xufSBlbHNlIHtcbiAgICBjaGFsayA9IHJlcXVpcmUoXCJuZXh0L2Rpc3QvY29tcGlsZWQvY2hhbGtcIik7XG59XG5jb25zdCBfZGVmYXVsdCA9IGNoYWxrO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGFsay5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX2RlZmF1bHQiLCJjaGFsayIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1JVTlRJTUUiLCJyZXF1aXJlIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/lib/chalk.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/lib/constants.js":
/*!*************************************************!*\
  !*** ./node_modules/next/dist/lib/constants.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    NEXT_QUERY_PARAM_PREFIX: function() {\n        return NEXT_QUERY_PARAM_PREFIX;\n    },\n    PRERENDER_REVALIDATE_HEADER: function() {\n        return PRERENDER_REVALIDATE_HEADER;\n    },\n    PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER: function() {\n        return PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER;\n    },\n    CACHE_ONE_YEAR: function() {\n        return CACHE_ONE_YEAR;\n    },\n    MIDDLEWARE_FILENAME: function() {\n        return MIDDLEWARE_FILENAME;\n    },\n    MIDDLEWARE_LOCATION_REGEXP: function() {\n        return MIDDLEWARE_LOCATION_REGEXP;\n    },\n    INSTRUMENTATION_HOOK_FILENAME: function() {\n        return INSTRUMENTATION_HOOK_FILENAME;\n    },\n    INSTRUMENTATION_HOOKS_LOCATION_REGEXP: function() {\n        return INSTRUMENTATION_HOOKS_LOCATION_REGEXP;\n    },\n    PAGES_DIR_ALIAS: function() {\n        return PAGES_DIR_ALIAS;\n    },\n    DOT_NEXT_ALIAS: function() {\n        return DOT_NEXT_ALIAS;\n    },\n    ROOT_DIR_ALIAS: function() {\n        return ROOT_DIR_ALIAS;\n    },\n    APP_DIR_ALIAS: function() {\n        return APP_DIR_ALIAS;\n    },\n    RSC_MOD_REF_PROXY_ALIAS: function() {\n        return RSC_MOD_REF_PROXY_ALIAS;\n    },\n    RSC_ACTION_VALIDATE_ALIAS: function() {\n        return RSC_ACTION_VALIDATE_ALIAS;\n    },\n    RSC_ACTION_PROXY_ALIAS: function() {\n        return RSC_ACTION_PROXY_ALIAS;\n    },\n    RSC_ACTION_CLIENT_WRAPPER_ALIAS: function() {\n        return RSC_ACTION_CLIENT_WRAPPER_ALIAS;\n    },\n    PUBLIC_DIR_MIDDLEWARE_CONFLICT: function() {\n        return PUBLIC_DIR_MIDDLEWARE_CONFLICT;\n    },\n    SSG_GET_INITIAL_PROPS_CONFLICT: function() {\n        return SSG_GET_INITIAL_PROPS_CONFLICT;\n    },\n    SERVER_PROPS_GET_INIT_PROPS_CONFLICT: function() {\n        return SERVER_PROPS_GET_INIT_PROPS_CONFLICT;\n    },\n    SERVER_PROPS_SSG_CONFLICT: function() {\n        return SERVER_PROPS_SSG_CONFLICT;\n    },\n    STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR: function() {\n        return STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR;\n    },\n    SERVER_PROPS_EXPORT_ERROR: function() {\n        return SERVER_PROPS_EXPORT_ERROR;\n    },\n    GSP_NO_RETURNED_VALUE: function() {\n        return GSP_NO_RETURNED_VALUE;\n    },\n    GSSP_NO_RETURNED_VALUE: function() {\n        return GSSP_NO_RETURNED_VALUE;\n    },\n    UNSTABLE_REVALIDATE_RENAME_ERROR: function() {\n        return UNSTABLE_REVALIDATE_RENAME_ERROR;\n    },\n    GSSP_COMPONENT_MEMBER_ERROR: function() {\n        return GSSP_COMPONENT_MEMBER_ERROR;\n    },\n    NON_STANDARD_NODE_ENV: function() {\n        return NON_STANDARD_NODE_ENV;\n    },\n    SSG_FALLBACK_EXPORT_ERROR: function() {\n        return SSG_FALLBACK_EXPORT_ERROR;\n    },\n    ESLINT_DEFAULT_DIRS: function() {\n        return ESLINT_DEFAULT_DIRS;\n    },\n    ESLINT_DEFAULT_DIRS_WITH_APP: function() {\n        return ESLINT_DEFAULT_DIRS_WITH_APP;\n    },\n    ESLINT_PROMPT_VALUES: function() {\n        return ESLINT_PROMPT_VALUES;\n    },\n    SERVER_RUNTIME: function() {\n        return SERVER_RUNTIME;\n    },\n    WEBPACK_LAYERS: function() {\n        return WEBPACK_LAYERS;\n    },\n    WEBPACK_RESOURCE_QUERIES: function() {\n        return WEBPACK_RESOURCE_QUERIES;\n    }\n});\nconst NEXT_QUERY_PARAM_PREFIX = \"nxtP\";\nconst PRERENDER_REVALIDATE_HEADER = \"x-prerender-revalidate\";\nconst PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER = \"x-prerender-revalidate-if-generated\";\nconst CACHE_ONE_YEAR = 31536000;\nconst MIDDLEWARE_FILENAME = \"middleware\";\nconst MIDDLEWARE_LOCATION_REGEXP = `(?:src/)?${MIDDLEWARE_FILENAME}`;\nconst INSTRUMENTATION_HOOK_FILENAME = \"instrumentation\";\nconst INSTRUMENTATION_HOOKS_LOCATION_REGEXP = `(?:src/)?${INSTRUMENTATION_HOOK_FILENAME}`;\nconst PAGES_DIR_ALIAS = \"private-next-pages\";\nconst DOT_NEXT_ALIAS = \"private-dot-next\";\nconst ROOT_DIR_ALIAS = \"private-next-root-dir\";\nconst APP_DIR_ALIAS = \"private-next-app-dir\";\nconst RSC_MOD_REF_PROXY_ALIAS = \"next/dist/build/webpack/loaders/next-flight-loader/module-proxy\";\nconst RSC_ACTION_VALIDATE_ALIAS = \"private-next-rsc-action-validate\";\nconst RSC_ACTION_PROXY_ALIAS = \"private-next-rsc-action-proxy\";\nconst RSC_ACTION_CLIENT_WRAPPER_ALIAS = \"private-next-rsc-action-client-wrapper\";\nconst PUBLIC_DIR_MIDDLEWARE_CONFLICT = `You can not have a '_next' folder inside of your public folder. This conflicts with the internal '/_next' route. https://nextjs.org/docs/messages/public-next-folder-conflict`;\nconst SSG_GET_INITIAL_PROPS_CONFLICT = `You can not use getInitialProps with getStaticProps. To use SSG, please remove your getInitialProps`;\nconst SERVER_PROPS_GET_INIT_PROPS_CONFLICT = `You can not use getInitialProps with getServerSideProps. Please remove getInitialProps.`;\nconst SERVER_PROPS_SSG_CONFLICT = `You can not use getStaticProps or getStaticPaths with getServerSideProps. To use SSG, please remove getServerSideProps`;\nconst STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR = `can not have getInitialProps/getServerSideProps, https://nextjs.org/docs/messages/404-get-initial-props`;\nconst SERVER_PROPS_EXPORT_ERROR = `pages with \\`getServerSideProps\\` can not be exported. See more info here: https://nextjs.org/docs/messages/gssp-export`;\nconst GSP_NO_RETURNED_VALUE = \"Your `getStaticProps` function did not return an object. Did you forget to add a `return`?\";\nconst GSSP_NO_RETURNED_VALUE = \"Your `getServerSideProps` function did not return an object. Did you forget to add a `return`?\";\nconst UNSTABLE_REVALIDATE_RENAME_ERROR = \"The `unstable_revalidate` property is available for general use.\\n\" + \"Please use `revalidate` instead.\";\nconst GSSP_COMPONENT_MEMBER_ERROR = `can not be attached to a page's component and must be exported from the page. See more info here: https://nextjs.org/docs/messages/gssp-component-member`;\nconst NON_STANDARD_NODE_ENV = `You are using a non-standard \"NODE_ENV\" value in your environment. This creates inconsistencies in the project and is strongly advised against. Read more: https://nextjs.org/docs/messages/non-standard-node-env`;\nconst SSG_FALLBACK_EXPORT_ERROR = `Pages with \\`fallback\\` enabled in \\`getStaticPaths\\` can not be exported. See more info here: https://nextjs.org/docs/messages/ssg-fallback-true-export`;\nconst ESLINT_DEFAULT_DIRS = [\n    \"pages\",\n    \"components\",\n    \"lib\",\n    \"src\"\n];\nconst ESLINT_DEFAULT_DIRS_WITH_APP = [\n    \"app\",\n    ...ESLINT_DEFAULT_DIRS\n];\nconst ESLINT_PROMPT_VALUES = [\n    {\n        title: \"Strict\",\n        recommended: true,\n        config: {\n            extends: \"next/core-web-vitals\"\n        }\n    },\n    {\n        title: \"Base\",\n        config: {\n            extends: \"next\"\n        }\n    },\n    {\n        title: \"Cancel\",\n        config: null\n    }\n];\nconst SERVER_RUNTIME = {\n    edge: \"edge\",\n    experimentalEdge: \"experimental-edge\",\n    nodejs: \"nodejs\"\n};\n/**\n * The names of the webpack layers. These layers are the primitives for the\n * webpack chunks.\n */ const WEBPACK_LAYERS_NAMES = {\n    /**\n   * The layer for the shared code between the client and server bundles.\n   */ shared: \"shared\",\n    /**\n   * React Server Components layer (rsc).\n   */ reactServerComponents: \"rsc\",\n    /**\n   * Server Side Rendering layer (ssr).\n   */ serverSideRendering: \"ssr\",\n    /**\n   * The browser client bundle layer for actions.\n   */ actionBrowser: \"actionBrowser\",\n    /**\n   * The layer for the API routes.\n   */ api: \"api\",\n    /**\n   * The layer for the middleware code.\n   */ middleware: \"middleware\",\n    /**\n   * The layer for assets on the edge.\n   */ edgeAsset: \"edge-asset\",\n    /**\n   * The browser client bundle layer for App directory.\n   */ appPagesBrowser: \"app-pages-browser\",\n    /**\n   * The server bundle layer for metadata routes.\n   */ appMetadataRoute: \"app-metadata-route\"\n};\nconst WEBPACK_LAYERS = {\n    ...WEBPACK_LAYERS_NAMES,\n    GROUP: {\n        server: [\n            WEBPACK_LAYERS_NAMES.reactServerComponents,\n            WEBPACK_LAYERS_NAMES.actionBrowser,\n            WEBPACK_LAYERS_NAMES.appMetadataRoute\n        ]\n    }\n};\nconst WEBPACK_RESOURCE_QUERIES = {\n    edgeSSREntry: \"__next_edge_ssr_entry__\",\n    metadata: \"__next_metadata__\",\n    metadataRoute: \"__next_metadata_route__\",\n    metadataImageMeta: \"__next_metadata_image_meta__\"\n}; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/lib/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/api-utils/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/next/dist/server/api-utils/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    getCookieParser: function() {\n        return getCookieParser;\n    },\n    sendStatusCode: function() {\n        return sendStatusCode;\n    },\n    redirect: function() {\n        return redirect;\n    },\n    checkIsOnDemandRevalidate: function() {\n        return checkIsOnDemandRevalidate;\n    },\n    COOKIE_NAME_PRERENDER_BYPASS: function() {\n        return COOKIE_NAME_PRERENDER_BYPASS;\n    },\n    COOKIE_NAME_PRERENDER_DATA: function() {\n        return COOKIE_NAME_PRERENDER_DATA;\n    },\n    RESPONSE_LIMIT_DEFAULT: function() {\n        return RESPONSE_LIMIT_DEFAULT;\n    },\n    SYMBOL_PREVIEW_DATA: function() {\n        return SYMBOL_PREVIEW_DATA;\n    },\n    SYMBOL_CLEARED_COOKIES: function() {\n        return SYMBOL_CLEARED_COOKIES;\n    },\n    clearPreviewData: function() {\n        return clearPreviewData;\n    },\n    ApiError: function() {\n        return ApiError;\n    },\n    sendError: function() {\n        return sendError;\n    },\n    setLazyProp: function() {\n        return setLazyProp;\n    }\n});\nconst _headers = __webpack_require__(/*! ../web/spec-extension/adapters/headers */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/headers.js\");\nconst _constants = __webpack_require__(/*! ../../lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\nfunction getCookieParser(headers) {\n    return function parseCookie() {\n        const { cookie } = headers;\n        if (!cookie) {\n            return {};\n        }\n        const { parse: parseCookieFn } = __webpack_require__(/*! next/dist/compiled/cookie */ \"(rsc)/./node_modules/next/dist/compiled/cookie/index.js\");\n        return parseCookieFn(Array.isArray(cookie) ? cookie.join(\"; \") : cookie);\n    };\n}\nfunction sendStatusCode(res, statusCode) {\n    res.statusCode = statusCode;\n    return res;\n}\nfunction redirect(res, statusOrUrl, url) {\n    if (typeof statusOrUrl === \"string\") {\n        url = statusOrUrl;\n        statusOrUrl = 307;\n    }\n    if (typeof statusOrUrl !== \"number\" || typeof url !== \"string\") {\n        throw new Error(`Invalid redirect arguments. Please use a single argument URL, e.g. res.redirect('/destination') or use a status code and URL, e.g. res.redirect(307, '/destination').`);\n    }\n    res.writeHead(statusOrUrl, {\n        Location: url\n    });\n    res.write(url);\n    res.end();\n    return res;\n}\nfunction checkIsOnDemandRevalidate(req, previewProps) {\n    const headers = _headers.HeadersAdapter.from(req.headers);\n    const previewModeId = headers.get(_constants.PRERENDER_REVALIDATE_HEADER);\n    const isOnDemandRevalidate = previewModeId === previewProps.previewModeId;\n    const revalidateOnlyGenerated = headers.has(_constants.PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER);\n    return {\n        isOnDemandRevalidate,\n        revalidateOnlyGenerated\n    };\n}\nconst COOKIE_NAME_PRERENDER_BYPASS = `__prerender_bypass`;\nconst COOKIE_NAME_PRERENDER_DATA = `__next_preview_data`;\nconst RESPONSE_LIMIT_DEFAULT = 4 * 1024 * 1024;\nconst SYMBOL_PREVIEW_DATA = Symbol(COOKIE_NAME_PRERENDER_DATA);\nconst SYMBOL_CLEARED_COOKIES = Symbol(COOKIE_NAME_PRERENDER_BYPASS);\nfunction clearPreviewData(res, options = {}) {\n    if (SYMBOL_CLEARED_COOKIES in res) {\n        return res;\n    }\n    const { serialize } = __webpack_require__(/*! next/dist/compiled/cookie */ \"(rsc)/./node_modules/next/dist/compiled/cookie/index.js\");\n    const previous = res.getHeader(\"Set-Cookie\");\n    res.setHeader(`Set-Cookie`, [\n        ...typeof previous === \"string\" ? [\n            previous\n        ] : Array.isArray(previous) ? previous : [],\n        serialize(COOKIE_NAME_PRERENDER_BYPASS, \"\", {\n            // To delete a cookie, set `expires` to a date in the past:\n            // https://tools.ietf.org/html/rfc6265#section-4.1.1\n            // `Max-Age: 0` is not valid, thus ignored, and the cookie is persisted.\n            expires: new Date(0),\n            httpOnly: true,\n            sameSite:  false ? 0 : \"lax\",\n            secure: \"development\" !== \"development\",\n            path: \"/\",\n            ...options.path !== undefined ? {\n                path: options.path\n            } : undefined\n        }),\n        serialize(COOKIE_NAME_PRERENDER_DATA, \"\", {\n            // To delete a cookie, set `expires` to a date in the past:\n            // https://tools.ietf.org/html/rfc6265#section-4.1.1\n            // `Max-Age: 0` is not valid, thus ignored, and the cookie is persisted.\n            expires: new Date(0),\n            httpOnly: true,\n            sameSite:  false ? 0 : \"lax\",\n            secure: \"development\" !== \"development\",\n            path: \"/\",\n            ...options.path !== undefined ? {\n                path: options.path\n            } : undefined\n        })\n    ]);\n    Object.defineProperty(res, SYMBOL_CLEARED_COOKIES, {\n        value: true,\n        enumerable: false\n    });\n    return res;\n}\nclass ApiError extends Error {\n    constructor(statusCode, message){\n        super(message);\n        this.statusCode = statusCode;\n    }\n}\nfunction sendError(res, statusCode, message) {\n    res.statusCode = statusCode;\n    res.statusMessage = message;\n    res.end(message);\n}\nfunction setLazyProp({ req }, prop, getter) {\n    const opts = {\n        configurable: true,\n        enumerable: true\n    };\n    const optsReset = {\n        ...opts,\n        writable: true\n    };\n    Object.defineProperty(req, prop, {\n        ...opts,\n        get: ()=>{\n            const value = getter();\n            // we set the property on the object to avoid recalculating it\n            Object.defineProperty(req, prop, {\n                ...optsReset,\n                value\n            });\n            return value;\n        },\n        set: (value)=>{\n            Object.defineProperty(req, prop, {\n                ...optsReset,\n                value\n            });\n        }\n    });\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/api-utils/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/async-storage/draft-mode-provider.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/server/async-storage/draft-mode-provider.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"DraftModeProvider\", ({\n    enumerable: true,\n    get: function() {\n        return DraftModeProvider;\n    }\n}));\nconst _apiutils = __webpack_require__(/*! ../api-utils */ \"(rsc)/./node_modules/next/dist/server/api-utils/index.js\");\nclass DraftModeProvider {\n    constructor(previewProps, req, cookies, mutableCookies){\n        var _cookies_get;\n        // The logic for draftMode() is very similar to tryGetPreviewData()\n        // but Draft Mode does not have any data associated with it.\n        const isOnDemandRevalidate = previewProps && (0, _apiutils.checkIsOnDemandRevalidate)(req, previewProps).isOnDemandRevalidate;\n        const cookieValue = (_cookies_get = cookies.get(_apiutils.COOKIE_NAME_PRERENDER_BYPASS)) == null ? void 0 : _cookies_get.value;\n        this.isEnabled = Boolean(!isOnDemandRevalidate && cookieValue && previewProps && cookieValue === previewProps.previewModeId);\n        this._previewModeId = previewProps == null ? void 0 : previewProps.previewModeId;\n        this._mutableCookies = mutableCookies;\n    }\n    enable() {\n        if (!this._previewModeId) {\n            throw new Error(\"Invariant: previewProps missing previewModeId this should never happen\");\n        }\n        this._mutableCookies.set({\n            name: _apiutils.COOKIE_NAME_PRERENDER_BYPASS,\n            value: this._previewModeId,\n            httpOnly: true,\n            sameSite:  false ? 0 : \"lax\",\n            secure: \"development\" !== \"development\",\n            path: \"/\"\n        });\n    }\n    disable() {\n        // To delete a cookie, set `expires` to a date in the past:\n        // https://tools.ietf.org/html/rfc6265#section-4.1.1\n        // `Max-Age: 0` is not valid, thus ignored, and the cookie is persisted.\n        this._mutableCookies.set({\n            name: _apiutils.COOKIE_NAME_PRERENDER_BYPASS,\n            value: \"\",\n            httpOnly: true,\n            sameSite:  false ? 0 : \"lax\",\n            secure: \"development\" !== \"development\",\n            path: \"/\",\n            expires: new Date(0)\n        });\n    }\n} //# sourceMappingURL=draft-mode-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9hc3luYy1zdG9yYWdlL2RyYWZ0LW1vZGUtcHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILHFEQUFvRDtJQUNoREksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLFlBQVlDLG1CQUFPQSxDQUFDLDhFQUFjO0FBQ3hDLE1BQU1GO0lBQ0ZHLFlBQVlDLFlBQVksRUFBRUMsR0FBRyxFQUFFQyxPQUFPLEVBQUVDLGNBQWMsQ0FBQztRQUNuRCxJQUFJQztRQUNKLG1FQUFtRTtRQUNuRSw0REFBNEQ7UUFDNUQsTUFBTUMsdUJBQXVCTCxnQkFBZ0IsQ0FBQyxHQUFHSCxVQUFVUyx5QkFBeUIsRUFBRUwsS0FBS0QsY0FBY0ssb0JBQW9CO1FBQzdILE1BQU1FLGNBQWMsQ0FBQ0gsZUFBZUYsUUFBUVAsR0FBRyxDQUFDRSxVQUFVVyw0QkFBNEIsTUFBTSxPQUFPLEtBQUssSUFBSUosYUFBYVgsS0FBSztRQUM5SCxJQUFJLENBQUNnQixTQUFTLEdBQUdDLFFBQVEsQ0FBQ0wsd0JBQXdCRSxlQUFlUCxnQkFBZ0JPLGdCQUFnQlAsYUFBYVcsYUFBYTtRQUMzSCxJQUFJLENBQUNDLGNBQWMsR0FBR1osZ0JBQWdCLE9BQU8sS0FBSyxJQUFJQSxhQUFhVyxhQUFhO1FBQ2hGLElBQUksQ0FBQ0UsZUFBZSxHQUFHVjtJQUMzQjtJQUNBVyxTQUFTO1FBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQ0YsY0FBYyxFQUFFO1lBQ3RCLE1BQU0sSUFBSUcsTUFBTTtRQUNwQjtRQUNBLElBQUksQ0FBQ0YsZUFBZSxDQUFDRyxHQUFHLENBQUM7WUFDckJDLE1BQU1wQixVQUFVVyw0QkFBNEI7WUFDNUNmLE9BQU8sSUFBSSxDQUFDbUIsY0FBYztZQUMxQk0sVUFBVTtZQUNWQyxVQUFVQyxNQUFzQyxHQUFHLENBQU0sR0FBRztZQUM1REMsUUFBUUQsa0JBQXlCO1lBQ2pDRSxNQUFNO1FBQ1Y7SUFDSjtJQUNBQyxVQUFVO1FBQ04sMkRBQTJEO1FBQzNELG9EQUFvRDtRQUNwRCx3RUFBd0U7UUFDeEUsSUFBSSxDQUFDVixlQUFlLENBQUNHLEdBQUcsQ0FBQztZQUNyQkMsTUFBTXBCLFVBQVVXLDRCQUE0QjtZQUM1Q2YsT0FBTztZQUNQeUIsVUFBVTtZQUNWQyxVQUFVQyxNQUFzQyxHQUFHLENBQU0sR0FBRztZQUM1REMsUUFBUUQsa0JBQXlCO1lBQ2pDRSxNQUFNO1lBQ05FLFNBQVMsSUFBSUMsS0FBSztRQUN0QjtJQUNKO0FBQ0osRUFFQSwrQ0FBK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb29kLWJsb2cvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9hc3luYy1zdG9yYWdlL2RyYWZ0LW1vZGUtcHJvdmlkZXIuanM/ODdkYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRyYWZ0TW9kZVByb3ZpZGVyXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBEcmFmdE1vZGVQcm92aWRlcjtcbiAgICB9XG59KTtcbmNvbnN0IF9hcGl1dGlscyA9IHJlcXVpcmUoXCIuLi9hcGktdXRpbHNcIik7XG5jbGFzcyBEcmFmdE1vZGVQcm92aWRlciB7XG4gICAgY29uc3RydWN0b3IocHJldmlld1Byb3BzLCByZXEsIGNvb2tpZXMsIG11dGFibGVDb29raWVzKXtcbiAgICAgICAgdmFyIF9jb29raWVzX2dldDtcbiAgICAgICAgLy8gVGhlIGxvZ2ljIGZvciBkcmFmdE1vZGUoKSBpcyB2ZXJ5IHNpbWlsYXIgdG8gdHJ5R2V0UHJldmlld0RhdGEoKVxuICAgICAgICAvLyBidXQgRHJhZnQgTW9kZSBkb2VzIG5vdCBoYXZlIGFueSBkYXRhIGFzc29jaWF0ZWQgd2l0aCBpdC5cbiAgICAgICAgY29uc3QgaXNPbkRlbWFuZFJldmFsaWRhdGUgPSBwcmV2aWV3UHJvcHMgJiYgKDAsIF9hcGl1dGlscy5jaGVja0lzT25EZW1hbmRSZXZhbGlkYXRlKShyZXEsIHByZXZpZXdQcm9wcykuaXNPbkRlbWFuZFJldmFsaWRhdGU7XG4gICAgICAgIGNvbnN0IGNvb2tpZVZhbHVlID0gKF9jb29raWVzX2dldCA9IGNvb2tpZXMuZ2V0KF9hcGl1dGlscy5DT09LSUVfTkFNRV9QUkVSRU5ERVJfQllQQVNTKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jb29raWVzX2dldC52YWx1ZTtcbiAgICAgICAgdGhpcy5pc0VuYWJsZWQgPSBCb29sZWFuKCFpc09uRGVtYW5kUmV2YWxpZGF0ZSAmJiBjb29raWVWYWx1ZSAmJiBwcmV2aWV3UHJvcHMgJiYgY29va2llVmFsdWUgPT09IHByZXZpZXdQcm9wcy5wcmV2aWV3TW9kZUlkKTtcbiAgICAgICAgdGhpcy5fcHJldmlld01vZGVJZCA9IHByZXZpZXdQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogcHJldmlld1Byb3BzLnByZXZpZXdNb2RlSWQ7XG4gICAgICAgIHRoaXMuX211dGFibGVDb29raWVzID0gbXV0YWJsZUNvb2tpZXM7XG4gICAgfVxuICAgIGVuYWJsZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9wcmV2aWV3TW9kZUlkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhcmlhbnQ6IHByZXZpZXdQcm9wcyBtaXNzaW5nIHByZXZpZXdNb2RlSWQgdGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX211dGFibGVDb29raWVzLnNldCh7XG4gICAgICAgICAgICBuYW1lOiBfYXBpdXRpbHMuQ09PS0lFX05BTUVfUFJFUkVOREVSX0JZUEFTUyxcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLl9wcmV2aWV3TW9kZUlkLFxuICAgICAgICAgICAgaHR0cE9ubHk6IHRydWUsXG4gICAgICAgICAgICBzYW1lU2l0ZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwiZGV2ZWxvcG1lbnRcIiA/IFwibm9uZVwiIDogXCJsYXhcIixcbiAgICAgICAgICAgIHNlY3VyZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwiZGV2ZWxvcG1lbnRcIixcbiAgICAgICAgICAgIHBhdGg6IFwiL1wiXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBkaXNhYmxlKCkge1xuICAgICAgICAvLyBUbyBkZWxldGUgYSBjb29raWUsIHNldCBgZXhwaXJlc2AgdG8gYSBkYXRlIGluIHRoZSBwYXN0OlxuICAgICAgICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNjI2NSNzZWN0aW9uLTQuMS4xXG4gICAgICAgIC8vIGBNYXgtQWdlOiAwYCBpcyBub3QgdmFsaWQsIHRodXMgaWdub3JlZCwgYW5kIHRoZSBjb29raWUgaXMgcGVyc2lzdGVkLlxuICAgICAgICB0aGlzLl9tdXRhYmxlQ29va2llcy5zZXQoe1xuICAgICAgICAgICAgbmFtZTogX2FwaXV0aWxzLkNPT0tJRV9OQU1FX1BSRVJFTkRFUl9CWVBBU1MsXG4gICAgICAgICAgICB2YWx1ZTogXCJcIixcbiAgICAgICAgICAgIGh0dHBPbmx5OiB0cnVlLFxuICAgICAgICAgICAgc2FtZVNpdGU6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcImRldmVsb3BtZW50XCIgPyBcIm5vbmVcIiA6IFwibGF4XCIsXG4gICAgICAgICAgICBzZWN1cmU6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcImRldmVsb3BtZW50XCIsXG4gICAgICAgICAgICBwYXRoOiBcIi9cIixcbiAgICAgICAgICAgIGV4cGlyZXM6IG5ldyBEYXRlKDApXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZHJhZnQtbW9kZS1wcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiRHJhZnRNb2RlUHJvdmlkZXIiLCJfYXBpdXRpbHMiLCJyZXF1aXJlIiwiY29uc3RydWN0b3IiLCJwcmV2aWV3UHJvcHMiLCJyZXEiLCJjb29raWVzIiwibXV0YWJsZUNvb2tpZXMiLCJfY29va2llc19nZXQiLCJpc09uRGVtYW5kUmV2YWxpZGF0ZSIsImNoZWNrSXNPbkRlbWFuZFJldmFsaWRhdGUiLCJjb29raWVWYWx1ZSIsIkNPT0tJRV9OQU1FX1BSRVJFTkRFUl9CWVBBU1MiLCJpc0VuYWJsZWQiLCJCb29sZWFuIiwicHJldmlld01vZGVJZCIsIl9wcmV2aWV3TW9kZUlkIiwiX211dGFibGVDb29raWVzIiwiZW5hYmxlIiwiRXJyb3IiLCJzZXQiLCJuYW1lIiwiaHR0cE9ubHkiLCJzYW1lU2l0ZSIsInByb2Nlc3MiLCJzZWN1cmUiLCJwYXRoIiwiZGlzYWJsZSIsImV4cGlyZXMiLCJEYXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/async-storage/draft-mode-provider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/async-storage/request-async-storage-wrapper.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/next/dist/server/async-storage/request-async-storage-wrapper.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"RequestAsyncStorageWrapper\", ({\n    enumerable: true,\n    get: function() {\n        return RequestAsyncStorageWrapper;\n    }\n}));\nconst _approuterheaders = __webpack_require__(/*! ../../client/components/app-router-headers */ \"(rsc)/./node_modules/next/dist/client/components/app-router-headers.js\");\nconst _headers = __webpack_require__(/*! ../web/spec-extension/adapters/headers */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/headers.js\");\nconst _requestcookies = __webpack_require__(/*! ../web/spec-extension/adapters/request-cookies */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.js\");\nconst _cookies = __webpack_require__(/*! ../web/spec-extension/cookies */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/cookies.js\");\nconst _draftmodeprovider = __webpack_require__(/*! ./draft-mode-provider */ \"(rsc)/./node_modules/next/dist/server/async-storage/draft-mode-provider.js\");\nfunction getHeaders(headers) {\n    const cleaned = _headers.HeadersAdapter.from(headers);\n    for (const param of _approuterheaders.FLIGHT_PARAMETERS){\n        cleaned.delete(param.toString().toLowerCase());\n    }\n    return _headers.HeadersAdapter.seal(cleaned);\n}\nfunction getCookies(headers) {\n    const cookies = new _cookies.RequestCookies(_headers.HeadersAdapter.from(headers));\n    return _requestcookies.RequestCookiesAdapter.seal(cookies);\n}\nfunction getMutableCookies(headers, res) {\n    const cookies = new _cookies.RequestCookies(_headers.HeadersAdapter.from(headers));\n    return _requestcookies.MutableRequestCookiesAdapter.wrap(cookies, res);\n}\nconst RequestAsyncStorageWrapper = {\n    /**\n   * Wrap the callback with the given store so it can access the underlying\n   * store using hooks.\n   *\n   * @param storage underlying storage object returned by the module\n   * @param context context to seed the store\n   * @param callback function to call within the scope of the context\n   * @returns the result returned by the callback\n   */ wrap (storage, { req, res, renderOpts }, callback) {\n        let previewProps = undefined;\n        if (renderOpts && \"previewProps\" in renderOpts) {\n            // TODO: investigate why previewProps isn't on RenderOpts\n            previewProps = renderOpts.previewProps;\n        }\n        const cache = {};\n        const store = {\n            get headers () {\n                if (!cache.headers) {\n                    // Seal the headers object that'll freeze out any methods that could\n                    // mutate the underlying data.\n                    cache.headers = getHeaders(req.headers);\n                }\n                return cache.headers;\n            },\n            get cookies () {\n                if (!cache.cookies) {\n                    // Seal the cookies object that'll freeze out any methods that could\n                    // mutate the underlying data.\n                    cache.cookies = getCookies(req.headers);\n                }\n                return cache.cookies;\n            },\n            get mutableCookies () {\n                if (!cache.mutableCookies) {\n                    cache.mutableCookies = getMutableCookies(req.headers, res);\n                }\n                return cache.mutableCookies;\n            },\n            get draftMode () {\n                if (!cache.draftMode) {\n                    cache.draftMode = new _draftmodeprovider.DraftModeProvider(previewProps, req, this.cookies, this.mutableCookies);\n                }\n                return cache.draftMode;\n            }\n        };\n        return storage.run(store, callback, store);\n    }\n}; //# sourceMappingURL=request-async-storage-wrapper.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/async-storage/request-async-storage-wrapper.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/async-storage/static-generation-async-storage-wrapper.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/next/dist/server/async-storage/static-generation-async-storage-wrapper.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"StaticGenerationAsyncStorageWrapper\", ({\n    enumerable: true,\n    get: function() {\n        return StaticGenerationAsyncStorageWrapper;\n    }\n}));\nconst StaticGenerationAsyncStorageWrapper = {\n    wrap (storage, { pathname, renderOpts }, callback) {\n        /**\n     * Rules of Static & Dynamic HTML:\n     *\n     *    1.) We must generate static HTML unless the caller explicitly opts\n     *        in to dynamic HTML support.\n     *\n     *    2.) If dynamic HTML support is requested, we must honor that request\n     *        or throw an error. It is the sole responsibility of the caller to\n     *        ensure they aren't e.g. requesting dynamic HTML for an AMP page.\n     *\n     *    3.) If the request is in draft mode, we must generate dynamic HTML.\n     *\n     * These rules help ensure that other existing features like request caching,\n     * coalescing, and ISR continue working as intended.\n     */ const isStaticGeneration = !renderOpts.supportsDynamicHTML && !renderOpts.isDraftMode;\n        const store = {\n            isStaticGeneration,\n            pathname,\n            originalPathname: renderOpts.originalPathname,\n            incrementalCache: // so that it can access the fs cache without mocks\n            renderOpts.incrementalCache || globalThis.__incrementalCache,\n            isRevalidate: renderOpts.isRevalidate,\n            isPrerendering: renderOpts.nextExport,\n            fetchCache: renderOpts.fetchCache,\n            isOnDemandRevalidate: renderOpts.isOnDemandRevalidate,\n            isDraftMode: renderOpts.isDraftMode\n        };\n        // TODO: remove this when we resolve accessing the store outside the execution context\n        renderOpts.store = store;\n        return storage.run(store, callback, store);\n    }\n}; //# sourceMappingURL=static-generation-async-storage-wrapper.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9hc3luYy1zdG9yYWdlL3N0YXRpYy1nZW5lcmF0aW9uLWFzeW5jLXN0b3JhZ2Utd3JhcHBlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsdUVBQXNFO0lBQ2xFSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUEsc0NBQXNDO0lBQ3hDQyxNQUFNQyxPQUFPLEVBQUUsRUFBRUMsUUFBUSxFQUFHQyxVQUFVLEVBQUcsRUFBRUMsUUFBUTtRQUMvQzs7Ozs7Ozs7Ozs7Ozs7S0FjSCxHQUFHLE1BQU1DLHFCQUFxQixDQUFDRixXQUFXRyxtQkFBbUIsSUFBSSxDQUFDSCxXQUFXSSxXQUFXO1FBQ3JGLE1BQU1DLFFBQVE7WUFDVkg7WUFDQUg7WUFDQU8sa0JBQWtCTixXQUFXTSxnQkFBZ0I7WUFDN0NDLGtCQUNBLG1EQUFtRDtZQUNuRFAsV0FBV08sZ0JBQWdCLElBQUlDLFdBQVdDLGtCQUFrQjtZQUM1REMsY0FBY1YsV0FBV1UsWUFBWTtZQUNyQ0MsZ0JBQWdCWCxXQUFXWSxVQUFVO1lBQ3JDQyxZQUFZYixXQUFXYSxVQUFVO1lBQ2pDQyxzQkFBc0JkLFdBQVdjLG9CQUFvQjtZQUNyRFYsYUFBYUosV0FBV0ksV0FBVztRQUN2QztRQUNBLHNGQUFzRjtRQUN0RkosV0FBV0ssS0FBSyxHQUFHQTtRQUNuQixPQUFPUCxRQUFRaUIsR0FBRyxDQUFDVixPQUFPSixVQUFVSTtJQUN4QztBQUNKLEdBRUEsbUVBQW1FIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vZC1ibG9nLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvYXN5bmMtc3RvcmFnZS9zdGF0aWMtZ2VuZXJhdGlvbi1hc3luYy1zdG9yYWdlLXdyYXBwZXIuanM/YTg4MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VXcmFwcGVyXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBTdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlV3JhcHBlcjtcbiAgICB9XG59KTtcbmNvbnN0IFN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VXcmFwcGVyID0ge1xuICAgIHdyYXAgKHN0b3JhZ2UsIHsgcGF0aG5hbWUgLCByZW5kZXJPcHRzICB9LCBjYWxsYmFjaykge1xuICAgICAgICAvKipcbiAgICAgKiBSdWxlcyBvZiBTdGF0aWMgJiBEeW5hbWljIEhUTUw6XG4gICAgICpcbiAgICAgKiAgICAxLikgV2UgbXVzdCBnZW5lcmF0ZSBzdGF0aWMgSFRNTCB1bmxlc3MgdGhlIGNhbGxlciBleHBsaWNpdGx5IG9wdHNcbiAgICAgKiAgICAgICAgaW4gdG8gZHluYW1pYyBIVE1MIHN1cHBvcnQuXG4gICAgICpcbiAgICAgKiAgICAyLikgSWYgZHluYW1pYyBIVE1MIHN1cHBvcnQgaXMgcmVxdWVzdGVkLCB3ZSBtdXN0IGhvbm9yIHRoYXQgcmVxdWVzdFxuICAgICAqICAgICAgICBvciB0aHJvdyBhbiBlcnJvci4gSXQgaXMgdGhlIHNvbGUgcmVzcG9uc2liaWxpdHkgb2YgdGhlIGNhbGxlciB0b1xuICAgICAqICAgICAgICBlbnN1cmUgdGhleSBhcmVuJ3QgZS5nLiByZXF1ZXN0aW5nIGR5bmFtaWMgSFRNTCBmb3IgYW4gQU1QIHBhZ2UuXG4gICAgICpcbiAgICAgKiAgICAzLikgSWYgdGhlIHJlcXVlc3QgaXMgaW4gZHJhZnQgbW9kZSwgd2UgbXVzdCBnZW5lcmF0ZSBkeW5hbWljIEhUTUwuXG4gICAgICpcbiAgICAgKiBUaGVzZSBydWxlcyBoZWxwIGVuc3VyZSB0aGF0IG90aGVyIGV4aXN0aW5nIGZlYXR1cmVzIGxpa2UgcmVxdWVzdCBjYWNoaW5nLFxuICAgICAqIGNvYWxlc2NpbmcsIGFuZCBJU1IgY29udGludWUgd29ya2luZyBhcyBpbnRlbmRlZC5cbiAgICAgKi8gY29uc3QgaXNTdGF0aWNHZW5lcmF0aW9uID0gIXJlbmRlck9wdHMuc3VwcG9ydHNEeW5hbWljSFRNTCAmJiAhcmVuZGVyT3B0cy5pc0RyYWZ0TW9kZTtcbiAgICAgICAgY29uc3Qgc3RvcmUgPSB7XG4gICAgICAgICAgICBpc1N0YXRpY0dlbmVyYXRpb24sXG4gICAgICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgICAgIG9yaWdpbmFsUGF0aG5hbWU6IHJlbmRlck9wdHMub3JpZ2luYWxQYXRobmFtZSxcbiAgICAgICAgICAgIGluY3JlbWVudGFsQ2FjaGU6IC8vIHdlIGZhbGxiYWNrIHRvIGEgZ2xvYmFsIGluY3JlbWVudGFsIGNhY2hlIGZvciBlZGdlLXJ1bnRpbWUgbG9jYWxseVxuICAgICAgICAgICAgLy8gc28gdGhhdCBpdCBjYW4gYWNjZXNzIHRoZSBmcyBjYWNoZSB3aXRob3V0IG1vY2tzXG4gICAgICAgICAgICByZW5kZXJPcHRzLmluY3JlbWVudGFsQ2FjaGUgfHwgZ2xvYmFsVGhpcy5fX2luY3JlbWVudGFsQ2FjaGUsXG4gICAgICAgICAgICBpc1JldmFsaWRhdGU6IHJlbmRlck9wdHMuaXNSZXZhbGlkYXRlLFxuICAgICAgICAgICAgaXNQcmVyZW5kZXJpbmc6IHJlbmRlck9wdHMubmV4dEV4cG9ydCxcbiAgICAgICAgICAgIGZldGNoQ2FjaGU6IHJlbmRlck9wdHMuZmV0Y2hDYWNoZSxcbiAgICAgICAgICAgIGlzT25EZW1hbmRSZXZhbGlkYXRlOiByZW5kZXJPcHRzLmlzT25EZW1hbmRSZXZhbGlkYXRlLFxuICAgICAgICAgICAgaXNEcmFmdE1vZGU6IHJlbmRlck9wdHMuaXNEcmFmdE1vZGVcbiAgICAgICAgfTtcbiAgICAgICAgLy8gVE9ETzogcmVtb3ZlIHRoaXMgd2hlbiB3ZSByZXNvbHZlIGFjY2Vzc2luZyB0aGUgc3RvcmUgb3V0c2lkZSB0aGUgZXhlY3V0aW9uIGNvbnRleHRcbiAgICAgICAgcmVuZGVyT3B0cy5zdG9yZSA9IHN0b3JlO1xuICAgICAgICByZXR1cm4gc3RvcmFnZS5ydW4oc3RvcmUsIGNhbGxiYWNrLCBzdG9yZSk7XG4gICAgfVxufTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdGljLWdlbmVyYXRpb24tYXN5bmMtc3RvcmFnZS13cmFwcGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJTdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlV3JhcHBlciIsIndyYXAiLCJzdG9yYWdlIiwicGF0aG5hbWUiLCJyZW5kZXJPcHRzIiwiY2FsbGJhY2siLCJpc1N0YXRpY0dlbmVyYXRpb24iLCJzdXBwb3J0c0R5bmFtaWNIVE1MIiwiaXNEcmFmdE1vZGUiLCJzdG9yZSIsIm9yaWdpbmFsUGF0aG5hbWUiLCJpbmNyZW1lbnRhbENhY2hlIiwiZ2xvYmFsVGhpcyIsIl9faW5jcmVtZW50YWxDYWNoZSIsImlzUmV2YWxpZGF0ZSIsImlzUHJlcmVuZGVyaW5nIiwibmV4dEV4cG9ydCIsImZldGNoQ2FjaGUiLCJpc09uRGVtYW5kUmV2YWxpZGF0ZSIsInJ1biJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/async-storage/static-generation-async-storage-wrapper.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/future/route-kind.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-kind.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"RouteKind\", ({\n    enumerable: true,\n    get: function() {\n        return RouteKind;\n    }\n}));\nvar RouteKind;\n(function(RouteKind) {\n    RouteKind[/**\n   * `PAGES` represents all the React pages that are under `pages/`.\n   */ \"PAGES\"] = \"PAGES\";\n    RouteKind[/**\n   * `PAGES_API` represents all the API routes under `pages/api/`.\n   */ \"PAGES_API\"] = \"PAGES_API\";\n    RouteKind[/**\n   * `APP_PAGE` represents all the React pages that are under `app/` with the\n   * filename of `page.{j,t}s{,x}`.\n   */ \"APP_PAGE\"] = \"APP_PAGE\";\n    RouteKind[/**\n   * `APP_ROUTE` represents all the API routes and metadata routes that are under `app/` with the\n   * filename of `route.{j,t}s{,x}`.\n   */ \"APP_ROUTE\"] = \"APP_ROUTE\";\n})(RouteKind || (RouteKind = {})); //# sourceMappingURL=route-kind.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsNkNBQTRDO0lBQ3hDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsSUFBSUE7QUFDSCxVQUFTQSxTQUFTO0lBQ2ZBLFNBQVMsQ0FBQzs7R0FFWCxHQUFHLFFBQVEsR0FBRztJQUNiQSxTQUFTLENBQUM7O0dBRVgsR0FBRyxZQUFZLEdBQUc7SUFDakJBLFNBQVMsQ0FBQzs7O0dBR1gsR0FBRyxXQUFXLEdBQUc7SUFDaEJBLFNBQVMsQ0FBQzs7O0dBR1gsR0FBRyxZQUFZLEdBQUc7QUFDckIsR0FBR0EsYUFBY0EsQ0FBQUEsWUFBWSxDQUFDLEtBRTlCLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2QtYmxvZy8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kLmpzPzM5NzkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSb3V0ZUtpbmRcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFJvdXRlS2luZDtcbiAgICB9XG59KTtcbnZhciBSb3V0ZUtpbmQ7XG4oZnVuY3Rpb24oUm91dGVLaW5kKSB7XG4gICAgUm91dGVLaW5kWy8qKlxuICAgKiBgUEFHRVNgIHJlcHJlc2VudHMgYWxsIHRoZSBSZWFjdCBwYWdlcyB0aGF0IGFyZSB1bmRlciBgcGFnZXMvYC5cbiAgICovIFwiUEFHRVNcIl0gPSBcIlBBR0VTXCI7XG4gICAgUm91dGVLaW5kWy8qKlxuICAgKiBgUEFHRVNfQVBJYCByZXByZXNlbnRzIGFsbCB0aGUgQVBJIHJvdXRlcyB1bmRlciBgcGFnZXMvYXBpL2AuXG4gICAqLyBcIlBBR0VTX0FQSVwiXSA9IFwiUEFHRVNfQVBJXCI7XG4gICAgUm91dGVLaW5kWy8qKlxuICAgKiBgQVBQX1BBR0VgIHJlcHJlc2VudHMgYWxsIHRoZSBSZWFjdCBwYWdlcyB0aGF0IGFyZSB1bmRlciBgYXBwL2Agd2l0aCB0aGVcbiAgICogZmlsZW5hbWUgb2YgYHBhZ2Uue2osdH1zeyx4fWAuXG4gICAqLyBcIkFQUF9QQUdFXCJdID0gXCJBUFBfUEFHRVwiO1xuICAgIFJvdXRlS2luZFsvKipcbiAgICogYEFQUF9ST1VURWAgcmVwcmVzZW50cyBhbGwgdGhlIEFQSSByb3V0ZXMgYW5kIG1ldGFkYXRhIHJvdXRlcyB0aGF0IGFyZSB1bmRlciBgYXBwL2Agd2l0aCB0aGVcbiAgICogZmlsZW5hbWUgb2YgYHJvdXRlLntqLHR9c3sseH1gLlxuICAgKi8gXCJBUFBfUk9VVEVcIl0gPSBcIkFQUF9ST1VURVwiO1xufSkoUm91dGVLaW5kIHx8IChSb3V0ZUtpbmQgPSB7fSkpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yb3V0ZS1raW5kLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJSb3V0ZUtpbmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/future/route-kind.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/auto-implement-methods.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/app-route/helpers/auto-implement-methods.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"autoImplementMethods\", ({\n    enumerable: true,\n    get: function() {\n        return autoImplementMethods;\n    }\n}));\nconst _http = __webpack_require__(/*! ../../../../web/http */ \"(rsc)/./node_modules/next/dist/server/web/http.js\");\nconst _responsehandlers = __webpack_require__(/*! ../../helpers/response-handlers */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/helpers/response-handlers.js\");\nconst AUTOMATIC_ROUTE_METHODS = [\n    \"HEAD\",\n    \"OPTIONS\"\n];\nfunction autoImplementMethods(handlers) {\n    // Loop through all the HTTP methods to create the initial methods object.\n    // Each of the methods will be set to the the 405 response handler.\n    const methods = _http.HTTP_METHODS.reduce((acc, method)=>({\n            ...acc,\n            // If the userland module implements the method, then use it. Otherwise,\n            // use the 405 response handler.\n            [method]: handlers[method] ?? _responsehandlers.handleMethodNotAllowedResponse\n        }), {});\n    // Get all the methods that could be automatically implemented that were not\n    // implemented by the userland module.\n    const implemented = new Set(_http.HTTP_METHODS.filter((method)=>handlers[method]));\n    const missing = AUTOMATIC_ROUTE_METHODS.filter((method)=>!implemented.has(method));\n    // Loop over the missing methods to automatically implement them if we can.\n    for (const method of missing){\n        // If the userland module doesn't implement the HEAD method, then\n        // we'll automatically implement it by calling the GET method (if it\n        // exists).\n        if (method === \"HEAD\") {\n            // If the userland module doesn't implement the GET method, then\n            // we're done.\n            if (!handlers.GET) break;\n            // Implement the HEAD method by calling the GET method.\n            methods.HEAD = handlers.GET;\n            // Mark it as implemented.\n            implemented.add(\"HEAD\");\n            continue;\n        }\n        // If OPTIONS is not provided then implement it.\n        if (method === \"OPTIONS\") {\n            // TODO: check if HEAD is implemented, if so, use it to add more headers\n            // Get all the methods that were implemented by the userland module.\n            const allow = [\n                \"OPTIONS\",\n                ...implemented\n            ];\n            // If the list of methods doesn't include HEAD, but it includes GET, then\n            // add HEAD as it's automatically implemented.\n            if (!implemented.has(\"HEAD\") && implemented.has(\"GET\")) {\n                allow.push(\"HEAD\");\n            }\n            // Sort and join the list with commas to create the `Allow` header. See:\n            // https://httpwg.org/specs/rfc9110.html#field.allow\n            const headers = {\n                Allow: allow.sort().join(\", \")\n            };\n            // Implement the OPTIONS method by returning a 204 response with the\n            // `Allow` header.\n            methods.OPTIONS = ()=>new Response(null, {\n                    status: 204,\n                    headers\n                });\n            // Mark this method as implemented.\n            implemented.add(\"OPTIONS\");\n            continue;\n        }\n        throw new Error(`Invariant: should handle all automatic implementable methods, got method: ${method}`);\n    }\n    return methods;\n} //# sourceMappingURL=auto-implement-methods.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvaGVscGVycy9hdXRvLWltcGxlbWVudC1tZXRob2RzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCx3REFBdUQ7SUFDbkRJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixNQUFNQyxRQUFRQyxtQkFBT0EsQ0FBQywrRUFBc0I7QUFDNUMsTUFBTUMsb0JBQW9CRCxtQkFBT0EsQ0FBQyxnSUFBaUM7QUFDbkUsTUFBTUUsMEJBQTBCO0lBQzVCO0lBQ0E7Q0FDSDtBQUNELFNBQVNKLHFCQUFxQkssUUFBUTtJQUNsQywwRUFBMEU7SUFDMUUsbUVBQW1FO0lBQ25FLE1BQU1DLFVBQVVMLE1BQU1NLFlBQVksQ0FBQ0MsTUFBTSxDQUFDLENBQUNDLEtBQUtDLFNBQVU7WUFDbEQsR0FBR0QsR0FBRztZQUNOLHdFQUF3RTtZQUN4RSxnQ0FBZ0M7WUFDaEMsQ0FBQ0MsT0FBTyxFQUFFTCxRQUFRLENBQUNLLE9BQU8sSUFBSVAsa0JBQWtCUSw4QkFBOEI7UUFDbEYsSUFBSSxDQUFDO0lBQ1QsNEVBQTRFO0lBQzVFLHNDQUFzQztJQUN0QyxNQUFNQyxjQUFjLElBQUlDLElBQUlaLE1BQU1NLFlBQVksQ0FBQ08sTUFBTSxDQUFDLENBQUNKLFNBQVNMLFFBQVEsQ0FBQ0ssT0FBTztJQUNoRixNQUFNSyxVQUFVWCx3QkFBd0JVLE1BQU0sQ0FBQyxDQUFDSixTQUFTLENBQUNFLFlBQVlJLEdBQUcsQ0FBQ047SUFDMUUsMkVBQTJFO0lBQzNFLEtBQUssTUFBTUEsVUFBVUssUUFBUTtRQUN6QixpRUFBaUU7UUFDakUsb0VBQW9FO1FBQ3BFLFdBQVc7UUFDWCxJQUFJTCxXQUFXLFFBQVE7WUFDbkIsZ0VBQWdFO1lBQ2hFLGNBQWM7WUFDZCxJQUFJLENBQUNMLFNBQVNZLEdBQUcsRUFBRTtZQUNuQix1REFBdUQ7WUFDdkRYLFFBQVFZLElBQUksR0FBR2IsU0FBU1ksR0FBRztZQUMzQiwwQkFBMEI7WUFDMUJMLFlBQVlPLEdBQUcsQ0FBQztZQUNoQjtRQUNKO1FBQ0EsZ0RBQWdEO1FBQ2hELElBQUlULFdBQVcsV0FBVztZQUN0Qix3RUFBd0U7WUFDeEUsb0VBQW9FO1lBQ3BFLE1BQU1VLFFBQVE7Z0JBQ1Y7bUJBQ0dSO2FBQ047WUFDRCx5RUFBeUU7WUFDekUsOENBQThDO1lBQzlDLElBQUksQ0FBQ0EsWUFBWUksR0FBRyxDQUFDLFdBQVdKLFlBQVlJLEdBQUcsQ0FBQyxRQUFRO2dCQUNwREksTUFBTUMsSUFBSSxDQUFDO1lBQ2Y7WUFDQSx3RUFBd0U7WUFDeEUsb0RBQW9EO1lBQ3BELE1BQU1DLFVBQVU7Z0JBQ1pDLE9BQU9ILE1BQU1JLElBQUksR0FBR0MsSUFBSSxDQUFDO1lBQzdCO1lBQ0Esb0VBQW9FO1lBQ3BFLGtCQUFrQjtZQUNsQm5CLFFBQVFvQixPQUFPLEdBQUcsSUFBSSxJQUFJQyxTQUFTLE1BQU07b0JBQ2pDQyxRQUFRO29CQUNSTjtnQkFDSjtZQUNKLG1DQUFtQztZQUNuQ1YsWUFBWU8sR0FBRyxDQUFDO1lBQ2hCO1FBQ0o7UUFDQSxNQUFNLElBQUlVLE1BQU0sQ0FBQywwRUFBMEUsRUFBRW5CLE9BQU8sQ0FBQztJQUN6RztJQUNBLE9BQU9KO0FBQ1gsRUFFQSxrREFBa0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb29kLWJsb2cvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvaGVscGVycy9hdXRvLWltcGxlbWVudC1tZXRob2RzLmpzP2IxYTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhdXRvSW1wbGVtZW50TWV0aG9kc1wiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYXV0b0ltcGxlbWVudE1ldGhvZHM7XG4gICAgfVxufSk7XG5jb25zdCBfaHR0cCA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi93ZWIvaHR0cFwiKTtcbmNvbnN0IF9yZXNwb25zZWhhbmRsZXJzID0gcmVxdWlyZShcIi4uLy4uL2hlbHBlcnMvcmVzcG9uc2UtaGFuZGxlcnNcIik7XG5jb25zdCBBVVRPTUFUSUNfUk9VVEVfTUVUSE9EUyA9IFtcbiAgICBcIkhFQURcIixcbiAgICBcIk9QVElPTlNcIlxuXTtcbmZ1bmN0aW9uIGF1dG9JbXBsZW1lbnRNZXRob2RzKGhhbmRsZXJzKSB7XG4gICAgLy8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgSFRUUCBtZXRob2RzIHRvIGNyZWF0ZSB0aGUgaW5pdGlhbCBtZXRob2RzIG9iamVjdC5cbiAgICAvLyBFYWNoIG9mIHRoZSBtZXRob2RzIHdpbGwgYmUgc2V0IHRvIHRoZSB0aGUgNDA1IHJlc3BvbnNlIGhhbmRsZXIuXG4gICAgY29uc3QgbWV0aG9kcyA9IF9odHRwLkhUVFBfTUVUSE9EUy5yZWR1Y2UoKGFjYywgbWV0aG9kKT0+KHtcbiAgICAgICAgICAgIC4uLmFjYyxcbiAgICAgICAgICAgIC8vIElmIHRoZSB1c2VybGFuZCBtb2R1bGUgaW1wbGVtZW50cyB0aGUgbWV0aG9kLCB0aGVuIHVzZSBpdC4gT3RoZXJ3aXNlLFxuICAgICAgICAgICAgLy8gdXNlIHRoZSA0MDUgcmVzcG9uc2UgaGFuZGxlci5cbiAgICAgICAgICAgIFttZXRob2RdOiBoYW5kbGVyc1ttZXRob2RdID8/IF9yZXNwb25zZWhhbmRsZXJzLmhhbmRsZU1ldGhvZE5vdEFsbG93ZWRSZXNwb25zZVxuICAgICAgICB9KSwge30pO1xuICAgIC8vIEdldCBhbGwgdGhlIG1ldGhvZHMgdGhhdCBjb3VsZCBiZSBhdXRvbWF0aWNhbGx5IGltcGxlbWVudGVkIHRoYXQgd2VyZSBub3RcbiAgICAvLyBpbXBsZW1lbnRlZCBieSB0aGUgdXNlcmxhbmQgbW9kdWxlLlxuICAgIGNvbnN0IGltcGxlbWVudGVkID0gbmV3IFNldChfaHR0cC5IVFRQX01FVEhPRFMuZmlsdGVyKChtZXRob2QpPT5oYW5kbGVyc1ttZXRob2RdKSk7XG4gICAgY29uc3QgbWlzc2luZyA9IEFVVE9NQVRJQ19ST1VURV9NRVRIT0RTLmZpbHRlcigobWV0aG9kKT0+IWltcGxlbWVudGVkLmhhcyhtZXRob2QpKTtcbiAgICAvLyBMb29wIG92ZXIgdGhlIG1pc3NpbmcgbWV0aG9kcyB0byBhdXRvbWF0aWNhbGx5IGltcGxlbWVudCB0aGVtIGlmIHdlIGNhbi5cbiAgICBmb3IgKGNvbnN0IG1ldGhvZCBvZiBtaXNzaW5nKXtcbiAgICAgICAgLy8gSWYgdGhlIHVzZXJsYW5kIG1vZHVsZSBkb2Vzbid0IGltcGxlbWVudCB0aGUgSEVBRCBtZXRob2QsIHRoZW5cbiAgICAgICAgLy8gd2UnbGwgYXV0b21hdGljYWxseSBpbXBsZW1lbnQgaXQgYnkgY2FsbGluZyB0aGUgR0VUIG1ldGhvZCAoaWYgaXRcbiAgICAgICAgLy8gZXhpc3RzKS5cbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJIRUFEXCIpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSB1c2VybGFuZCBtb2R1bGUgZG9lc24ndCBpbXBsZW1lbnQgdGhlIEdFVCBtZXRob2QsIHRoZW5cbiAgICAgICAgICAgIC8vIHdlJ3JlIGRvbmUuXG4gICAgICAgICAgICBpZiAoIWhhbmRsZXJzLkdFVCkgYnJlYWs7XG4gICAgICAgICAgICAvLyBJbXBsZW1lbnQgdGhlIEhFQUQgbWV0aG9kIGJ5IGNhbGxpbmcgdGhlIEdFVCBtZXRob2QuXG4gICAgICAgICAgICBtZXRob2RzLkhFQUQgPSBoYW5kbGVycy5HRVQ7XG4gICAgICAgICAgICAvLyBNYXJrIGl0IGFzIGltcGxlbWVudGVkLlxuICAgICAgICAgICAgaW1wbGVtZW50ZWQuYWRkKFwiSEVBRFwiKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIE9QVElPTlMgaXMgbm90IHByb3ZpZGVkIHRoZW4gaW1wbGVtZW50IGl0LlxuICAgICAgICBpZiAobWV0aG9kID09PSBcIk9QVElPTlNcIikge1xuICAgICAgICAgICAgLy8gVE9ETzogY2hlY2sgaWYgSEVBRCBpcyBpbXBsZW1lbnRlZCwgaWYgc28sIHVzZSBpdCB0byBhZGQgbW9yZSBoZWFkZXJzXG4gICAgICAgICAgICAvLyBHZXQgYWxsIHRoZSBtZXRob2RzIHRoYXQgd2VyZSBpbXBsZW1lbnRlZCBieSB0aGUgdXNlcmxhbmQgbW9kdWxlLlxuICAgICAgICAgICAgY29uc3QgYWxsb3cgPSBbXG4gICAgICAgICAgICAgICAgXCJPUFRJT05TXCIsXG4gICAgICAgICAgICAgICAgLi4uaW1wbGVtZW50ZWRcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICAvLyBJZiB0aGUgbGlzdCBvZiBtZXRob2RzIGRvZXNuJ3QgaW5jbHVkZSBIRUFELCBidXQgaXQgaW5jbHVkZXMgR0VULCB0aGVuXG4gICAgICAgICAgICAvLyBhZGQgSEVBRCBhcyBpdCdzIGF1dG9tYXRpY2FsbHkgaW1wbGVtZW50ZWQuXG4gICAgICAgICAgICBpZiAoIWltcGxlbWVudGVkLmhhcyhcIkhFQURcIikgJiYgaW1wbGVtZW50ZWQuaGFzKFwiR0VUXCIpKSB7XG4gICAgICAgICAgICAgICAgYWxsb3cucHVzaChcIkhFQURcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTb3J0IGFuZCBqb2luIHRoZSBsaXN0IHdpdGggY29tbWFzIHRvIGNyZWF0ZSB0aGUgYEFsbG93YCBoZWFkZXIuIFNlZTpcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vaHR0cHdnLm9yZy9zcGVjcy9yZmM5MTEwLmh0bWwjZmllbGQuYWxsb3dcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgQWxsb3c6IGFsbG93LnNvcnQoKS5qb2luKFwiLCBcIilcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBJbXBsZW1lbnQgdGhlIE9QVElPTlMgbWV0aG9kIGJ5IHJldHVybmluZyBhIDIwNCByZXNwb25zZSB3aXRoIHRoZVxuICAgICAgICAgICAgLy8gYEFsbG93YCBoZWFkZXIuXG4gICAgICAgICAgICBtZXRob2RzLk9QVElPTlMgPSAoKT0+bmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAyMDQsXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIE1hcmsgdGhpcyBtZXRob2QgYXMgaW1wbGVtZW50ZWQuXG4gICAgICAgICAgICBpbXBsZW1lbnRlZC5hZGQoXCJPUFRJT05TXCIpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhcmlhbnQ6IHNob3VsZCBoYW5kbGUgYWxsIGF1dG9tYXRpYyBpbXBsZW1lbnRhYmxlIG1ldGhvZHMsIGdvdCBtZXRob2Q6ICR7bWV0aG9kfWApO1xuICAgIH1cbiAgICByZXR1cm4gbWV0aG9kcztcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0by1pbXBsZW1lbnQtbWV0aG9kcy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiYXV0b0ltcGxlbWVudE1ldGhvZHMiLCJfaHR0cCIsInJlcXVpcmUiLCJfcmVzcG9uc2VoYW5kbGVycyIsIkFVVE9NQVRJQ19ST1VURV9NRVRIT0RTIiwiaGFuZGxlcnMiLCJtZXRob2RzIiwiSFRUUF9NRVRIT0RTIiwicmVkdWNlIiwiYWNjIiwibWV0aG9kIiwiaGFuZGxlTWV0aG9kTm90QWxsb3dlZFJlc3BvbnNlIiwiaW1wbGVtZW50ZWQiLCJTZXQiLCJmaWx0ZXIiLCJtaXNzaW5nIiwiaGFzIiwiR0VUIiwiSEVBRCIsImFkZCIsImFsbG93IiwicHVzaCIsImhlYWRlcnMiLCJBbGxvdyIsInNvcnQiLCJqb2luIiwiT1BUSU9OUyIsIlJlc3BvbnNlIiwic3RhdHVzIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/auto-implement-methods.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/clean-url.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/app-route/helpers/clean-url.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Cleans a URL by stripping the protocol, host, and search params.\n *\n * @param urlString the url to clean\n * @returns the cleaned url\n */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"cleanURL\", ({\n    enumerable: true,\n    get: function() {\n        return cleanURL;\n    }\n}));\nfunction cleanURL(urlString) {\n    const url = new URL(urlString);\n    url.host = \"localhost:3000\";\n    url.search = \"\";\n    url.protocol = \"http\";\n    return url.toString();\n} //# sourceMappingURL=clean-url.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvaGVscGVycy9jbGVhbi11cmwuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0NBS0MsR0FBZ0I7QUFDakJBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCw0Q0FBMkM7SUFDdkNJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixTQUFTQSxTQUFTQyxTQUFTO0lBQ3ZCLE1BQU1DLE1BQU0sSUFBSUMsSUFBSUY7SUFDcEJDLElBQUlFLElBQUksR0FBRztJQUNYRixJQUFJRyxNQUFNLEdBQUc7SUFDYkgsSUFBSUksUUFBUSxHQUFHO0lBQ2YsT0FBT0osSUFBSUssUUFBUTtBQUN2QixFQUVBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2QtYmxvZy8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9oZWxwZXJzL2NsZWFuLXVybC5qcz85NDExIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2xlYW5zIGEgVVJMIGJ5IHN0cmlwcGluZyB0aGUgcHJvdG9jb2wsIGhvc3QsIGFuZCBzZWFyY2ggcGFyYW1zLlxuICpcbiAqIEBwYXJhbSB1cmxTdHJpbmcgdGhlIHVybCB0byBjbGVhblxuICogQHJldHVybnMgdGhlIGNsZWFuZWQgdXJsXG4gKi8gXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjbGVhblVSTFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY2xlYW5VUkw7XG4gICAgfVxufSk7XG5mdW5jdGlvbiBjbGVhblVSTCh1cmxTdHJpbmcpIHtcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHVybFN0cmluZyk7XG4gICAgdXJsLmhvc3QgPSBcImxvY2FsaG9zdDozMDAwXCI7XG4gICAgdXJsLnNlYXJjaCA9IFwiXCI7XG4gICAgdXJsLnByb3RvY29sID0gXCJodHRwXCI7XG4gICAgcmV0dXJuIHVybC50b1N0cmluZygpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGVhbi11cmwuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsImNsZWFuVVJMIiwidXJsU3RyaW5nIiwidXJsIiwiVVJMIiwiaG9zdCIsInNlYXJjaCIsInByb3RvY29sIiwidG9TdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/clean-url.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/get-non-static-methods.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/app-route/helpers/get-non-static-methods.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"getNonStaticMethods\", ({\n    enumerable: true,\n    get: function() {\n        return getNonStaticMethods;\n    }\n}));\nconst NON_STATIC_METHODS = [\n    \"OPTIONS\",\n    \"POST\",\n    \"PUT\",\n    \"DELETE\",\n    \"PATCH\"\n];\nfunction getNonStaticMethods(handlers) {\n    // We can currently only statically optimize if only GET/HEAD are used as\n    // prerender can't be used conditionally based on the method currently.\n    const methods = NON_STATIC_METHODS.filter((method)=>handlers[method]);\n    if (methods.length === 0) return false;\n    return methods;\n} //# sourceMappingURL=get-non-static-methods.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvaGVscGVycy9nZXQtbm9uLXN0YXRpYy1tZXRob2RzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCx1REFBc0Q7SUFDbERJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixNQUFNQyxxQkFBcUI7SUFDdkI7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNIO0FBQ0QsU0FBU0Qsb0JBQW9CRSxRQUFRO0lBQ2pDLHlFQUF5RTtJQUN6RSx1RUFBdUU7SUFDdkUsTUFBTUMsVUFBVUYsbUJBQW1CRyxNQUFNLENBQUMsQ0FBQ0MsU0FBU0gsUUFBUSxDQUFDRyxPQUFPO0lBQ3BFLElBQUlGLFFBQVFHLE1BQU0sS0FBSyxHQUFHLE9BQU87SUFDakMsT0FBT0g7QUFDWCxFQUVBLGtEQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2QtYmxvZy8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9oZWxwZXJzL2dldC1ub24tc3RhdGljLW1ldGhvZHMuanM/ZTgwNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldE5vblN0YXRpY01ldGhvZHNcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldE5vblN0YXRpY01ldGhvZHM7XG4gICAgfVxufSk7XG5jb25zdCBOT05fU1RBVElDX01FVEhPRFMgPSBbXG4gICAgXCJPUFRJT05TXCIsXG4gICAgXCJQT1NUXCIsXG4gICAgXCJQVVRcIixcbiAgICBcIkRFTEVURVwiLFxuICAgIFwiUEFUQ0hcIlxuXTtcbmZ1bmN0aW9uIGdldE5vblN0YXRpY01ldGhvZHMoaGFuZGxlcnMpIHtcbiAgICAvLyBXZSBjYW4gY3VycmVudGx5IG9ubHkgc3RhdGljYWxseSBvcHRpbWl6ZSBpZiBvbmx5IEdFVC9IRUFEIGFyZSB1c2VkIGFzXG4gICAgLy8gcHJlcmVuZGVyIGNhbid0IGJlIHVzZWQgY29uZGl0aW9uYWxseSBiYXNlZCBvbiB0aGUgbWV0aG9kIGN1cnJlbnRseS5cbiAgICBjb25zdCBtZXRob2RzID0gTk9OX1NUQVRJQ19NRVRIT0RTLmZpbHRlcigobWV0aG9kKT0+aGFuZGxlcnNbbWV0aG9kXSk7XG4gICAgaWYgKG1ldGhvZHMubGVuZ3RoID09PSAwKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIG1ldGhvZHM7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldC1ub24tc3RhdGljLW1ldGhvZHMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsImdldE5vblN0YXRpY01ldGhvZHMiLCJOT05fU1RBVElDX01FVEhPRFMiLCJoYW5kbGVycyIsIm1ldGhvZHMiLCJmaWx0ZXIiLCJtZXRob2QiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/get-non-static-methods.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/get-pathname-from-absolute-path.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/app-route/helpers/get-pathname-from-absolute-path.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Get pathname from absolute path.\n *\n * @param absolutePath the absolute path\n * @returns the pathname\n */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"getPathnameFromAbsolutePath\", ({\n    enumerable: true,\n    get: function() {\n        return getPathnameFromAbsolutePath;\n    }\n}));\nfunction getPathnameFromAbsolutePath(absolutePath) {\n    // Remove prefix including app dir\n    let appDir = \"/app/\";\n    if (!absolutePath.includes(appDir)) {\n        appDir = \"\\\\app\\\\\";\n    }\n    const [, ...parts] = absolutePath.split(appDir);\n    const relativePath = appDir[0] + parts.join(appDir);\n    // remove extension\n    const pathname = relativePath.split(\".\").slice(0, -1).join(\".\");\n    return pathname;\n} //# sourceMappingURL=get-pathname-from-absolute-path.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvaGVscGVycy9nZXQtcGF0aG5hbWUtZnJvbS1hYnNvbHV0ZS1wYXRoLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7OztDQUtDLEdBQWdCO0FBQ2pCQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsK0RBQThEO0lBQzFESSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsU0FBU0EsNEJBQTRCQyxZQUFZO0lBQzdDLGtDQUFrQztJQUNsQyxJQUFJQyxTQUFTO0lBQ2IsSUFBSSxDQUFDRCxhQUFhRSxRQUFRLENBQUNELFNBQVM7UUFDaENBLFNBQVM7SUFDYjtJQUNBLE1BQU0sR0FBRyxHQUFHRSxNQUFNLEdBQUdILGFBQWFJLEtBQUssQ0FBQ0g7SUFDeEMsTUFBTUksZUFBZUosTUFBTSxDQUFDLEVBQUUsR0FBR0UsTUFBTUcsSUFBSSxDQUFDTDtJQUM1QyxtQkFBbUI7SUFDbkIsTUFBTU0sV0FBV0YsYUFBYUQsS0FBSyxDQUFDLEtBQUtJLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBR0YsSUFBSSxDQUFDO0lBQzNELE9BQU9DO0FBQ1gsRUFFQSwyREFBMkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb29kLWJsb2cvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvaGVscGVycy9nZXQtcGF0aG5hbWUtZnJvbS1hYnNvbHV0ZS1wYXRoLmpzPzFiYTIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHZXQgcGF0aG5hbWUgZnJvbSBhYnNvbHV0ZSBwYXRoLlxuICpcbiAqIEBwYXJhbSBhYnNvbHV0ZVBhdGggdGhlIGFic29sdXRlIHBhdGhcbiAqIEByZXR1cm5zIHRoZSBwYXRobmFtZVxuICovIFwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0UGF0aG5hbWVGcm9tQWJzb2x1dGVQYXRoXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRQYXRobmFtZUZyb21BYnNvbHV0ZVBhdGg7XG4gICAgfVxufSk7XG5mdW5jdGlvbiBnZXRQYXRobmFtZUZyb21BYnNvbHV0ZVBhdGgoYWJzb2x1dGVQYXRoKSB7XG4gICAgLy8gUmVtb3ZlIHByZWZpeCBpbmNsdWRpbmcgYXBwIGRpclxuICAgIGxldCBhcHBEaXIgPSBcIi9hcHAvXCI7XG4gICAgaWYgKCFhYnNvbHV0ZVBhdGguaW5jbHVkZXMoYXBwRGlyKSkge1xuICAgICAgICBhcHBEaXIgPSBcIlxcXFxhcHBcXFxcXCI7XG4gICAgfVxuICAgIGNvbnN0IFssIC4uLnBhcnRzXSA9IGFic29sdXRlUGF0aC5zcGxpdChhcHBEaXIpO1xuICAgIGNvbnN0IHJlbGF0aXZlUGF0aCA9IGFwcERpclswXSArIHBhcnRzLmpvaW4oYXBwRGlyKTtcbiAgICAvLyByZW1vdmUgZXh0ZW5zaW9uXG4gICAgY29uc3QgcGF0aG5hbWUgPSByZWxhdGl2ZVBhdGguc3BsaXQoXCIuXCIpLnNsaWNlKDAsIC0xKS5qb2luKFwiLlwiKTtcbiAgICByZXR1cm4gcGF0aG5hbWU7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldC1wYXRobmFtZS1mcm9tLWFic29sdXRlLXBhdGguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsImdldFBhdGhuYW1lRnJvbUFic29sdXRlUGF0aCIsImFic29sdXRlUGF0aCIsImFwcERpciIsImluY2x1ZGVzIiwicGFydHMiLCJzcGxpdCIsInJlbGF0aXZlUGF0aCIsImpvaW4iLCJwYXRobmFtZSIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/get-pathname-from-absolute-path.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/proxy-request.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/app-route/helpers/proxy-request.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"proxyRequest\", ({\n    enumerable: true,\n    get: function() {\n        return proxyRequest;\n    }\n}));\nconst _cookies = __webpack_require__(/*! next/dist/compiled/@edge-runtime/cookies */ \"(rsc)/./node_modules/next/dist/compiled/@edge-runtime/cookies/index.js\");\nconst _nexturl = __webpack_require__(/*! ../../../../web/next-url */ \"(rsc)/./node_modules/next/dist/server/web/next-url.js\");\nconst _cleanurl = __webpack_require__(/*! ./clean-url */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/clean-url.js\");\nfunction proxyRequest(request, { dynamic }, hooks) {\n    function handleNextUrlBailout(prop) {\n        switch(prop){\n            case \"search\":\n            case \"searchParams\":\n            case \"toString\":\n            case \"href\":\n            case \"origin\":\n                hooks.staticGenerationBailout(`nextUrl.${prop}`);\n                return;\n            default:\n                return;\n        }\n    }\n    const cache = {};\n    const handleForceStatic = (url, prop)=>{\n        switch(prop){\n            case \"search\":\n                return \"\";\n            case \"searchParams\":\n                if (!cache.searchParams) cache.searchParams = new URLSearchParams();\n                return cache.searchParams;\n            case \"url\":\n            case \"href\":\n                if (!cache.url) cache.url = (0, _cleanurl.cleanURL)(url);\n                return cache.url;\n            case \"toJSON\":\n            case \"toString\":\n                if (!cache.url) cache.url = (0, _cleanurl.cleanURL)(url);\n                if (!cache.toString) cache.toString = ()=>cache.url;\n                return cache.toString;\n            case \"headers\":\n                if (!cache.headers) cache.headers = new Headers();\n                return cache.headers;\n            case \"cookies\":\n                if (!cache.headers) cache.headers = new Headers();\n                if (!cache.cookies) cache.cookies = new _cookies.RequestCookies(cache.headers);\n                return cache.cookies;\n            case \"clone\":\n                if (!cache.url) cache.url = (0, _cleanurl.cleanURL)(url);\n                return ()=>new _nexturl.NextURL(cache.url);\n            default:\n                break;\n        }\n    };\n    const wrappedNextUrl = new Proxy(request.nextUrl, {\n        get (target, prop) {\n            handleNextUrlBailout(prop);\n            if (dynamic === \"force-static\" && typeof prop === \"string\") {\n                const result = handleForceStatic(target.href, prop);\n                if (result !== undefined) return result;\n            }\n            const value = target[prop];\n            if (typeof value === \"function\") {\n                return value.bind(target);\n            }\n            return value;\n        },\n        set (target, prop, value) {\n            handleNextUrlBailout(prop);\n            target[prop] = value;\n            return true;\n        }\n    });\n    const handleReqBailout = (prop)=>{\n        switch(prop){\n            case \"headers\":\n                hooks.headerHooks.headers();\n                return;\n            // if request.url is accessed directly instead of\n            // request.nextUrl we bail since it includes query\n            // values that can be relied on dynamically\n            case \"url\":\n            case \"body\":\n            case \"blob\":\n            case \"json\":\n            case \"text\":\n            case \"arrayBuffer\":\n            case \"formData\":\n                hooks.staticGenerationBailout(`request.${prop}`);\n                return;\n            default:\n                return;\n        }\n    };\n    return new Proxy(request, {\n        get (target, prop) {\n            handleReqBailout(prop);\n            if (prop === \"nextUrl\") {\n                return wrappedNextUrl;\n            }\n            if (dynamic === \"force-static\" && typeof prop === \"string\") {\n                const result = handleForceStatic(target.url, prop);\n                if (result !== undefined) return result;\n            }\n            const value = target[prop];\n            if (typeof value === \"function\") {\n                return value.bind(target);\n            }\n            return value;\n        },\n        set (target, prop, value) {\n            handleReqBailout(prop);\n            target[prop] = value;\n            return true;\n        }\n    });\n} //# sourceMappingURL=proxy-request.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/proxy-request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/resolve-handler-error.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/app-route/helpers/resolve-handler-error.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"resolveHandlerError\", ({\n    enumerable: true,\n    get: function() {\n        return resolveHandlerError;\n    }\n}));\nconst _notfound = __webpack_require__(/*! ../../../../../client/components/not-found */ \"(rsc)/./node_modules/next/dist/client/components/not-found.js\");\nconst _redirect = __webpack_require__(/*! ../../../../../client/components/redirect */ \"(rsc)/./node_modules/next/dist/client/components/redirect.js\");\nconst _responsehandlers = __webpack_require__(/*! ../../helpers/response-handlers */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/helpers/response-handlers.js\");\nfunction resolveHandlerError(err) {\n    if ((0, _redirect.isRedirectError)(err)) {\n        const redirect = (0, _redirect.getURLFromRedirectError)(err);\n        if (!redirect) {\n            throw new Error(\"Invariant: Unexpected redirect url format\");\n        }\n        // This is a redirect error! Send the redirect response.\n        return (0, _responsehandlers.handleTemporaryRedirectResponse)(redirect, err.mutableCookies);\n    }\n    if ((0, _notfound.isNotFoundError)(err)) {\n        // This is a not found error! Send the not found response.\n        return (0, _responsehandlers.handleNotFoundResponse)();\n    }\n    // Return false to indicate that this is not a handled error.\n    return false;\n} //# sourceMappingURL=resolve-handler-error.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvaGVscGVycy9yZXNvbHZlLWhhbmRsZXItZXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILHVEQUFzRDtJQUNsREksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLFlBQVlDLG1CQUFPQSxDQUFDLGlIQUE0QztBQUN0RSxNQUFNQyxZQUFZRCxtQkFBT0EsQ0FBQywrR0FBMkM7QUFDckUsTUFBTUUsb0JBQW9CRixtQkFBT0EsQ0FBQyxnSUFBaUM7QUFDbkUsU0FBU0Ysb0JBQW9CSyxHQUFHO0lBQzVCLElBQUksQ0FBQyxHQUFHRixVQUFVRyxlQUFlLEVBQUVELE1BQU07UUFDckMsTUFBTUUsV0FBVyxDQUFDLEdBQUdKLFVBQVVLLHVCQUF1QixFQUFFSDtRQUN4RCxJQUFJLENBQUNFLFVBQVU7WUFDWCxNQUFNLElBQUlFLE1BQU07UUFDcEI7UUFDQSx3REFBd0Q7UUFDeEQsT0FBTyxDQUFDLEdBQUdMLGtCQUFrQk0sK0JBQStCLEVBQUVILFVBQVVGLElBQUlNLGNBQWM7SUFDOUY7SUFDQSxJQUFJLENBQUMsR0FBR1YsVUFBVVcsZUFBZSxFQUFFUCxNQUFNO1FBQ3JDLDBEQUEwRDtRQUMxRCxPQUFPLENBQUMsR0FBR0Qsa0JBQWtCUyxzQkFBc0I7SUFDdkQ7SUFDQSw2REFBNkQ7SUFDN0QsT0FBTztBQUNYLEVBRUEsaURBQWlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vZC1ibG9nLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL2hlbHBlcnMvcmVzb2x2ZS1oYW5kbGVyLWVycm9yLmpzP2Y2MTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZXNvbHZlSGFuZGxlckVycm9yXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlSGFuZGxlckVycm9yO1xuICAgIH1cbn0pO1xuY29uc3QgX25vdGZvdW5kID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2NsaWVudC9jb21wb25lbnRzL25vdC1mb3VuZFwiKTtcbmNvbnN0IF9yZWRpcmVjdCA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9jbGllbnQvY29tcG9uZW50cy9yZWRpcmVjdFwiKTtcbmNvbnN0IF9yZXNwb25zZWhhbmRsZXJzID0gcmVxdWlyZShcIi4uLy4uL2hlbHBlcnMvcmVzcG9uc2UtaGFuZGxlcnNcIik7XG5mdW5jdGlvbiByZXNvbHZlSGFuZGxlckVycm9yKGVycikge1xuICAgIGlmICgoMCwgX3JlZGlyZWN0LmlzUmVkaXJlY3RFcnJvcikoZXJyKSkge1xuICAgICAgICBjb25zdCByZWRpcmVjdCA9ICgwLCBfcmVkaXJlY3QuZ2V0VVJMRnJvbVJlZGlyZWN0RXJyb3IpKGVycik7XG4gICAgICAgIGlmICghcmVkaXJlY3QpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFyaWFudDogVW5leHBlY3RlZCByZWRpcmVjdCB1cmwgZm9ybWF0XCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoaXMgaXMgYSByZWRpcmVjdCBlcnJvciEgU2VuZCB0aGUgcmVkaXJlY3QgcmVzcG9uc2UuXG4gICAgICAgIHJldHVybiAoMCwgX3Jlc3BvbnNlaGFuZGxlcnMuaGFuZGxlVGVtcG9yYXJ5UmVkaXJlY3RSZXNwb25zZSkocmVkaXJlY3QsIGVyci5tdXRhYmxlQ29va2llcyk7XG4gICAgfVxuICAgIGlmICgoMCwgX25vdGZvdW5kLmlzTm90Rm91bmRFcnJvcikoZXJyKSkge1xuICAgICAgICAvLyBUaGlzIGlzIGEgbm90IGZvdW5kIGVycm9yISBTZW5kIHRoZSBub3QgZm91bmQgcmVzcG9uc2UuXG4gICAgICAgIHJldHVybiAoMCwgX3Jlc3BvbnNlaGFuZGxlcnMuaGFuZGxlTm90Rm91bmRSZXNwb25zZSkoKTtcbiAgICB9XG4gICAgLy8gUmV0dXJuIGZhbHNlIHRvIGluZGljYXRlIHRoYXQgdGhpcyBpcyBub3QgYSBoYW5kbGVkIGVycm9yLlxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzb2x2ZS1oYW5kbGVyLWVycm9yLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJyZXNvbHZlSGFuZGxlckVycm9yIiwiX25vdGZvdW5kIiwicmVxdWlyZSIsIl9yZWRpcmVjdCIsIl9yZXNwb25zZWhhbmRsZXJzIiwiZXJyIiwiaXNSZWRpcmVjdEVycm9yIiwicmVkaXJlY3QiLCJnZXRVUkxGcm9tUmVkaXJlY3RFcnJvciIsIkVycm9yIiwiaGFuZGxlVGVtcG9yYXJ5UmVkaXJlY3RSZXNwb25zZSIsIm11dGFibGVDb29raWVzIiwiaXNOb3RGb3VuZEVycm9yIiwiaGFuZGxlTm90Rm91bmRSZXNwb25zZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/resolve-handler-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.js":
/*!********************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/app-route/module.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    AppRouteRouteModule: function() {\n        return AppRouteRouteModule;\n    },\n    default: function() {\n        return _default;\n    }\n});\nconst _routemodule = __webpack_require__(/*! ../route-module */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/route-module.js\");\nconst _requestasyncstoragewrapper = __webpack_require__(/*! ../../../async-storage/request-async-storage-wrapper */ \"(rsc)/./node_modules/next/dist/server/async-storage/request-async-storage-wrapper.js\");\nconst _staticgenerationasyncstoragewrapper = __webpack_require__(/*! ../../../async-storage/static-generation-async-storage-wrapper */ \"(rsc)/./node_modules/next/dist/server/async-storage/static-generation-async-storage-wrapper.js\");\nconst _responsehandlers = __webpack_require__(/*! ../helpers/response-handlers */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/helpers/response-handlers.js\");\nconst _http = __webpack_require__(/*! ../../../web/http */ \"(rsc)/./node_modules/next/dist/server/web/http.js\");\nconst _patchfetch = __webpack_require__(/*! ../../../lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\nconst _tracer = __webpack_require__(/*! ../../../lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\nconst _constants = __webpack_require__(/*! ../../../lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\nconst _getpathnamefromabsolutepath = __webpack_require__(/*! ./helpers/get-pathname-from-absolute-path */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/get-pathname-from-absolute-path.js\");\nconst _proxyrequest = __webpack_require__(/*! ./helpers/proxy-request */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/proxy-request.js\");\nconst _resolvehandlererror = __webpack_require__(/*! ./helpers/resolve-handler-error */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/resolve-handler-error.js\");\nconst _log = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(/*! ../../../../build/output/log */ \"(rsc)/./node_modules/next/dist/build/output/log.js\"));\nconst _autoimplementmethods = __webpack_require__(/*! ./helpers/auto-implement-methods */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/auto-implement-methods.js\");\nconst _getnonstaticmethods = __webpack_require__(/*! ./helpers/get-non-static-methods */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/get-non-static-methods.js\");\nconst _requestcookies = __webpack_require__(/*! ../../../web/spec-extension/adapters/request-cookies */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.js\");\nconst _routekind = __webpack_require__(/*! ../../route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\n// These are imported weirdly like this because of the way that the bundling\n// works. We need to import the built files from the dist directory, but we\n// can't do that directly because we need types from the source files. So we\n// import the types from the source files and then import the built files.\nconst { requestAsyncStorage } = __webpack_require__(/*! next/dist/client/components/request-async-storage */ \"(shared)/./node_modules/next/dist/client/components/request-async-storage.js\");\nconst { staticGenerationAsyncStorage } = __webpack_require__(/*! next/dist/client/components/static-generation-async-storage */ \"(shared)/./node_modules/next/dist/client/components/static-generation-async-storage.js\");\nconst serverHooks = __webpack_require__(/*! next/dist/client/components/hooks-server-context */ \"(rsc)/./node_modules/next/dist/client/components/hooks-server-context.js\");\nconst headerHooks = __webpack_require__(/*! next/dist/client/components/headers */ \"(rsc)/./node_modules/next/dist/client/components/headers.js\");\nconst { staticGenerationBailout } = __webpack_require__(/*! next/dist/client/components/static-generation-bailout */ \"(rsc)/./node_modules/next/dist/client/components/static-generation-bailout.js\");\nconst { actionAsyncStorage } = __webpack_require__(/*! next/dist/client/components/action-async-storage */ \"(shared)/./node_modules/next/dist/client/components/action-async-storage.js\");\nclass AppRouteRouteModule extends _routemodule.RouteModule {\n    static is(route) {\n        return route.definition.kind === _routekind.RouteKind.APP_ROUTE;\n    }\n    constructor({ userland, definition, resolvedPagePath, nextConfigOutput }){\n        super({\n            userland,\n            definition\n        });\n        /**\n   * A reference to the request async storage.\n   */ this.requestAsyncStorage = requestAsyncStorage;\n        /**\n   * A reference to the static generation async storage.\n   */ this.staticGenerationAsyncStorage = staticGenerationAsyncStorage;\n        /**\n   * An interface to call server hooks which interact with the underlying\n   * storage.\n   */ this.serverHooks = serverHooks;\n        /**\n   * An interface to call header hooks which interact with the underlying\n   * request storage.\n   */ this.headerHooks = headerHooks;\n        /**\n   * An interface to call static generation bailout hooks which interact with\n   * the underlying static generation storage.\n   */ this.staticGenerationBailout = staticGenerationBailout;\n        /**\n   * A reference to the mutation related async storage, such as mutations of\n   * cookies.\n   */ this.actionAsyncStorage = actionAsyncStorage;\n        this.resolvedPagePath = resolvedPagePath;\n        this.nextConfigOutput = nextConfigOutput;\n        // Automatically implement some methods if they aren't implemented by the\n        // userland module.\n        this.methods = (0, _autoimplementmethods.autoImplementMethods)(userland);\n        // Get the non-static methods for this route.\n        this.nonStaticMethods = (0, _getnonstaticmethods.getNonStaticMethods)(userland);\n        // Get the dynamic property from the userland module.\n        this.dynamic = this.userland.dynamic;\n        if (this.nextConfigOutput === \"export\") {\n            if (!this.dynamic || this.dynamic === \"auto\") {\n                this.dynamic = \"error\";\n            } else if (this.dynamic === \"force-dynamic\") {\n                throw new Error(`export const dynamic = \"force-dynamic\" on page \"${definition.pathname}\" cannot be used with \"output: export\". See more info here: https://nextjs.org/docs/advanced-features/static-html-export`);\n            }\n        }\n        // We only warn in development after here, so return if we're not in\n        // development.\n        if (true) {\n            // Print error in development if the exported handlers are in lowercase, only\n            // uppercase handlers are supported.\n            const lowercased = _http.HTTP_METHODS.map((method)=>method.toLowerCase());\n            for (const method of lowercased){\n                if (method in this.userland) {\n                    _log.error(`Detected lowercase method '${method}' in '${this.resolvedPagePath}'. Export the uppercase '${method.toUpperCase()}' method name to fix this error.`);\n                }\n            }\n            // Print error if the module exports a default handler, they must use named\n            // exports for each HTTP method.\n            if (\"default\" in this.userland) {\n                _log.error(`Detected default export in '${this.resolvedPagePath}'. Export a named export for each HTTP method instead.`);\n            }\n            // If there is no methods exported by this module, then return a not found\n            // response.\n            if (!_http.HTTP_METHODS.some((method)=>method in this.userland)) {\n                _log.error(`No HTTP methods exported in '${this.resolvedPagePath}'. Export a named export for each HTTP method.`);\n            }\n        }\n    }\n    /**\n   * Resolves the handler function for the given method.\n   *\n   * @param method the requested method\n   * @returns the handler function for the given method\n   */ resolve(method) {\n        // Ensure that the requested method is a valid method (to prevent RCE's).\n        if (!(0, _http.isHTTPMethod)(method)) return _responsehandlers.handleBadRequestResponse;\n        // Return the handler.\n        return this.methods[method];\n    }\n    /**\n   * Executes the route handler.\n   */ async execute(request, context) {\n        // Get the handler function for the given method.\n        const handler = this.resolve(request.method);\n        // Get the context for the request.\n        const requestContext = {\n            req: request\n        };\n        requestContext.renderOpts = {\n            previewProps: context.prerenderManifest.preview\n        };\n        // Get the context for the static generation.\n        const staticGenerationContext = {\n            pathname: this.definition.pathname,\n            renderOpts: // the default values.\n            context.staticGenerationContext ?? {\n                supportsDynamicHTML: false\n            }\n        };\n        // Add the fetchCache option to the renderOpts.\n        staticGenerationContext.renderOpts.fetchCache = this.userland.fetchCache;\n        // Run the handler with the request AsyncLocalStorage to inject the helper\n        // support. We set this to `unknown` because the type is not known until\n        // runtime when we do a instanceof check below.\n        const response = await this.actionAsyncStorage.run({\n            isAppRoute: true\n        }, ()=>{\n            return _requestasyncstoragewrapper.RequestAsyncStorageWrapper.wrap(this.requestAsyncStorage, requestContext, ()=>{\n                return _staticgenerationasyncstoragewrapper.StaticGenerationAsyncStorageWrapper.wrap(this.staticGenerationAsyncStorage, staticGenerationContext, (staticGenerationStore)=>{\n                    var _getTracer_getRootSpanAttributes;\n                    // Check to see if we should bail out of static generation based on\n                    // having non-static methods.\n                    if (this.nonStaticMethods) {\n                        this.staticGenerationBailout(`non-static methods used ${this.nonStaticMethods.join(\", \")}`);\n                    }\n                    // Update the static generation store based on the dynamic property.\n                    switch(this.dynamic){\n                        case \"force-dynamic\":\n                            // The dynamic property is set to force-dynamic, so we should\n                            // force the page to be dynamic.\n                            staticGenerationStore.forceDynamic = true;\n                            this.staticGenerationBailout(`force-dynamic`, {\n                                dynamic: this.dynamic\n                            });\n                            break;\n                        case \"force-static\":\n                            // The dynamic property is set to force-static, so we should\n                            // force the page to be static.\n                            staticGenerationStore.forceStatic = true;\n                            break;\n                        case \"error\":\n                            // The dynamic property is set to error, so we should throw an\n                            // error if the page is being statically generated.\n                            staticGenerationStore.dynamicShouldError = true;\n                            break;\n                        default:\n                            break;\n                    }\n                    // If the static generation store does not have a revalidate value\n                    // set, then we should set it the revalidate value from the userland\n                    // module or default to false.\n                    staticGenerationStore.revalidate ??= this.userland.revalidate ?? false;\n                    // Wrap the request so we can add additional functionality to cases\n                    // that might change it's output or affect the rendering.\n                    const wrappedRequest = (0, _proxyrequest.proxyRequest)(request, {\n                        dynamic: this.dynamic\n                    }, {\n                        headerHooks: this.headerHooks,\n                        serverHooks: this.serverHooks,\n                        staticGenerationBailout: this.staticGenerationBailout\n                    });\n                    // TODO: propagate this pathname from route matcher\n                    const route = (0, _getpathnamefromabsolutepath.getPathnameFromAbsolutePath)(this.resolvedPagePath);\n                    (_getTracer_getRootSpanAttributes = (0, _tracer.getTracer)().getRootSpanAttributes()) == null ? void 0 : _getTracer_getRootSpanAttributes.set(\"next.route\", route);\n                    return (0, _tracer.getTracer)().trace(_constants.AppRouteRouteHandlersSpan.runHandler, {\n                        spanName: `executing api route (app) ${route}`,\n                        attributes: {\n                            \"next.route\": route\n                        }\n                    }, async ()=>{\n                        var _staticGenerationStore_tags;\n                        // Patch the global fetch.\n                        (0, _patchfetch.patchFetch)({\n                            serverHooks: this.serverHooks,\n                            staticGenerationAsyncStorage: this.staticGenerationAsyncStorage\n                        });\n                        const res = await handler(wrappedRequest, {\n                            params: context.params\n                        });\n                        context.staticGenerationContext.fetchMetrics = staticGenerationStore.fetchMetrics;\n                        await Promise.all(staticGenerationStore.pendingRevalidates || []);\n                        (0, _patchfetch.addImplicitTags)(staticGenerationStore);\n                        context.staticGenerationContext.fetchTags = (_staticGenerationStore_tags = staticGenerationStore.tags) == null ? void 0 : _staticGenerationStore_tags.join(\",\");\n                        // It's possible cookies were set in the handler, so we need\n                        // to merge the modified cookies and the returned response\n                        // here.\n                        const requestStore = this.requestAsyncStorage.getStore();\n                        if (requestStore && requestStore.mutableCookies) {\n                            const headers = new Headers(res.headers);\n                            if ((0, _requestcookies.appendMutableCookies)(headers, requestStore.mutableCookies)) {\n                                return new Response(res.body, {\n                                    status: res.status,\n                                    statusText: res.statusText,\n                                    headers\n                                });\n                            }\n                        }\n                        return res;\n                    });\n                });\n            });\n        });\n        // If the handler did't return a valid response, then return the internal\n        // error response.\n        if (!(response instanceof Response)) {\n            // TODO: validate the correct handling behavior, maybe log something?\n            return (0, _responsehandlers.handleInternalServerErrorResponse)();\n        }\n        if (response.headers.has(\"x-middleware-rewrite\")) {\n            // TODO: move this error into the `NextResponse.rewrite()` function.\n            // TODO-APP: re-enable support below when we can proxy these type of requests\n            throw new Error(\"NextResponse.rewrite() was used in a app route handler, this is not currently supported. Please remove the invocation to continue.\");\n        // // This is a rewrite created via `NextResponse.rewrite()`. We need to send\n        // // the response up so it can be handled by the backing server.\n        // // If the server is running in minimal mode, we just want to forward the\n        // // response (including the rewrite headers) upstream so it can perform the\n        // // redirect for us, otherwise return with the special condition so this\n        // // server can perform a rewrite.\n        // if (!minimalMode) {\n        //   return { response, condition: 'rewrite' }\n        // }\n        // // Relativize the url so it's relative to the base url. This is so the\n        // // outgoing headers upstream can be relative.\n        // const rewritePath = response.headers.get('x-middleware-rewrite')!\n        // const initUrl = getRequestMeta(req, '__NEXT_INIT_URL')!\n        // const { pathname } = parseUrl(relativizeURL(rewritePath, initUrl))\n        // response.headers.set('x-middleware-rewrite', pathname)\n        }\n        if (response.headers.get(\"x-middleware-next\") === \"1\") {\n            // TODO: move this error into the `NextResponse.next()` function.\n            throw new Error(\"NextResponse.next() was used in a app route handler, this is not supported. See here for more info: https://nextjs.org/docs/messages/next-response-next-in-app-route-handler\");\n        }\n        return response;\n    }\n    async handle(request, context) {\n        try {\n            // Execute the route to get the response.\n            const response = await this.execute(request, context);\n            // The response was handled, return it.\n            return response;\n        } catch (err) {\n            // Try to resolve the error to a response, else throw it again.\n            const response = (0, _resolvehandlererror.resolveHandlerError)(err);\n            if (!response) throw err;\n            // The response was resolved, return it.\n            return response;\n        }\n    }\n}\nconst _default = AppRouteRouteModule; //# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/future/route-modules/helpers/response-handlers.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/helpers/response-handlers.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    handleTemporaryRedirectResponse: function() {\n        return handleTemporaryRedirectResponse;\n    },\n    handleBadRequestResponse: function() {\n        return handleBadRequestResponse;\n    },\n    handleNotFoundResponse: function() {\n        return handleNotFoundResponse;\n    },\n    handleMethodNotAllowedResponse: function() {\n        return handleMethodNotAllowedResponse;\n    },\n    handleInternalServerErrorResponse: function() {\n        return handleInternalServerErrorResponse;\n    }\n});\nconst _requestcookies = __webpack_require__(/*! ../../../web/spec-extension/adapters/request-cookies */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.js\");\nfunction handleTemporaryRedirectResponse(url, mutableCookies) {\n    const headers = new Headers({\n        location: url\n    });\n    (0, _requestcookies.appendMutableCookies)(headers, mutableCookies);\n    return new Response(null, {\n        status: 307,\n        headers\n    });\n}\nfunction handleBadRequestResponse() {\n    return new Response(null, {\n        status: 400\n    });\n}\nfunction handleNotFoundResponse() {\n    return new Response(null, {\n        status: 404\n    });\n}\nfunction handleMethodNotAllowedResponse() {\n    return new Response(null, {\n        status: 405\n    });\n}\nfunction handleInternalServerErrorResponse() {\n    return new Response(null, {\n        status: 500\n    });\n} //# sourceMappingURL=response-handlers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9oZWxwZXJzL3Jlc3BvbnNlLWhhbmRsZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGLEtBQU1DLENBQUFBLENBTU47QUFDQSxTQUFTTSxRQUFRQyxNQUFNLEVBQUVDLEdBQUc7SUFDeEIsSUFBSSxJQUFJQyxRQUFRRCxJQUFJWixPQUFPQyxjQUFjLENBQUNVLFFBQVFFLE1BQU07UUFDcERDLFlBQVk7UUFDWkMsS0FBS0gsR0FBRyxDQUFDQyxLQUFLO0lBQ2xCO0FBQ0o7QUFDQUgsUUFBUVIsU0FBUztJQUNiRyxpQ0FBaUM7UUFDN0IsT0FBT0E7SUFDWDtJQUNBQywwQkFBMEI7UUFDdEIsT0FBT0E7SUFDWDtJQUNBQyx3QkFBd0I7UUFDcEIsT0FBT0E7SUFDWDtJQUNBQyxnQ0FBZ0M7UUFDNUIsT0FBT0E7SUFDWDtJQUNBQyxtQ0FBbUM7UUFDL0IsT0FBT0E7SUFDWDtBQUNKO0FBQ0EsTUFBTU8sa0JBQWtCQyxtQkFBT0EsQ0FBQyxrSkFBc0Q7QUFDdEYsU0FBU1osZ0NBQWdDYSxHQUFHLEVBQUVDLGNBQWM7SUFDeEQsTUFBTUMsVUFBVSxJQUFJQyxRQUFRO1FBQ3hCQyxVQUFVSjtJQUNkO0lBQ0MsSUFBR0YsZ0JBQWdCTyxvQkFBb0IsRUFBRUgsU0FBU0Q7SUFDbkQsT0FBTyxJQUFJSyxTQUFTLE1BQU07UUFDdEJDLFFBQVE7UUFDUkw7SUFDSjtBQUNKO0FBQ0EsU0FBU2Q7SUFDTCxPQUFPLElBQUlrQixTQUFTLE1BQU07UUFDdEJDLFFBQVE7SUFDWjtBQUNKO0FBQ0EsU0FBU2xCO0lBQ0wsT0FBTyxJQUFJaUIsU0FBUyxNQUFNO1FBQ3RCQyxRQUFRO0lBQ1o7QUFDSjtBQUNBLFNBQVNqQjtJQUNMLE9BQU8sSUFBSWdCLFNBQVMsTUFBTTtRQUN0QkMsUUFBUTtJQUNaO0FBQ0o7QUFDQSxTQUFTaEI7SUFDTCxPQUFPLElBQUllLFNBQVMsTUFBTTtRQUN0QkMsUUFBUTtJQUNaO0FBQ0osRUFFQSw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb29kLWJsb2cvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9oZWxwZXJzL3Jlc3BvbnNlLWhhbmRsZXJzLmpzPzhkZGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBoYW5kbGVUZW1wb3JhcnlSZWRpcmVjdFJlc3BvbnNlOiBudWxsLFxuICAgIGhhbmRsZUJhZFJlcXVlc3RSZXNwb25zZTogbnVsbCxcbiAgICBoYW5kbGVOb3RGb3VuZFJlc3BvbnNlOiBudWxsLFxuICAgIGhhbmRsZU1ldGhvZE5vdEFsbG93ZWRSZXNwb25zZTogbnVsbCxcbiAgICBoYW5kbGVJbnRlcm5hbFNlcnZlckVycm9yUmVzcG9uc2U6IG51bGxcbn0pO1xuZnVuY3Rpb24gX2V4cG9ydCh0YXJnZXQsIGFsbCkge1xuICAgIGZvcih2YXIgbmFtZSBpbiBhbGwpT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGFsbFtuYW1lXVxuICAgIH0pO1xufVxuX2V4cG9ydChleHBvcnRzLCB7XG4gICAgaGFuZGxlVGVtcG9yYXJ5UmVkaXJlY3RSZXNwb25zZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVUZW1wb3JhcnlSZWRpcmVjdFJlc3BvbnNlO1xuICAgIH0sXG4gICAgaGFuZGxlQmFkUmVxdWVzdFJlc3BvbnNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZUJhZFJlcXVlc3RSZXNwb25zZTtcbiAgICB9LFxuICAgIGhhbmRsZU5vdEZvdW5kUmVzcG9uc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaGFuZGxlTm90Rm91bmRSZXNwb25zZTtcbiAgICB9LFxuICAgIGhhbmRsZU1ldGhvZE5vdEFsbG93ZWRSZXNwb25zZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVNZXRob2ROb3RBbGxvd2VkUmVzcG9uc2U7XG4gICAgfSxcbiAgICBoYW5kbGVJbnRlcm5hbFNlcnZlckVycm9yUmVzcG9uc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaGFuZGxlSW50ZXJuYWxTZXJ2ZXJFcnJvclJlc3BvbnNlO1xuICAgIH1cbn0pO1xuY29uc3QgX3JlcXVlc3Rjb29raWVzID0gcmVxdWlyZShcIi4uLy4uLy4uL3dlYi9zcGVjLWV4dGVuc2lvbi9hZGFwdGVycy9yZXF1ZXN0LWNvb2tpZXNcIik7XG5mdW5jdGlvbiBoYW5kbGVUZW1wb3JhcnlSZWRpcmVjdFJlc3BvbnNlKHVybCwgbXV0YWJsZUNvb2tpZXMpIHtcbiAgICBjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoe1xuICAgICAgICBsb2NhdGlvbjogdXJsXG4gICAgfSk7XG4gICAgKDAsIF9yZXF1ZXN0Y29va2llcy5hcHBlbmRNdXRhYmxlQ29va2llcykoaGVhZGVycywgbXV0YWJsZUNvb2tpZXMpO1xuICAgIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge1xuICAgICAgICBzdGF0dXM6IDMwNyxcbiAgICAgICAgaGVhZGVyc1xuICAgIH0pO1xufVxuZnVuY3Rpb24gaGFuZGxlQmFkUmVxdWVzdFJlc3BvbnNlKCkge1xuICAgIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge1xuICAgICAgICBzdGF0dXM6IDQwMFxuICAgIH0pO1xufVxuZnVuY3Rpb24gaGFuZGxlTm90Rm91bmRSZXNwb25zZSgpIHtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgc3RhdHVzOiA0MDRcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGhhbmRsZU1ldGhvZE5vdEFsbG93ZWRSZXNwb25zZSgpIHtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgc3RhdHVzOiA0MDVcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGhhbmRsZUludGVybmFsU2VydmVyRXJyb3JSZXNwb25zZSgpIHtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgc3RhdHVzOiA1MDBcbiAgICB9KTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzcG9uc2UtaGFuZGxlcnMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kdWxlIiwiaGFuZGxlVGVtcG9yYXJ5UmVkaXJlY3RSZXNwb25zZSIsImhhbmRsZUJhZFJlcXVlc3RSZXNwb25zZSIsImhhbmRsZU5vdEZvdW5kUmVzcG9uc2UiLCJoYW5kbGVNZXRob2ROb3RBbGxvd2VkUmVzcG9uc2UiLCJoYW5kbGVJbnRlcm5hbFNlcnZlckVycm9yUmVzcG9uc2UiLCJfZXhwb3J0IiwidGFyZ2V0IiwiYWxsIiwibmFtZSIsImVudW1lcmFibGUiLCJnZXQiLCJfcmVxdWVzdGNvb2tpZXMiLCJyZXF1aXJlIiwidXJsIiwibXV0YWJsZUNvb2tpZXMiLCJoZWFkZXJzIiwiSGVhZGVycyIsImxvY2F0aW9uIiwiYXBwZW5kTXV0YWJsZUNvb2tpZXMiLCJSZXNwb25zZSIsInN0YXR1cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/future/route-modules/helpers/response-handlers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/future/route-modules/route-module.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/route-module.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"RouteModule\", ({\n    enumerable: true,\n    get: function() {\n        return RouteModule;\n    }\n}));\nclass RouteModule {\n    constructor({ userland, definition }){\n        this.userland = userland;\n        this.definition = definition;\n    }\n} //# sourceMappingURL=route-module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9yb3V0ZS1tb2R1bGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILCtDQUE4QztJQUMxQ0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1BO0lBQ0ZDLFlBQVksRUFBRUMsUUFBUSxFQUFHQyxVQUFVLEVBQUcsQ0FBQztRQUNuQyxJQUFJLENBQUNELFFBQVEsR0FBR0E7UUFDaEIsSUFBSSxDQUFDQyxVQUFVLEdBQUdBO0lBQ3RCO0FBQ0osRUFFQSx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb29kLWJsb2cvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9yb3V0ZS1tb2R1bGUuanM/OWFhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJvdXRlTW9kdWxlXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBSb3V0ZU1vZHVsZTtcbiAgICB9XG59KTtcbmNsYXNzIFJvdXRlTW9kdWxlIHtcbiAgICBjb25zdHJ1Y3Rvcih7IHVzZXJsYW5kICwgZGVmaW5pdGlvbiAgfSl7XG4gICAgICAgIHRoaXMudXNlcmxhbmQgPSB1c2VybGFuZDtcbiAgICAgICAgdGhpcy5kZWZpbml0aW9uID0gZGVmaW5pdGlvbjtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvdXRlLW1vZHVsZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiUm91dGVNb2R1bGUiLCJjb25zdHJ1Y3RvciIsInVzZXJsYW5kIiwiZGVmaW5pdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/future/route-modules/route-module.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js":
/*!**********************************************************!*\
  !*** ./node_modules/next/dist/server/lib/patch-fetch.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    addImplicitTags: function() {\n        return addImplicitTags;\n    },\n    patchFetch: function() {\n        return patchFetch;\n    }\n});\nconst _constants = __webpack_require__(/*! ./trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\nconst _tracer = __webpack_require__(/*! ./trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\nconst _constants1 = __webpack_require__(/*! ../../lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\nconst isEdgeRuntime = \"nodejs\" === \"edge\";\nfunction addImplicitTags(staticGenerationStore) {\n    const newTags = [];\n    const pathname = staticGenerationStore == null ? void 0 : staticGenerationStore.originalPathname;\n    if (!pathname) {\n        return newTags;\n    }\n    if (!Array.isArray(staticGenerationStore.tags)) {\n        staticGenerationStore.tags = [];\n    }\n    if (!staticGenerationStore.tags.includes(pathname)) {\n        staticGenerationStore.tags.push(pathname);\n    }\n    newTags.push(pathname);\n    return newTags;\n}\nfunction trackFetchMetric(staticGenerationStore, ctx) {\n    if (!staticGenerationStore) return;\n    if (!staticGenerationStore.fetchMetrics) {\n        staticGenerationStore.fetchMetrics = [];\n    }\n    const dedupeFields = [\n        \"url\",\n        \"status\",\n        \"method\"\n    ];\n    // don't add metric if one already exists for the fetch\n    if (staticGenerationStore.fetchMetrics.some((metric)=>{\n        return dedupeFields.every((field)=>metric[field] === ctx[field]);\n    })) {\n        return;\n    }\n    staticGenerationStore.fetchMetrics.push({\n        url: ctx.url,\n        cacheStatus: ctx.cacheStatus,\n        status: ctx.status,\n        method: ctx.method,\n        start: ctx.start,\n        end: Date.now(),\n        idx: staticGenerationStore.nextFetchId || 0\n    });\n}\nfunction patchFetch({ serverHooks, staticGenerationAsyncStorage }) {\n    if (!globalThis._nextOriginalFetch) {\n        globalThis._nextOriginalFetch = globalThis.fetch;\n    }\n    if (globalThis.fetch.__nextPatched) return;\n    const { DynamicServerError } = serverHooks;\n    const originFetch = globalThis._nextOriginalFetch;\n    globalThis.fetch = async (input, init)=>{\n        var _init_method;\n        let url;\n        try {\n            url = new URL(input instanceof Request ? input.url : input);\n            url.username = \"\";\n            url.password = \"\";\n        } catch  {\n            // Error caused by malformed URL should be handled by native fetch\n            url = undefined;\n        }\n        const fetchUrl = (url == null ? void 0 : url.href) ?? \"\";\n        const fetchStart = Date.now();\n        const method = (init == null ? void 0 : (_init_method = init.method) == null ? void 0 : _init_method.toUpperCase()) || \"GET\";\n        return await (0, _tracer.getTracer)().trace(_constants.AppRenderSpan.fetch, {\n            kind: _tracer.SpanKind.CLIENT,\n            spanName: [\n                \"fetch\",\n                method,\n                fetchUrl\n            ].filter(Boolean).join(\" \"),\n            attributes: {\n                \"http.url\": fetchUrl,\n                \"http.method\": method,\n                \"net.peer.name\": url == null ? void 0 : url.hostname,\n                \"net.peer.port\": (url == null ? void 0 : url.port) || undefined\n            }\n        }, async ()=>{\n            var _ref, _getRequestMeta;\n            const staticGenerationStore = staticGenerationAsyncStorage.getStore();\n            const isRequestInput = input && typeof input === \"object\" && typeof input.method === \"string\";\n            const getRequestMeta = (field)=>{\n                let value = isRequestInput ? input[field] : null;\n                return value || (init == null ? void 0 : init[field]);\n            };\n            // If the staticGenerationStore is not available, we can't do any\n            // special treatment of fetch, therefore fallback to the original\n            // fetch implementation.\n            if (!staticGenerationStore || ((_ref = init == null ? void 0 : init.next) == null ? void 0 : _ref.internal) || staticGenerationStore.isDraftMode) {\n                return originFetch(input, init);\n            }\n            let revalidate = undefined;\n            const getNextField = (field)=>{\n                var _init_next, _init_next1, _input_next;\n                return typeof (init == null ? void 0 : (_init_next = init.next) == null ? void 0 : _init_next[field]) !== \"undefined\" ? init == null ? void 0 : (_init_next1 = init.next) == null ? void 0 : _init_next1[field] : isRequestInput ? (_input_next = input.next) == null ? void 0 : _input_next[field] : undefined;\n            };\n            // RequestInit doesn't keep extra fields e.g. next so it's\n            // only available if init is used separate\n            let curRevalidate = getNextField(\"revalidate\");\n            const tags = getNextField(\"tags\") || [];\n            if (Array.isArray(tags)) {\n                if (!staticGenerationStore.tags) {\n                    staticGenerationStore.tags = [];\n                }\n                for (const tag of tags){\n                    if (!staticGenerationStore.tags.includes(tag)) {\n                        staticGenerationStore.tags.push(tag);\n                    }\n                }\n            }\n            const implicitTags = addImplicitTags(staticGenerationStore);\n            for (const tag of implicitTags || []){\n                if (!tags.includes(tag)) {\n                    tags.push(tag);\n                }\n            }\n            const isOnlyCache = staticGenerationStore.fetchCache === \"only-cache\";\n            const isForceCache = staticGenerationStore.fetchCache === \"force-cache\";\n            const isDefaultCache = staticGenerationStore.fetchCache === \"default-cache\";\n            const isDefaultNoStore = staticGenerationStore.fetchCache === \"default-no-store\";\n            const isOnlyNoStore = staticGenerationStore.fetchCache === \"only-no-store\";\n            const isForceNoStore = staticGenerationStore.fetchCache === \"force-no-store\";\n            let _cache = getRequestMeta(\"cache\");\n            if (typeof _cache === \"string\" && typeof curRevalidate !== \"undefined\") {\n                console.warn(`Warning: fetch for ${fetchUrl} on ${staticGenerationStore.pathname} specified \"cache: ${_cache}\" and \"revalidate: ${curRevalidate}\", only one should be specified.`);\n                _cache = undefined;\n            }\n            if (_cache === \"force-cache\") {\n                curRevalidate = false;\n            }\n            if ([\n                \"no-cache\",\n                \"no-store\"\n            ].includes(_cache || \"\")) {\n                curRevalidate = 0;\n            }\n            if (typeof curRevalidate === \"number\" || curRevalidate === false) {\n                revalidate = curRevalidate;\n            }\n            let cacheReason = \"\";\n            const _headers = getRequestMeta(\"headers\");\n            const initHeaders = typeof (_headers == null ? void 0 : _headers.get) === \"function\" ? _headers : new Headers(_headers || {});\n            const hasUnCacheableHeader = initHeaders.get(\"authorization\") || initHeaders.get(\"cookie\");\n            const isUnCacheableMethod = ![\n                \"get\",\n                \"head\"\n            ].includes(((_getRequestMeta = getRequestMeta(\"method\")) == null ? void 0 : _getRequestMeta.toLowerCase()) || \"get\");\n            // if there are authorized headers or a POST method and\n            // dynamic data usage was present above the tree we bail\n            // e.g. if cookies() is used before an authed/POST fetch\n            const autoNoCache = (hasUnCacheableHeader || isUnCacheableMethod) && staticGenerationStore.revalidate === 0;\n            if (isForceNoStore) {\n                revalidate = 0;\n                cacheReason = \"fetchCache = force-no-store\";\n            }\n            if (isOnlyNoStore) {\n                if (_cache === \"force-cache\" || revalidate === 0) {\n                    throw new Error(`cache: 'force-cache' used on fetch for ${fetchUrl} with 'export const fetchCache = 'only-no-store'`);\n                }\n                revalidate = 0;\n                cacheReason = \"fetchCache = only-no-store\";\n            }\n            if (isOnlyCache && _cache === \"no-store\") {\n                throw new Error(`cache: 'no-store' used on fetch for ${fetchUrl} with 'export const fetchCache = 'only-cache'`);\n            }\n            if (isForceCache && (typeof curRevalidate === \"undefined\" || curRevalidate === 0)) {\n                cacheReason = \"fetchCache = force-cache\";\n                revalidate = false;\n            }\n            if (typeof revalidate === \"undefined\") {\n                if (isDefaultCache) {\n                    revalidate = false;\n                    cacheReason = \"fetchCache = default-cache\";\n                } else if (autoNoCache) {\n                    revalidate = 0;\n                    cacheReason = \"auto no cache\";\n                } else if (isDefaultNoStore) {\n                    revalidate = 0;\n                    cacheReason = \"fetchCache = default-no-store\";\n                } else {\n                    cacheReason = \"auto cache\";\n                    revalidate = typeof staticGenerationStore.revalidate === \"boolean\" || typeof staticGenerationStore.revalidate === \"undefined\" ? false : staticGenerationStore.revalidate;\n                }\n            } else if (!cacheReason) {\n                cacheReason = `revalidate: ${revalidate}`;\n            }\n            if (// revalidate although if it occurs during build we do\n            !autoNoCache && (typeof staticGenerationStore.revalidate === \"undefined\" || typeof revalidate === \"number\" && (staticGenerationStore.revalidate === false || typeof staticGenerationStore.revalidate === \"number\" && revalidate < staticGenerationStore.revalidate))) {\n                staticGenerationStore.revalidate = revalidate;\n            }\n            const isCacheableRevalidate = typeof revalidate === \"number\" && revalidate > 0 || revalidate === false;\n            let cacheKey;\n            if (staticGenerationStore.incrementalCache && isCacheableRevalidate) {\n                try {\n                    cacheKey = await staticGenerationStore.incrementalCache.fetchCacheKey(fetchUrl, isRequestInput ? input : init);\n                } catch (err) {\n                    console.error(`Failed to generate cache key for`, input);\n                }\n            }\n            const requestInputFields = [\n                \"cache\",\n                \"credentials\",\n                \"headers\",\n                \"integrity\",\n                \"keepalive\",\n                \"method\",\n                \"mode\",\n                \"redirect\",\n                \"referrer\",\n                \"referrerPolicy\",\n                \"signal\",\n                \"window\",\n                \"duplex\"\n            ];\n            if (isRequestInput) {\n                const reqInput = input;\n                const reqOptions = {\n                    body: reqInput._ogBody || reqInput.body\n                };\n                for (const field of requestInputFields){\n                    // @ts-expect-error custom fields\n                    reqOptions[field] = reqInput[field];\n                }\n                input = new Request(reqInput.url, reqOptions);\n            } else if (init) {\n                const initialInit = init;\n                init = {\n                    body: init._ogBody || init.body\n                };\n                for (const field of requestInputFields){\n                    // @ts-expect-error custom fields\n                    init[field] = initialInit[field];\n                }\n            }\n            const fetchIdx = staticGenerationStore.nextFetchId ?? 1;\n            staticGenerationStore.nextFetchId = fetchIdx + 1;\n            const normalizedRevalidate = typeof revalidate !== \"number\" ? _constants1.CACHE_ONE_YEAR : revalidate;\n            const doOriginalFetch = async (isStale)=>{\n                // add metadata to init without editing the original\n                const clonedInit = {\n                    ...init,\n                    next: {\n                        ...init == null ? void 0 : init.next,\n                        fetchType: \"origin\",\n                        fetchIdx\n                    }\n                };\n                return originFetch(input, clonedInit).then(async (res)=>{\n                    if (!isStale) {\n                        trackFetchMetric(staticGenerationStore, {\n                            start: fetchStart,\n                            url: fetchUrl,\n                            cacheReason,\n                            cacheStatus: \"miss\",\n                            status: res.status,\n                            method: clonedInit.method || \"GET\"\n                        });\n                    }\n                    if (res.status === 200 && staticGenerationStore.incrementalCache && cacheKey && isCacheableRevalidate) {\n                        const bodyBuffer = Buffer.from(await res.arrayBuffer());\n                        try {\n                            await staticGenerationStore.incrementalCache.set(cacheKey, {\n                                kind: \"FETCH\",\n                                data: {\n                                    headers: Object.fromEntries(res.headers.entries()),\n                                    body: bodyBuffer.toString(\"base64\"),\n                                    status: res.status,\n                                    tags,\n                                    url: res.url\n                                },\n                                revalidate: normalizedRevalidate\n                            }, revalidate, true, fetchUrl, fetchIdx);\n                        } catch (err) {\n                            console.warn(`Failed to set fetch cache`, input, err);\n                        }\n                        const response = new Response(bodyBuffer, {\n                            headers: new Headers(res.headers),\n                            status: res.status\n                        });\n                        Object.defineProperty(response, \"url\", {\n                            value: res.url\n                        });\n                        return response;\n                    }\n                    return res;\n                });\n            };\n            if (cacheKey && (staticGenerationStore == null ? void 0 : staticGenerationStore.incrementalCache)) {\n                const entry = staticGenerationStore.isOnDemandRevalidate ? null : await staticGenerationStore.incrementalCache.get(cacheKey, true, revalidate, fetchUrl, fetchIdx);\n                if ((entry == null ? void 0 : entry.value) && entry.value.kind === \"FETCH\") {\n                    const currentTags = entry.value.data.tags;\n                    // when stale and is revalidating we wait for fresh data\n                    // so the revalidated entry has the updated data\n                    if (!(staticGenerationStore.isRevalidate && entry.isStale)) {\n                        if (entry.isStale) {\n                            if (!staticGenerationStore.pendingRevalidates) {\n                                staticGenerationStore.pendingRevalidates = [];\n                            }\n                            staticGenerationStore.pendingRevalidates.push(doOriginalFetch(true).catch(console.error));\n                        } else if (tags && !tags.every((tag)=>{\n                            return currentTags == null ? void 0 : currentTags.includes(tag);\n                        })) {\n                            var _staticGenerationStore_incrementalCache;\n                            // if new tags are being added we need to set even if\n                            // the data isn't stale\n                            if (!entry.value.data.tags) {\n                                entry.value.data.tags = [];\n                            }\n                            for (const tag of tags){\n                                if (!entry.value.data.tags.includes(tag)) {\n                                    entry.value.data.tags.push(tag);\n                                }\n                            }\n                            (_staticGenerationStore_incrementalCache = staticGenerationStore.incrementalCache) == null ? void 0 : _staticGenerationStore_incrementalCache.set(cacheKey, entry.value, revalidate, true, fetchUrl, fetchIdx);\n                        }\n                        const resData = entry.value.data;\n                        let decodedBody;\n                        if (false) {} else {\n                            decodedBody = Buffer.from(resData.body, \"base64\").subarray();\n                        }\n                        trackFetchMetric(staticGenerationStore, {\n                            start: fetchStart,\n                            url: fetchUrl,\n                            cacheReason,\n                            cacheStatus: \"hit\",\n                            status: resData.status || 200,\n                            method: (init == null ? void 0 : init.method) || \"GET\"\n                        });\n                        const response = new Response(decodedBody, {\n                            headers: resData.headers,\n                            status: resData.status\n                        });\n                        Object.defineProperty(response, \"url\", {\n                            value: entry.value.data.url\n                        });\n                        return response;\n                    }\n                }\n            }\n            if (staticGenerationStore.isStaticGeneration) {\n                if (init && typeof init === \"object\") {\n                    const cache = init.cache;\n                    // Delete `cache` property as Cloudflare Workers will throw an error\n                    if (isEdgeRuntime) {\n                        delete init.cache;\n                    }\n                    if (cache === \"no-store\") {\n                        staticGenerationStore.revalidate = 0;\n                        const dynamicUsageReason = `no-store fetch ${input}${staticGenerationStore.pathname ? ` ${staticGenerationStore.pathname}` : \"\"}`;\n                        const err = new DynamicServerError(dynamicUsageReason);\n                        staticGenerationStore.dynamicUsageErr = err;\n                        staticGenerationStore.dynamicUsageStack = err.stack;\n                        staticGenerationStore.dynamicUsageDescription = dynamicUsageReason;\n                    }\n                    const hasNextConfig = \"next\" in init;\n                    const next = init.next || {};\n                    if (typeof next.revalidate === \"number\" && (typeof staticGenerationStore.revalidate === \"undefined\" || typeof staticGenerationStore.revalidate === \"number\" && next.revalidate < staticGenerationStore.revalidate)) {\n                        const forceDynamic = staticGenerationStore.forceDynamic;\n                        if (!forceDynamic || next.revalidate !== 0) {\n                            staticGenerationStore.revalidate = next.revalidate;\n                        }\n                        if (!forceDynamic && next.revalidate === 0) {\n                            const dynamicUsageReason = `revalidate: ${next.revalidate} fetch ${input}${staticGenerationStore.pathname ? ` ${staticGenerationStore.pathname}` : \"\"}`;\n                            const err = new DynamicServerError(dynamicUsageReason);\n                            staticGenerationStore.dynamicUsageErr = err;\n                            staticGenerationStore.dynamicUsageStack = err.stack;\n                            staticGenerationStore.dynamicUsageDescription = dynamicUsageReason;\n                        }\n                    }\n                    if (hasNextConfig) delete init.next;\n                }\n            }\n            return doOriginalFetch();\n        });\n    };\n    globalThis.fetch.__nextGetStaticStore = ()=>{\n        return staticGenerationAsyncStorage;\n    };\n    globalThis.fetch.__nextPatched = true;\n} //# sourceMappingURL=patch-fetch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/lib/trace/constants.js":
/*!**************************************************************!*\
  !*** ./node_modules/next/dist/server/lib/trace/constants.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Contains predefined constants for the trace span name in next/server.\n *\n * Currently, next/server/tracer is internal implementation only for tracking\n * next.js's implementation only with known span names defined here.\n **/ // eslint typescript has a bug with TS enums\n/* eslint-disable no-shadow */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    NextVanillaSpanAllowlist: function() {\n        return NextVanillaSpanAllowlist;\n    },\n    BaseServerSpan: function() {\n        return BaseServerSpan;\n    },\n    LoadComponentsSpan: function() {\n        return LoadComponentsSpan;\n    },\n    NextServerSpan: function() {\n        return NextServerSpan;\n    },\n    NextNodeServerSpan: function() {\n        return NextNodeServerSpan;\n    },\n    StartServerSpan: function() {\n        return StartServerSpan;\n    },\n    RenderSpan: function() {\n        return RenderSpan;\n    },\n    RouterSpan: function() {\n        return RouterSpan;\n    },\n    AppRenderSpan: function() {\n        return AppRenderSpan;\n    },\n    NodeSpan: function() {\n        return NodeSpan;\n    },\n    AppRouteRouteHandlersSpan: function() {\n        return AppRouteRouteHandlersSpan;\n    },\n    ResolveMetadataSpan: function() {\n        return ResolveMetadataSpan;\n    }\n});\nvar BaseServerSpan;\n(function(BaseServerSpan) {\n    BaseServerSpan[\"handleRequest\"] = \"BaseServer.handleRequest\";\n    BaseServerSpan[\"run\"] = \"BaseServer.run\";\n    BaseServerSpan[\"pipe\"] = \"BaseServer.pipe\";\n    BaseServerSpan[\"getStaticHTML\"] = \"BaseServer.getStaticHTML\";\n    BaseServerSpan[\"render\"] = \"BaseServer.render\";\n    BaseServerSpan[\"renderToResponseWithComponents\"] = \"BaseServer.renderToResponseWithComponents\";\n    BaseServerSpan[\"renderToResponse\"] = \"BaseServer.renderToResponse\";\n    BaseServerSpan[\"renderToHTML\"] = \"BaseServer.renderToHTML\";\n    BaseServerSpan[\"renderError\"] = \"BaseServer.renderError\";\n    BaseServerSpan[\"renderErrorToResponse\"] = \"BaseServer.renderErrorToResponse\";\n    BaseServerSpan[\"renderErrorToHTML\"] = \"BaseServer.renderErrorToHTML\";\n    BaseServerSpan[\"render404\"] = \"BaseServer.render404\";\n})(BaseServerSpan || (BaseServerSpan = {}));\nvar LoadComponentsSpan;\n(function(LoadComponentsSpan) {\n    LoadComponentsSpan[\"loadDefaultErrorComponents\"] = \"LoadComponents.loadDefaultErrorComponents\";\n    LoadComponentsSpan[\"loadComponents\"] = \"LoadComponents.loadComponents\";\n})(LoadComponentsSpan || (LoadComponentsSpan = {}));\nvar NextServerSpan;\n(function(NextServerSpan) {\n    NextServerSpan[\"getRequestHandler\"] = \"NextServer.getRequestHandler\";\n    NextServerSpan[\"getServer\"] = \"NextServer.getServer\";\n    NextServerSpan[\"getServerRequestHandler\"] = \"NextServer.getServerRequestHandler\";\n    NextServerSpan[\"createServer\"] = \"createServer.createServer\";\n})(NextServerSpan || (NextServerSpan = {}));\nvar NextNodeServerSpan;\n(function(NextNodeServerSpan) {\n    NextNodeServerSpan[\"compression\"] = \"NextNodeServer.compression\";\n    NextNodeServerSpan[\"getBuildId\"] = \"NextNodeServer.getBuildId\";\n    NextNodeServerSpan[\"generateStaticRoutes\"] = \"NextNodeServer.generateStaticRoutes\";\n    NextNodeServerSpan[\"generateFsStaticRoutes\"] = \"NextNodeServer.generateFsStaticRoutes\";\n    NextNodeServerSpan[\"generatePublicRoutes\"] = \"NextNodeServer.generatePublicRoutes\";\n    NextNodeServerSpan[\"generateImageRoutes\"] = \"NextNodeServer.generateImageRoutes.route\";\n    NextNodeServerSpan[\"sendRenderResult\"] = \"NextNodeServer.sendRenderResult\";\n    NextNodeServerSpan[\"sendStatic\"] = \"NextNodeServer.sendStatic\";\n    NextNodeServerSpan[\"proxyRequest\"] = \"NextNodeServer.proxyRequest\";\n    NextNodeServerSpan[\"runApi\"] = \"NextNodeServer.runApi\";\n    NextNodeServerSpan[\"render\"] = \"NextNodeServer.render\";\n    NextNodeServerSpan[\"renderHTML\"] = \"NextNodeServer.renderHTML\";\n    NextNodeServerSpan[\"imageOptimizer\"] = \"NextNodeServer.imageOptimizer\";\n    NextNodeServerSpan[\"getPagePath\"] = \"NextNodeServer.getPagePath\";\n    NextNodeServerSpan[\"getRoutesManifest\"] = \"NextNodeServer.getRoutesManifest\";\n    NextNodeServerSpan[\"findPageComponents\"] = \"NextNodeServer.findPageComponents\";\n    NextNodeServerSpan[\"getFontManifest\"] = \"NextNodeServer.getFontManifest\";\n    NextNodeServerSpan[\"getServerComponentManifest\"] = \"NextNodeServer.getServerComponentManifest\";\n    NextNodeServerSpan[\"getRequestHandler\"] = \"NextNodeServer.getRequestHandler\";\n    NextNodeServerSpan[\"renderToHTML\"] = \"NextNodeServer.renderToHTML\";\n    NextNodeServerSpan[\"renderError\"] = \"NextNodeServer.renderError\";\n    NextNodeServerSpan[\"renderErrorToHTML\"] = \"NextNodeServer.renderErrorToHTML\";\n    NextNodeServerSpan[\"render404\"] = \"NextNodeServer.render404\";\n    NextNodeServerSpan[\"route\"] = \"route\";\n    NextNodeServerSpan[\"onProxyReq\"] = \"onProxyReq\";\n    NextNodeServerSpan[\"apiResolver\"] = \"apiResolver\";\n})(NextNodeServerSpan || (NextNodeServerSpan = {}));\nvar StartServerSpan;\n(function(StartServerSpan) {\n    StartServerSpan[\"startServer\"] = \"startServer.startServer\";\n})(StartServerSpan || (StartServerSpan = {}));\nvar RenderSpan;\n(function(RenderSpan) {\n    RenderSpan[\"getServerSideProps\"] = \"Render.getServerSideProps\";\n    RenderSpan[\"getStaticProps\"] = \"Render.getStaticProps\";\n    RenderSpan[\"renderToString\"] = \"Render.renderToString\";\n    RenderSpan[\"renderDocument\"] = \"Render.renderDocument\";\n    RenderSpan[\"createBodyResult\"] = \"Render.createBodyResult\";\n})(RenderSpan || (RenderSpan = {}));\nvar AppRenderSpan;\n(function(AppRenderSpan) {\n    AppRenderSpan[\"renderToString\"] = \"AppRender.renderToString\";\n    AppRenderSpan[\"renderToReadableStream\"] = \"AppRender.renderToReadableStream\";\n    AppRenderSpan[\"getBodyResult\"] = \"AppRender.getBodyResult\";\n    AppRenderSpan[\"fetch\"] = \"AppRender.fetch\";\n})(AppRenderSpan || (AppRenderSpan = {}));\nvar RouterSpan;\n(function(RouterSpan) {\n    RouterSpan[\"executeRoute\"] = \"Router.executeRoute\";\n})(RouterSpan || (RouterSpan = {}));\nvar NodeSpan;\n(function(NodeSpan) {\n    NodeSpan[\"runHandler\"] = \"Node.runHandler\";\n})(NodeSpan || (NodeSpan = {}));\nvar AppRouteRouteHandlersSpan;\n(function(AppRouteRouteHandlersSpan) {\n    AppRouteRouteHandlersSpan[\"runHandler\"] = \"AppRouteRouteHandlers.runHandler\";\n})(AppRouteRouteHandlersSpan || (AppRouteRouteHandlersSpan = {}));\nvar ResolveMetadataSpan;\n(function(ResolveMetadataSpan) {\n    ResolveMetadataSpan[\"generateMetadata\"] = \"ResolveMetadata.generateMetadata\";\n})(ResolveMetadataSpan || (ResolveMetadataSpan = {}));\nconst NextVanillaSpanAllowlist = [\n    \"BaseServer.handleRequest\",\n    \"Render.getServerSideProps\",\n    \"Render.getStaticProps\",\n    \"AppRender.fetch\",\n    \"AppRender.getBodyResult\",\n    \"Render.renderDocument\",\n    \"Node.runHandler\",\n    \"AppRouteRouteHandlers.runHandler\",\n    \"ResolveMetadata.generateMetadata\"\n]; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/server/lib/trace/tracer.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    getTracer: function() {\n        return getTracer;\n    },\n    SpanStatusCode: function() {\n        return SpanStatusCode;\n    },\n    SpanKind: function() {\n        return SpanKind;\n    }\n});\nconst _constants = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\nlet api;\n// we want to allow users to use their own version of @opentelemetry/api if they\n// want to, so we try to require it first, and if it fails we fall back to the\n// version that is bundled with Next.js\n// this is because @opentelemetry/api has to be synced with the version of\n// @opentelemetry/tracing that is used, and we don't want to force users to use\n// the version that is bundled with Next.js.\n// the API is ~stable, so this should be fine\nif (false) {} else {\n    try {\n        api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/next/dist/compiled/@opentelemetry/api/index.js\");\n    } catch (err) {\n        api = __webpack_require__(/*! next/dist/compiled/@opentelemetry/api */ \"(rsc)/./node_modules/next/dist/compiled/@opentelemetry/api/index.js\");\n    }\n}\nconst { context, trace, SpanStatusCode, SpanKind } = api;\nconst isPromise = (p)=>{\n    return p !== null && typeof p === \"object\" && typeof p.then === \"function\";\n};\nconst closeSpanWithError = (span, error)=>{\n    if (error) {\n        span.recordException(error);\n    }\n    span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: error == null ? void 0 : error.message\n    });\n    span.end();\n};\n/** we use this map to propagate attributes from nested spans to the top span */ const rootSpanAttributesStore = new Map();\nconst rootSpanIdKey = api.createContextKey(\"next.rootSpanId\");\nlet lastSpanId = 0;\nconst getSpanId = ()=>lastSpanId++;\nclass NextTracerImpl {\n    /**\n   * Returns an instance to the trace with configured name.\n   * Since wrap / trace can be defined in any place prior to actual trace subscriber initialization,\n   * This should be lazily evaluated.\n   */ getTracerInstance() {\n        return trace.getTracer(\"next.js\", \"0.0.1\");\n    }\n    getContext() {\n        return context;\n    }\n    getActiveScopeSpan() {\n        return trace.getSpan(context == null ? void 0 : context.active());\n    }\n    trace(...args) {\n        const [type, fnOrOptions, fnOrEmpty] = args;\n        // coerce options form overload\n        const { fn, options } = typeof fnOrOptions === \"function\" ? {\n            fn: fnOrOptions,\n            options: {}\n        } : {\n            fn: fnOrEmpty,\n            options: {\n                ...fnOrOptions\n            }\n        };\n        if (!_constants.NextVanillaSpanAllowlist.includes(type) && process.env.NEXT_OTEL_VERBOSE !== \"1\" || options.hideSpan) {\n            return fn();\n        }\n        const spanName = options.spanName ?? type;\n        // Trying to get active scoped span to assign parent. If option specifies parent span manually, will try to use it.\n        let spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());\n        let isRootSpan = false;\n        if (!spanContext) {\n            spanContext = api.ROOT_CONTEXT;\n            isRootSpan = true;\n        }\n        const spanId = getSpanId();\n        options.attributes = {\n            \"next.span_name\": spanName,\n            \"next.span_type\": type,\n            ...options.attributes\n        };\n        return api.context.with(spanContext.setValue(rootSpanIdKey, spanId), ()=>this.getTracerInstance().startActiveSpan(spanName, options, (span)=>{\n                const onCleanup = ()=>{\n                    rootSpanAttributesStore.delete(spanId);\n                };\n                if (isRootSpan) {\n                    rootSpanAttributesStore.set(spanId, new Map(Object.entries(options.attributes ?? {})));\n                }\n                try {\n                    if (fn.length > 1) {\n                        return fn(span, (err)=>closeSpanWithError(span, err));\n                    }\n                    const result = fn(span);\n                    if (isPromise(result)) {\n                        result.then(()=>span.end(), (err)=>closeSpanWithError(span, err)).finally(onCleanup);\n                    } else {\n                        span.end();\n                        onCleanup();\n                    }\n                    return result;\n                } catch (err) {\n                    closeSpanWithError(span, err);\n                    onCleanup();\n                    throw err;\n                }\n            }));\n    }\n    wrap(...args) {\n        const tracer = this;\n        const [name, options, fn] = args.length === 3 ? args : [\n            args[0],\n            {},\n            args[1]\n        ];\n        if (!_constants.NextVanillaSpanAllowlist.includes(name) && process.env.NEXT_OTEL_VERBOSE !== \"1\") {\n            return fn;\n        }\n        return function() {\n            let optionsObj = options;\n            if (typeof optionsObj === \"function\" && typeof fn === \"function\") {\n                optionsObj = optionsObj.apply(this, arguments);\n            }\n            const lastArgId = arguments.length - 1;\n            const cb = arguments[lastArgId];\n            if (typeof cb === \"function\") {\n                const scopeBoundCb = tracer.getContext().bind(context.active(), cb);\n                return tracer.trace(name, optionsObj, (_span, done)=>{\n                    arguments[lastArgId] = function(err) {\n                        done == null ? void 0 : done(err);\n                        return scopeBoundCb.apply(this, arguments);\n                    };\n                    return fn.apply(this, arguments);\n                });\n            } else {\n                return tracer.trace(name, optionsObj, ()=>fn.apply(this, arguments));\n            }\n        };\n    }\n    startSpan(...args) {\n        const [type, options] = args;\n        const spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());\n        return this.getTracerInstance().startSpan(type, options, spanContext);\n    }\n    getSpanContext(parentSpan) {\n        const spanContext = parentSpan ? trace.setSpan(context.active(), parentSpan) : undefined;\n        return spanContext;\n    }\n    getRootSpanAttributes() {\n        const spanId = context.active().getValue(rootSpanIdKey);\n        return rootSpanAttributesStore.get(spanId);\n    }\n}\nconst getTracer = (()=>{\n    const tracer = new NextTracerImpl();\n    return ()=>tracer;\n})(); //# sourceMappingURL=tracer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/node-polyfill-headers.js":
/*!****************************************************************!*\
  !*** ./node_modules/next/dist/server/node-polyfill-headers.js ***!
  \****************************************************************/
/***/ (() => {

eval("/**\n * Polyfills the `Headers.getAll(name)` method so it'll work in the edge\n * runtime.\n */ \nif (!(\"getAll\" in Headers.prototype)) {\n    // @ts-expect-error - this is polyfilling this method so it doesn't exist yet\n    Headers.prototype.getAll = function(name) {\n        name = name.toLowerCase();\n        if (name !== \"set-cookie\") throw new Error(\"Headers.getAll is only supported for Set-Cookie header\");\n        const headers = [\n            ...this.entries()\n        ].filter(([key])=>key === name);\n        return headers.map(([, value])=>value);\n    };\n} //# sourceMappingURL=node-polyfill-headers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9ub2RlLXBvbHlmaWxsLWhlYWRlcnMuanMiLCJtYXBwaW5ncyI6IkFBQUE7OztDQUdDLEdBQWdCO0FBQ2pCLElBQUksQ0FBRSxhQUFZQSxRQUFRQyxTQUFTLEdBQUc7SUFDbEMsNkVBQTZFO0lBQzdFRCxRQUFRQyxTQUFTLENBQUNDLE1BQU0sR0FBRyxTQUFTQyxJQUFJO1FBQ3BDQSxPQUFPQSxLQUFLQyxXQUFXO1FBQ3ZCLElBQUlELFNBQVMsY0FBYyxNQUFNLElBQUlFLE1BQU07UUFDM0MsTUFBTUMsVUFBVTtlQUNULElBQUksQ0FBQ0MsT0FBTztTQUNsQixDQUFDQyxNQUFNLENBQUMsQ0FBQyxDQUFDQyxJQUFJLEdBQUdBLFFBQVFOO1FBQzFCLE9BQU9HLFFBQVFJLEdBQUcsQ0FBQyxDQUFDLEdBQUdDLE1BQU0sR0FBR0E7SUFDcEM7QUFDSixFQUVBLGlEQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2QtYmxvZy8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2VydmVyL25vZGUtcG9seWZpbGwtaGVhZGVycy5qcz85NWI4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUG9seWZpbGxzIHRoZSBgSGVhZGVycy5nZXRBbGwobmFtZSlgIG1ldGhvZCBzbyBpdCdsbCB3b3JrIGluIHRoZSBlZGdlXG4gKiBydW50aW1lLlxuICovIFwidXNlIHN0cmljdFwiO1xuaWYgKCEoXCJnZXRBbGxcIiBpbiBIZWFkZXJzLnByb3RvdHlwZSkpIHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gdGhpcyBpcyBwb2x5ZmlsbGluZyB0aGlzIG1ldGhvZCBzbyBpdCBkb2Vzbid0IGV4aXN0IHlldFxuICAgIEhlYWRlcnMucHJvdG90eXBlLmdldEFsbCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKG5hbWUgIT09IFwic2V0LWNvb2tpZVwiKSB0aHJvdyBuZXcgRXJyb3IoXCJIZWFkZXJzLmdldEFsbCBpcyBvbmx5IHN1cHBvcnRlZCBmb3IgU2V0LUNvb2tpZSBoZWFkZXJcIik7XG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSBbXG4gICAgICAgICAgICAuLi50aGlzLmVudHJpZXMoKVxuICAgICAgICBdLmZpbHRlcigoW2tleV0pPT5rZXkgPT09IG5hbWUpO1xuICAgICAgICByZXR1cm4gaGVhZGVycy5tYXAoKFssIHZhbHVlXSk9PnZhbHVlKTtcbiAgICB9O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLXBvbHlmaWxsLWhlYWRlcnMuanMubWFwIl0sIm5hbWVzIjpbIkhlYWRlcnMiLCJwcm90b3R5cGUiLCJnZXRBbGwiLCJuYW1lIiwidG9Mb3dlckNhc2UiLCJFcnJvciIsImhlYWRlcnMiLCJlbnRyaWVzIiwiZmlsdGVyIiwia2V5IiwibWFwIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/node-polyfill-headers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/web/exports/next-response.js":
/*!********************************************************************!*\
  !*** ./node_modules/next/dist/server/web/exports/next-response.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("// This file is for modularized imports for next/server to get fully-treeshaking.\n\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"default\", ({\n    enumerable: true,\n    get: function() {\n        return _response.NextResponse;\n    }\n}));\nconst _response = __webpack_require__(/*! ../spec-extension/response */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/response.js\"); //# sourceMappingURL=next-response.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci93ZWIvZXhwb3J0cy9uZXh0LXJlc3BvbnNlLmpzIiwibWFwcGluZ3MiOiJBQUFBLGlGQUFpRjtBQUNwRTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsMkNBQTBDO0lBQ3RDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQyxVQUFVQyxZQUFZO0lBQ2pDO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUQsWUFBWUUsbUJBQU9BLENBQUMsd0dBQTRCLEdBRXRELHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2QtYmxvZy8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2VydmVyL3dlYi9leHBvcnRzL25leHQtcmVzcG9uc2UuanM/ODhhZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGZpbGUgaXMgZm9yIG1vZHVsYXJpemVkIGltcG9ydHMgZm9yIG5leHQvc2VydmVyIHRvIGdldCBmdWxseS10cmVlc2hha2luZy5cblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3Jlc3BvbnNlLk5leHRSZXNwb25zZTtcbiAgICB9XG59KTtcbmNvbnN0IF9yZXNwb25zZSA9IHJlcXVpcmUoXCIuLi9zcGVjLWV4dGVuc2lvbi9yZXNwb25zZVwiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmV4dC1yZXNwb25zZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX3Jlc3BvbnNlIiwiTmV4dFJlc3BvbnNlIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/web/http.js":
/*!***************************************************!*\
  !*** ./node_modules/next/dist/server/web/http.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * List of valid HTTP methods that can be implemented by Next.js's Custom App\n * Routes.\n */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    HTTP_METHODS: function() {\n        return HTTP_METHODS;\n    },\n    isHTTPMethod: function() {\n        return isHTTPMethod;\n    }\n});\nconst HTTP_METHODS = [\n    \"GET\",\n    \"HEAD\",\n    \"OPTIONS\",\n    \"POST\",\n    \"PUT\",\n    \"DELETE\",\n    \"PATCH\"\n];\nfunction isHTTPMethod(maybeMethod) {\n    return HTTP_METHODS.includes(maybeMethod);\n} //# sourceMappingURL=http.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci93ZWIvaHR0cC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7O0NBR0MsR0FBZ0I7QUFDakJBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGLEtBQU1DLENBQUFBLENBR047QUFDQSxTQUFTRyxRQUFRQyxNQUFNLEVBQUVDLEdBQUc7SUFDeEIsSUFBSSxJQUFJQyxRQUFRRCxJQUFJVCxPQUFPQyxjQUFjLENBQUNPLFFBQVFFLE1BQU07UUFDcERDLFlBQVk7UUFDWkMsS0FBS0gsR0FBRyxDQUFDQyxLQUFLO0lBQ2xCO0FBQ0o7QUFDQUgsUUFBUUwsU0FBUztJQUNiRyxjQUFjO1FBQ1YsT0FBT0E7SUFDWDtJQUNBQyxjQUFjO1FBQ1YsT0FBT0E7SUFDWDtBQUNKO0FBQ0EsTUFBTUQsZUFBZTtJQUNqQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNIO0FBQ0QsU0FBU0MsYUFBYU8sV0FBVztJQUM3QixPQUFPUixhQUFhUyxRQUFRLENBQUNEO0FBQ2pDLEVBRUEsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vZC1ibG9nLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvd2ViL2h0dHAuanM/ZTBjYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIExpc3Qgb2YgdmFsaWQgSFRUUCBtZXRob2RzIHRoYXQgY2FuIGJlIGltcGxlbWVudGVkIGJ5IE5leHQuanMncyBDdXN0b20gQXBwXG4gKiBSb3V0ZXMuXG4gKi8gXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBIVFRQX01FVEhPRFM6IG51bGwsXG4gICAgaXNIVFRQTWV0aG9kOiBudWxsXG59KTtcbmZ1bmN0aW9uIF9leHBvcnQodGFyZ2V0LCBhbGwpIHtcbiAgICBmb3IodmFyIG5hbWUgaW4gYWxsKU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBhbGxbbmFtZV1cbiAgICB9KTtcbn1cbl9leHBvcnQoZXhwb3J0cywge1xuICAgIEhUVFBfTUVUSE9EUzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBIVFRQX01FVEhPRFM7XG4gICAgfSxcbiAgICBpc0hUVFBNZXRob2Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaXNIVFRQTWV0aG9kO1xuICAgIH1cbn0pO1xuY29uc3QgSFRUUF9NRVRIT0RTID0gW1xuICAgIFwiR0VUXCIsXG4gICAgXCJIRUFEXCIsXG4gICAgXCJPUFRJT05TXCIsXG4gICAgXCJQT1NUXCIsXG4gICAgXCJQVVRcIixcbiAgICBcIkRFTEVURVwiLFxuICAgIFwiUEFUQ0hcIlxuXTtcbmZ1bmN0aW9uIGlzSFRUUE1ldGhvZChtYXliZU1ldGhvZCkge1xuICAgIHJldHVybiBIVFRQX01FVEhPRFMuaW5jbHVkZXMobWF5YmVNZXRob2QpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1odHRwLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1vZHVsZSIsIkhUVFBfTUVUSE9EUyIsImlzSFRUUE1ldGhvZCIsIl9leHBvcnQiLCJ0YXJnZXQiLCJhbGwiLCJuYW1lIiwiZW51bWVyYWJsZSIsImdldCIsIm1heWJlTWV0aG9kIiwiaW5jbHVkZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/web/http.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/web/next-url.js":
/*!*******************************************************!*\
  !*** ./node_modules/next/dist/server/web/next-url.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"NextURL\", ({\n    enumerable: true,\n    get: function() {\n        return NextURL;\n    }\n}));\nconst _detectdomainlocale = __webpack_require__(/*! ../../shared/lib/i18n/detect-domain-locale */ \"(rsc)/./node_modules/next/dist/shared/lib/i18n/detect-domain-locale.js\");\nconst _formatnextpathnameinfo = __webpack_require__(/*! ../../shared/lib/router/utils/format-next-pathname-info */ \"(rsc)/./node_modules/next/dist/shared/lib/router/utils/format-next-pathname-info.js\");\nconst _gethostname = __webpack_require__(/*! ../../shared/lib/get-hostname */ \"(rsc)/./node_modules/next/dist/shared/lib/get-hostname.js\");\nconst _getnextpathnameinfo = __webpack_require__(/*! ../../shared/lib/router/utils/get-next-pathname-info */ \"(rsc)/./node_modules/next/dist/shared/lib/router/utils/get-next-pathname-info.js\");\nconst REGEX_LOCALHOST_HOSTNAME = /(?!^https?:\\/\\/)(127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}|::1|localhost)/;\nfunction parseURL(url, base) {\n    return new URL(String(url).replace(REGEX_LOCALHOST_HOSTNAME, \"localhost\"), base && String(base).replace(REGEX_LOCALHOST_HOSTNAME, \"localhost\"));\n}\nconst Internal = Symbol(\"NextURLInternal\");\nclass NextURL {\n    constructor(input, baseOrOpts, opts){\n        let base;\n        let options;\n        if (typeof baseOrOpts === \"object\" && \"pathname\" in baseOrOpts || typeof baseOrOpts === \"string\") {\n            base = baseOrOpts;\n            options = opts || {};\n        } else {\n            options = opts || baseOrOpts || {};\n        }\n        this[Internal] = {\n            url: parseURL(input, base ?? options.base),\n            options: options,\n            basePath: \"\"\n        };\n        this.analyze();\n    }\n    analyze() {\n        var _this_Internal_options_nextConfig, _this_Internal_options_nextConfig_i18n, _this_Internal_domainLocale, _this_Internal_options_nextConfig1, _this_Internal_options_nextConfig_i18n1;\n        const info = (0, _getnextpathnameinfo.getNextPathnameInfo)(this[Internal].url.pathname, {\n            nextConfig: this[Internal].options.nextConfig,\n            parseData: !undefined,\n            i18nProvider: this[Internal].options.i18nProvider\n        });\n        const hostname = (0, _gethostname.getHostname)(this[Internal].url, this[Internal].options.headers);\n        this[Internal].domainLocale = this[Internal].options.i18nProvider ? this[Internal].options.i18nProvider.detectDomainLocale(hostname) : (0, _detectdomainlocale.detectDomainLocale)((_this_Internal_options_nextConfig = this[Internal].options.nextConfig) == null ? void 0 : (_this_Internal_options_nextConfig_i18n = _this_Internal_options_nextConfig.i18n) == null ? void 0 : _this_Internal_options_nextConfig_i18n.domains, hostname);\n        const defaultLocale = ((_this_Internal_domainLocale = this[Internal].domainLocale) == null ? void 0 : _this_Internal_domainLocale.defaultLocale) || ((_this_Internal_options_nextConfig1 = this[Internal].options.nextConfig) == null ? void 0 : (_this_Internal_options_nextConfig_i18n1 = _this_Internal_options_nextConfig1.i18n) == null ? void 0 : _this_Internal_options_nextConfig_i18n1.defaultLocale);\n        this[Internal].url.pathname = info.pathname;\n        this[Internal].defaultLocale = defaultLocale;\n        this[Internal].basePath = info.basePath ?? \"\";\n        this[Internal].buildId = info.buildId;\n        this[Internal].locale = info.locale ?? defaultLocale;\n        this[Internal].trailingSlash = info.trailingSlash;\n    }\n    formatPathname() {\n        return (0, _formatnextpathnameinfo.formatNextPathnameInfo)({\n            basePath: this[Internal].basePath,\n            buildId: this[Internal].buildId,\n            defaultLocale: !this[Internal].options.forceLocale ? this[Internal].defaultLocale : undefined,\n            locale: this[Internal].locale,\n            pathname: this[Internal].url.pathname,\n            trailingSlash: this[Internal].trailingSlash\n        });\n    }\n    formatSearch() {\n        return this[Internal].url.search;\n    }\n    get buildId() {\n        return this[Internal].buildId;\n    }\n    set buildId(buildId) {\n        this[Internal].buildId = buildId;\n    }\n    get locale() {\n        return this[Internal].locale ?? \"\";\n    }\n    set locale(locale) {\n        var _this_Internal_options_nextConfig, _this_Internal_options_nextConfig_i18n;\n        if (!this[Internal].locale || !((_this_Internal_options_nextConfig = this[Internal].options.nextConfig) == null ? void 0 : (_this_Internal_options_nextConfig_i18n = _this_Internal_options_nextConfig.i18n) == null ? void 0 : _this_Internal_options_nextConfig_i18n.locales.includes(locale))) {\n            throw new TypeError(`The NextURL configuration includes no locale \"${locale}\"`);\n        }\n        this[Internal].locale = locale;\n    }\n    get defaultLocale() {\n        return this[Internal].defaultLocale;\n    }\n    get domainLocale() {\n        return this[Internal].domainLocale;\n    }\n    get searchParams() {\n        return this[Internal].url.searchParams;\n    }\n    get host() {\n        return this[Internal].url.host;\n    }\n    set host(value) {\n        this[Internal].url.host = value;\n    }\n    get hostname() {\n        return this[Internal].url.hostname;\n    }\n    set hostname(value) {\n        this[Internal].url.hostname = value;\n    }\n    get port() {\n        return this[Internal].url.port;\n    }\n    set port(value) {\n        this[Internal].url.port = value;\n    }\n    get protocol() {\n        return this[Internal].url.protocol;\n    }\n    set protocol(value) {\n        this[Internal].url.protocol = value;\n    }\n    get href() {\n        const pathname = this.formatPathname();\n        const search = this.formatSearch();\n        return `${this.protocol}//${this.host}${pathname}${search}${this.hash}`;\n    }\n    set href(url) {\n        this[Internal].url = parseURL(url);\n        this.analyze();\n    }\n    get origin() {\n        return this[Internal].url.origin;\n    }\n    get pathname() {\n        return this[Internal].url.pathname;\n    }\n    set pathname(value) {\n        this[Internal].url.pathname = value;\n    }\n    get hash() {\n        return this[Internal].url.hash;\n    }\n    set hash(value) {\n        this[Internal].url.hash = value;\n    }\n    get search() {\n        return this[Internal].url.search;\n    }\n    set search(value) {\n        this[Internal].url.search = value;\n    }\n    get password() {\n        return this[Internal].url.password;\n    }\n    set password(value) {\n        this[Internal].url.password = value;\n    }\n    get username() {\n        return this[Internal].url.username;\n    }\n    set username(value) {\n        this[Internal].url.username = value;\n    }\n    get basePath() {\n        return this[Internal].basePath;\n    }\n    set basePath(value) {\n        this[Internal].basePath = value.startsWith(\"/\") ? value : `/${value}`;\n    }\n    toString() {\n        return this.href;\n    }\n    toJSON() {\n        return this.href;\n    }\n    [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return {\n            href: this.href,\n            origin: this.origin,\n            protocol: this.protocol,\n            username: this.username,\n            password: this.password,\n            host: this.host,\n            hostname: this.hostname,\n            port: this.port,\n            pathname: this.pathname,\n            search: this.search,\n            searchParams: this.searchParams,\n            hash: this.hash\n        };\n    }\n    clone() {\n        return new NextURL(String(this), this[Internal].options);\n    }\n} //# sourceMappingURL=next-url.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/web/next-url.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/headers.js":
/*!******************************************************************************!*\
  !*** ./node_modules/next/dist/server/web/spec-extension/adapters/headers.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    ReadonlyHeadersError: function() {\n        return ReadonlyHeadersError;\n    },\n    HeadersAdapter: function() {\n        return HeadersAdapter;\n    }\n});\nconst _reflect = __webpack_require__(/*! ./reflect */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/reflect.js\");\nclass ReadonlyHeadersError extends Error {\n    constructor(){\n        super(\"Headers cannot be modified. Read more: https://nextjs.org/docs/app/api-reference/functions/headers\");\n    }\n    static callable() {\n        throw new ReadonlyHeadersError();\n    }\n}\nclass HeadersAdapter extends Headers {\n    constructor(headers){\n        // We've already overridden the methods that would be called, so we're just\n        // calling the super constructor to ensure that the instanceof check works.\n        super();\n        this.headers = new Proxy(headers, {\n            get (target, prop, receiver) {\n                // Because this is just an object, we expect that all \"get\" operations\n                // are for properties. If it's a \"get\" for a symbol, we'll just return\n                // the symbol.\n                if (typeof prop === \"symbol\") {\n                    return _reflect.ReflectAdapter.get(target, prop, receiver);\n                }\n                const lowercased = prop.toLowerCase();\n                // Let's find the original casing of the key. This assumes that there is\n                // no mixed case keys (e.g. \"Content-Type\" and \"content-type\") in the\n                // headers object.\n                const original = Object.keys(headers).find((o)=>o.toLowerCase() === lowercased);\n                // If the original casing doesn't exist, return undefined.\n                if (typeof original === \"undefined\") return;\n                // If the original casing exists, return the value.\n                return _reflect.ReflectAdapter.get(target, original, receiver);\n            },\n            set (target, prop, value, receiver) {\n                if (typeof prop === \"symbol\") {\n                    return _reflect.ReflectAdapter.set(target, prop, value, receiver);\n                }\n                const lowercased = prop.toLowerCase();\n                // Let's find the original casing of the key. This assumes that there is\n                // no mixed case keys (e.g. \"Content-Type\" and \"content-type\") in the\n                // headers object.\n                const original = Object.keys(headers).find((o)=>o.toLowerCase() === lowercased);\n                // If the original casing doesn't exist, use the prop as the key.\n                return _reflect.ReflectAdapter.set(target, original ?? prop, value, receiver);\n            },\n            has (target, prop) {\n                if (typeof prop === \"symbol\") return _reflect.ReflectAdapter.has(target, prop);\n                const lowercased = prop.toLowerCase();\n                // Let's find the original casing of the key. This assumes that there is\n                // no mixed case keys (e.g. \"Content-Type\" and \"content-type\") in the\n                // headers object.\n                const original = Object.keys(headers).find((o)=>o.toLowerCase() === lowercased);\n                // If the original casing doesn't exist, return false.\n                if (typeof original === \"undefined\") return false;\n                // If the original casing exists, return true.\n                return _reflect.ReflectAdapter.has(target, original);\n            },\n            deleteProperty (target, prop) {\n                if (typeof prop === \"symbol\") return _reflect.ReflectAdapter.deleteProperty(target, prop);\n                const lowercased = prop.toLowerCase();\n                // Let's find the original casing of the key. This assumes that there is\n                // no mixed case keys (e.g. \"Content-Type\" and \"content-type\") in the\n                // headers object.\n                const original = Object.keys(headers).find((o)=>o.toLowerCase() === lowercased);\n                // If the original casing doesn't exist, return true.\n                if (typeof original === \"undefined\") return true;\n                // If the original casing exists, delete the property.\n                return _reflect.ReflectAdapter.deleteProperty(target, original);\n            }\n        });\n    }\n    /**\n   * Seals a Headers instance to prevent modification by throwing an error when\n   * any mutating method is called.\n   */ static seal(headers) {\n        return new Proxy(headers, {\n            get (target, prop, receiver) {\n                switch(prop){\n                    case \"append\":\n                    case \"delete\":\n                    case \"set\":\n                        return ReadonlyHeadersError.callable;\n                    default:\n                        return _reflect.ReflectAdapter.get(target, prop, receiver);\n                }\n            }\n        });\n    }\n    /**\n   * Merges a header value into a string. This stores multiple values as an\n   * array, so we need to merge them into a string.\n   *\n   * @param value a header value\n   * @returns a merged header value (a string)\n   */ merge(value) {\n        if (Array.isArray(value)) return value.join(\", \");\n        return value;\n    }\n    /**\n   * Creates a Headers instance from a plain object or a Headers instance.\n   *\n   * @param headers a plain object or a Headers instance\n   * @returns a headers instance\n   */ static from(headers) {\n        if (headers instanceof Headers) return headers;\n        return new HeadersAdapter(headers);\n    }\n    append(name, value) {\n        const existing = this.headers[name];\n        if (typeof existing === \"string\") {\n            this.headers[name] = [\n                existing,\n                value\n            ];\n        } else if (Array.isArray(existing)) {\n            existing.push(value);\n        } else {\n            this.headers[name] = value;\n        }\n    }\n    delete(name) {\n        delete this.headers[name];\n    }\n    get(name) {\n        const value = this.headers[name];\n        if (typeof value !== \"undefined\") return this.merge(value);\n        return null;\n    }\n    has(name) {\n        return typeof this.headers[name] !== \"undefined\";\n    }\n    set(name, value) {\n        this.headers[name] = value;\n    }\n    forEach(callbackfn, thisArg) {\n        for (const [name, value] of this.entries()){\n            callbackfn.call(thisArg, value, name, this);\n        }\n    }\n    *entries() {\n        for (const key of Object.keys(this.headers)){\n            const name = key.toLowerCase();\n            // We assert here that this is a string because we got it from the\n            // Object.keys() call above.\n            const value = this.get(name);\n            yield [\n                name,\n                value\n            ];\n        }\n    }\n    *keys() {\n        for (const key of Object.keys(this.headers)){\n            const name = key.toLowerCase();\n            yield name;\n        }\n    }\n    *values() {\n        for (const key of Object.keys(this.headers)){\n            // We assert here that this is a string because we got it from the\n            // Object.keys() call above.\n            const value = this.get(key);\n            yield value;\n        }\n    }\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n} //# sourceMappingURL=headers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/headers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/reflect.js":
/*!******************************************************************************!*\
  !*** ./node_modules/next/dist/server/web/spec-extension/adapters/reflect.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"ReflectAdapter\", ({\n    enumerable: true,\n    get: function() {\n        return ReflectAdapter;\n    }\n}));\nclass ReflectAdapter {\n    static get(target, prop, receiver) {\n        const value = Reflect.get(target, prop, receiver);\n        if (typeof value === \"function\") {\n            return value.bind(target);\n        }\n        return value;\n    }\n    static set(target, prop, value, receiver) {\n        return Reflect.set(target, prop, value, receiver);\n    }\n    static has(target, prop) {\n        return Reflect.has(target, prop);\n    }\n    static deleteProperty(target, prop) {\n        return Reflect.deleteProperty(target, prop);\n    }\n} //# sourceMappingURL=reflect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci93ZWIvc3BlYy1leHRlbnNpb24vYWRhcHRlcnMvcmVmbGVjdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsa0RBQWlEO0lBQzdDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUE7SUFDRixPQUFPRCxJQUFJRSxNQUFNLEVBQUVDLElBQUksRUFBRUMsUUFBUSxFQUFFO1FBQy9CLE1BQU1OLFFBQVFPLFFBQVFMLEdBQUcsQ0FBQ0UsUUFBUUMsTUFBTUM7UUFDeEMsSUFBSSxPQUFPTixVQUFVLFlBQVk7WUFDN0IsT0FBT0EsTUFBTVEsSUFBSSxDQUFDSjtRQUN0QjtRQUNBLE9BQU9KO0lBQ1g7SUFDQSxPQUFPUyxJQUFJTCxNQUFNLEVBQUVDLElBQUksRUFBRUwsS0FBSyxFQUFFTSxRQUFRLEVBQUU7UUFDdEMsT0FBT0MsUUFBUUUsR0FBRyxDQUFDTCxRQUFRQyxNQUFNTCxPQUFPTTtJQUM1QztJQUNBLE9BQU9JLElBQUlOLE1BQU0sRUFBRUMsSUFBSSxFQUFFO1FBQ3JCLE9BQU9FLFFBQVFHLEdBQUcsQ0FBQ04sUUFBUUM7SUFDL0I7SUFDQSxPQUFPTSxlQUFlUCxNQUFNLEVBQUVDLElBQUksRUFBRTtRQUNoQyxPQUFPRSxRQUFRSSxjQUFjLENBQUNQLFFBQVFDO0lBQzFDO0FBQ0osRUFFQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb29kLWJsb2cvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci93ZWIvc3BlYy1leHRlbnNpb24vYWRhcHRlcnMvcmVmbGVjdC5qcz80Y2MxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUmVmbGVjdEFkYXB0ZXJcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFJlZmxlY3RBZGFwdGVyO1xuICAgIH1cbn0pO1xuY2xhc3MgUmVmbGVjdEFkYXB0ZXIge1xuICAgIHN0YXRpYyBnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5iaW5kKHRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBzdGF0aWMgc2V0KHRhcmdldCwgcHJvcCwgdmFsdWUsIHJlY2VpdmVyKSB7XG4gICAgICAgIHJldHVybiBSZWZsZWN0LnNldCh0YXJnZXQsIHByb3AsIHZhbHVlLCByZWNlaXZlcik7XG4gICAgfVxuICAgIHN0YXRpYyBoYXModGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgIHJldHVybiBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3ApO1xuICAgIH1cbiAgICBzdGF0aWMgZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgIHJldHVybiBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcCk7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWZsZWN0LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJSZWZsZWN0QWRhcHRlciIsInRhcmdldCIsInByb3AiLCJyZWNlaXZlciIsIlJlZmxlY3QiLCJiaW5kIiwic2V0IiwiaGFzIiwiZGVsZXRlUHJvcGVydHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/reflect.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    ReadonlyRequestCookiesError: function() {\n        return ReadonlyRequestCookiesError;\n    },\n    RequestCookiesAdapter: function() {\n        return RequestCookiesAdapter;\n    },\n    getModifiedCookieValues: function() {\n        return getModifiedCookieValues;\n    },\n    appendMutableCookies: function() {\n        return appendMutableCookies;\n    },\n    MutableRequestCookiesAdapter: function() {\n        return MutableRequestCookiesAdapter;\n    }\n});\nconst _cookies = __webpack_require__(/*! ../cookies */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/cookies.js\");\nconst _reflect = __webpack_require__(/*! ./reflect */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/reflect.js\");\nclass ReadonlyRequestCookiesError extends Error {\n    constructor(){\n        super(\"Cookies can only be modified in a Server Action or Route Handler. Read more: https://nextjs.org/docs/app/api-reference/functions/cookies#cookiessetname-value-options\");\n    }\n    static callable() {\n        throw new ReadonlyRequestCookiesError();\n    }\n}\nclass RequestCookiesAdapter {\n    static seal(cookies) {\n        return new Proxy(cookies, {\n            get (target, prop, receiver) {\n                switch(prop){\n                    case \"clear\":\n                    case \"delete\":\n                    case \"set\":\n                        return ReadonlyRequestCookiesError.callable;\n                    default:\n                        return _reflect.ReflectAdapter.get(target, prop, receiver);\n                }\n            }\n        });\n    }\n}\nconst SYMBOL_MODIFY_COOKIE_VALUES = Symbol.for(\"next.mutated.cookies\");\nfunction getModifiedCookieValues(cookies) {\n    const modified = cookies[SYMBOL_MODIFY_COOKIE_VALUES];\n    if (!modified || !Array.isArray(modified) || modified.length === 0) {\n        return [];\n    }\n    return modified;\n}\nfunction appendMutableCookies(headers, mutableCookies) {\n    const modifiedCookieValues = getModifiedCookieValues(mutableCookies);\n    if (modifiedCookieValues.length === 0) {\n        return false;\n    }\n    // Return a new response that extends the response with\n    // the modified cookies as fallbacks. `res`' cookies\n    // will still take precedence.\n    const resCookies = new _cookies.ResponseCookies(headers);\n    const returnedCookies = resCookies.getAll();\n    // Set the modified cookies as fallbacks.\n    for (const cookie of modifiedCookieValues){\n        resCookies.set(cookie);\n    }\n    // Set the original cookies as the final values.\n    for (const cookie of returnedCookies){\n        resCookies.set(cookie);\n    }\n    return true;\n}\nclass MutableRequestCookiesAdapter {\n    static wrap(cookies, res) {\n        const responseCookes = new _cookies.ResponseCookies(new Headers());\n        for (const cookie of cookies.getAll()){\n            responseCookes.set(cookie);\n        }\n        let modifiedValues = [];\n        const modifiedCookies = new Set();\n        const updateResponseCookies = ()=>{\n            var _fetch___nextGetStaticStore;\n            // TODO-APP: change method of getting staticGenerationAsyncStore\n            const staticGenerationAsyncStore = fetch.__nextGetStaticStore == null ? void 0 : (_fetch___nextGetStaticStore = fetch.__nextGetStaticStore()) == null ? void 0 : _fetch___nextGetStaticStore.getStore();\n            if (staticGenerationAsyncStore) {\n                staticGenerationAsyncStore.pathWasRevalidated = true;\n            }\n            const allCookies = responseCookes.getAll();\n            modifiedValues = allCookies.filter((c)=>modifiedCookies.has(c.name));\n            if (res) {\n                const serializedCookies = [];\n                for (const cookie of modifiedValues){\n                    const tempCookies = new _cookies.ResponseCookies(new Headers());\n                    tempCookies.set(cookie);\n                    serializedCookies.push(tempCookies.toString());\n                }\n                res.setHeader(\"Set-Cookie\", serializedCookies);\n            }\n        };\n        return new Proxy(responseCookes, {\n            get (target, prop, receiver) {\n                switch(prop){\n                    // A special symbol to get the modified cookie values\n                    case SYMBOL_MODIFY_COOKIE_VALUES:\n                        return modifiedValues;\n                    // TODO: Throw error if trying to set a cookie after the response\n                    // headers have been set.\n                    case \"delete\":\n                        return function(...args) {\n                            modifiedCookies.add(typeof args[0] === \"string\" ? args[0] : args[0].name);\n                            try {\n                                target.delete(...args);\n                            } finally{\n                                updateResponseCookies();\n                            }\n                        };\n                    case \"set\":\n                        return function(...args) {\n                            modifiedCookies.add(typeof args[0] === \"string\" ? args[0] : args[0].name);\n                            try {\n                                return target.set(...args);\n                            } finally{\n                                updateResponseCookies();\n                            }\n                        };\n                    default:\n                        return _reflect.ReflectAdapter.get(target, prop, receiver);\n                }\n            }\n        });\n    }\n} //# sourceMappingURL=request-cookies.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/web/spec-extension/cookies.js":
/*!*********************************************************************!*\
  !*** ./node_modules/next/dist/server/web/spec-extension/cookies.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    RequestCookies: function() {\n        return _cookies.RequestCookies;\n    },\n    ResponseCookies: function() {\n        return _cookies.ResponseCookies;\n    }\n});\nconst _cookies = __webpack_require__(/*! next/dist/compiled/@edge-runtime/cookies */ \"(rsc)/./node_modules/next/dist/compiled/@edge-runtime/cookies/index.js\"); //# sourceMappingURL=cookies.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci93ZWIvc3BlYy1leHRlbnNpb24vY29va2llcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRixLQUFNQyxDQUFBQSxDQUdOO0FBQ0EsU0FBU0csUUFBUUMsTUFBTSxFQUFFQyxHQUFHO0lBQ3hCLElBQUksSUFBSUMsUUFBUUQsSUFBSVQsT0FBT0MsY0FBYyxDQUFDTyxRQUFRRSxNQUFNO1FBQ3BEQyxZQUFZO1FBQ1pDLEtBQUtILEdBQUcsQ0FBQ0MsS0FBSztJQUNsQjtBQUNKO0FBQ0FILFFBQVFMLFNBQVM7SUFDYkcsZ0JBQWdCO1FBQ1osT0FBT1EsU0FBU1IsY0FBYztJQUNsQztJQUNBQyxpQkFBaUI7UUFDYixPQUFPTyxTQUFTUCxlQUFlO0lBQ25DO0FBQ0o7QUFDQSxNQUFNTyxXQUFXQyxtQkFBT0EsQ0FBQyx3SEFBMEMsR0FFbkUsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vZC1ibG9nLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvd2ViL3NwZWMtZXh0ZW5zaW9uL2Nvb2tpZXMuanM/MTQyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICAgIFJlcXVlc3RDb29raWVzOiBudWxsLFxuICAgIFJlc3BvbnNlQ29va2llczogbnVsbFxufSk7XG5mdW5jdGlvbiBfZXhwb3J0KHRhcmdldCwgYWxsKSB7XG4gICAgZm9yKHZhciBuYW1lIGluIGFsbClPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBuYW1lLCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogYWxsW25hbWVdXG4gICAgfSk7XG59XG5fZXhwb3J0KGV4cG9ydHMsIHtcbiAgICBSZXF1ZXN0Q29va2llczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfY29va2llcy5SZXF1ZXN0Q29va2llcztcbiAgICB9LFxuICAgIFJlc3BvbnNlQ29va2llczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfY29va2llcy5SZXNwb25zZUNvb2tpZXM7XG4gICAgfVxufSk7XG5jb25zdCBfY29va2llcyA9IHJlcXVpcmUoXCJuZXh0L2Rpc3QvY29tcGlsZWQvQGVkZ2UtcnVudGltZS9jb29raWVzXCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb29raWVzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1vZHVsZSIsIlJlcXVlc3RDb29raWVzIiwiUmVzcG9uc2VDb29raWVzIiwiX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX2Nvb2tpZXMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/web/spec-extension/cookies.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/web/spec-extension/response.js":
/*!**********************************************************************!*\
  !*** ./node_modules/next/dist/server/web/spec-extension/response.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"NextResponse\", ({\n    enumerable: true,\n    get: function() {\n        return NextResponse;\n    }\n}));\nconst _nexturl = __webpack_require__(/*! ../next-url */ \"(rsc)/./node_modules/next/dist/server/web/next-url.js\");\nconst _utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\nconst _cookies = __webpack_require__(/*! ./cookies */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/cookies.js\");\nconst INTERNALS = Symbol(\"internal response\");\nconst REDIRECTS = new Set([\n    301,\n    302,\n    303,\n    307,\n    308\n]);\nfunction handleMiddlewareField(init, headers) {\n    var _init_request;\n    if (init == null ? void 0 : (_init_request = init.request) == null ? void 0 : _init_request.headers) {\n        if (!(init.request.headers instanceof Headers)) {\n            throw new Error(\"request.headers must be an instance of Headers\");\n        }\n        const keys = [];\n        for (const [key, value] of init.request.headers){\n            headers.set(\"x-middleware-request-\" + key, value);\n            keys.push(key);\n        }\n        headers.set(\"x-middleware-override-headers\", keys.join(\",\"));\n    }\n}\nclass NextResponse extends Response {\n    constructor(body, init = {}){\n        super(body, init);\n        this[INTERNALS] = {\n            cookies: new _cookies.ResponseCookies(this.headers),\n            url: init.url ? new _nexturl.NextURL(init.url, {\n                headers: (0, _utils.toNodeOutgoingHttpHeaders)(this.headers),\n                nextConfig: init.nextConfig\n            }) : undefined\n        };\n    }\n    [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return {\n            cookies: this.cookies,\n            url: this.url,\n            // rest of props come from Response\n            body: this.body,\n            bodyUsed: this.bodyUsed,\n            headers: Object.fromEntries(this.headers),\n            ok: this.ok,\n            redirected: this.redirected,\n            status: this.status,\n            statusText: this.statusText,\n            type: this.type\n        };\n    }\n    get cookies() {\n        return this[INTERNALS].cookies;\n    }\n    static json(body, init) {\n        // @ts-expect-error This is not in lib/dom right now, and we can't augment it.\n        const response = Response.json(body, init);\n        return new NextResponse(response.body, response);\n    }\n    static redirect(url, init) {\n        const status = typeof init === \"number\" ? init : (init == null ? void 0 : init.status) ?? 307;\n        if (!REDIRECTS.has(status)) {\n            throw new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n        }\n        const initObj = typeof init === \"object\" ? init : {};\n        const headers = new Headers(initObj == null ? void 0 : initObj.headers);\n        headers.set(\"Location\", (0, _utils.validateURL)(url));\n        return new NextResponse(null, {\n            ...initObj,\n            headers,\n            status\n        });\n    }\n    static rewrite(destination, init) {\n        const headers = new Headers(init == null ? void 0 : init.headers);\n        headers.set(\"x-middleware-rewrite\", (0, _utils.validateURL)(destination));\n        handleMiddlewareField(init, headers);\n        return new NextResponse(null, {\n            ...init,\n            headers\n        });\n    }\n    static next(init) {\n        const headers = new Headers(init == null ? void 0 : init.headers);\n        headers.set(\"x-middleware-next\", \"1\");\n        handleMiddlewareField(init, headers);\n        return new NextResponse(null, {\n            ...init,\n            headers\n        });\n    }\n} //# sourceMappingURL=response.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/web/spec-extension/response.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/web/utils.js":
/*!****************************************************!*\
  !*** ./node_modules/next/dist/server/web/utils.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    fromNodeOutgoingHttpHeaders: function() {\n        return fromNodeOutgoingHttpHeaders;\n    },\n    splitCookiesString: function() {\n        return splitCookiesString;\n    },\n    toNodeOutgoingHttpHeaders: function() {\n        return toNodeOutgoingHttpHeaders;\n    },\n    validateURL: function() {\n        return validateURL;\n    }\n});\nfunction fromNodeOutgoingHttpHeaders(nodeHeaders) {\n    const headers = new Headers();\n    for (let [key, value] of Object.entries(nodeHeaders)){\n        const values = Array.isArray(value) ? value : [\n            value\n        ];\n        for (let v of values){\n            if (typeof v === \"undefined\") continue;\n            if (typeof v === \"number\") {\n                v = v.toString();\n            }\n            headers.append(key, v);\n        }\n    }\n    return headers;\n}\nfunction splitCookiesString(cookiesString) {\n    var cookiesStrings = [];\n    var pos = 0;\n    var start;\n    var ch;\n    var lastComma;\n    var nextStart;\n    var cookiesSeparatorFound;\n    function skipWhitespace() {\n        while(pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))){\n            pos += 1;\n        }\n        return pos < cookiesString.length;\n    }\n    function notSpecialChar() {\n        ch = cookiesString.charAt(pos);\n        return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n    }\n    while(pos < cookiesString.length){\n        start = pos;\n        cookiesSeparatorFound = false;\n        while(skipWhitespace()){\n            ch = cookiesString.charAt(pos);\n            if (ch === \",\") {\n                // ',' is a cookie separator if we have later first '=', not ';' or ','\n                lastComma = pos;\n                pos += 1;\n                skipWhitespace();\n                nextStart = pos;\n                while(pos < cookiesString.length && notSpecialChar()){\n                    pos += 1;\n                }\n                // currently special character\n                if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n                    // we found cookies separator\n                    cookiesSeparatorFound = true;\n                    // pos is inside the next cookie, so back up and return it.\n                    pos = nextStart;\n                    cookiesStrings.push(cookiesString.substring(start, lastComma));\n                    start = pos;\n                } else {\n                    // in param ',' or param separator ';',\n                    // we continue from that comma\n                    pos = lastComma + 1;\n                }\n            } else {\n                pos += 1;\n            }\n        }\n        if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n            cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n        }\n    }\n    return cookiesStrings;\n}\nfunction toNodeOutgoingHttpHeaders(headers) {\n    const nodeHeaders = {};\n    const cookies = [];\n    if (headers) {\n        for (const [key, value] of headers.entries()){\n            if (key.toLowerCase() === \"set-cookie\") {\n                // We may have gotten a comma joined string of cookies, or multiple\n                // set-cookie headers. We need to merge them into one header array\n                // to represent all the cookies.\n                cookies.push(...splitCookiesString(value));\n                nodeHeaders[key] = cookies.length === 1 ? cookies[0] : cookies;\n            } else {\n                nodeHeaders[key] = value;\n            }\n        }\n    }\n    return nodeHeaders;\n}\nfunction validateURL(url) {\n    try {\n        return String(new URL(String(url)));\n    } catch (error) {\n        throw new Error(`URL is malformed \"${String(url)}\". Please use only absolute URLs - https://nextjs.org/docs/messages/middleware-relative-urls`, {\n            cause: error\n        });\n    }\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/web/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/shared/lib/get-hostname.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/get-hostname.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"getHostname\", ({\n    enumerable: true,\n    get: function() {\n        return getHostname;\n    }\n}));\nfunction getHostname(parsed, headers) {\n    // Get the hostname from the headers if it exists, otherwise use the parsed\n    // hostname.\n    let hostname;\n    if ((headers == null ? void 0 : headers.host) && !Array.isArray(headers.host)) {\n        hostname = headers.host.toString().split(\":\")[0];\n    } else if (parsed.hostname) {\n        hostname = parsed.hostname;\n    } else return;\n    return hostname.toLowerCase();\n} //# sourceMappingURL=get-hostname.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvZ2V0LWhvc3RuYW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCwrQ0FBOEM7SUFDMUNJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixTQUFTQSxZQUFZQyxNQUFNLEVBQUVDLE9BQU87SUFDaEMsMkVBQTJFO0lBQzNFLFlBQVk7SUFDWixJQUFJQztJQUNKLElBQUksQ0FBQ0QsV0FBVyxPQUFPLEtBQUssSUFBSUEsUUFBUUUsSUFBSSxLQUFLLENBQUNDLE1BQU1DLE9BQU8sQ0FBQ0osUUFBUUUsSUFBSSxHQUFHO1FBQzNFRCxXQUFXRCxRQUFRRSxJQUFJLENBQUNHLFFBQVEsR0FBR0MsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO0lBQ3BELE9BQU8sSUFBSVAsT0FBT0UsUUFBUSxFQUFFO1FBQ3hCQSxXQUFXRixPQUFPRSxRQUFRO0lBQzlCLE9BQU87SUFDUCxPQUFPQSxTQUFTTSxXQUFXO0FBQy9CLEVBRUEsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vZC1ibG9nLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL2dldC1ob3N0bmFtZS5qcz80Y2Y5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0SG9zdG5hbWVcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldEhvc3RuYW1lO1xuICAgIH1cbn0pO1xuZnVuY3Rpb24gZ2V0SG9zdG5hbWUocGFyc2VkLCBoZWFkZXJzKSB7XG4gICAgLy8gR2V0IHRoZSBob3N0bmFtZSBmcm9tIHRoZSBoZWFkZXJzIGlmIGl0IGV4aXN0cywgb3RoZXJ3aXNlIHVzZSB0aGUgcGFyc2VkXG4gICAgLy8gaG9zdG5hbWUuXG4gICAgbGV0IGhvc3RuYW1lO1xuICAgIGlmICgoaGVhZGVycyA9PSBudWxsID8gdm9pZCAwIDogaGVhZGVycy5ob3N0KSAmJiAhQXJyYXkuaXNBcnJheShoZWFkZXJzLmhvc3QpKSB7XG4gICAgICAgIGhvc3RuYW1lID0gaGVhZGVycy5ob3N0LnRvU3RyaW5nKCkuc3BsaXQoXCI6XCIpWzBdO1xuICAgIH0gZWxzZSBpZiAocGFyc2VkLmhvc3RuYW1lKSB7XG4gICAgICAgIGhvc3RuYW1lID0gcGFyc2VkLmhvc3RuYW1lO1xuICAgIH0gZWxzZSByZXR1cm47XG4gICAgcmV0dXJuIGhvc3RuYW1lLnRvTG93ZXJDYXNlKCk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldC1ob3N0bmFtZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZ2V0SG9zdG5hbWUiLCJwYXJzZWQiLCJoZWFkZXJzIiwiaG9zdG5hbWUiLCJob3N0IiwiQXJyYXkiLCJpc0FycmF5IiwidG9TdHJpbmciLCJzcGxpdCIsInRvTG93ZXJDYXNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/shared/lib/get-hostname.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/shared/lib/i18n/detect-domain-locale.js":
/*!************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/i18n/detect-domain-locale.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"detectDomainLocale\", ({\n    enumerable: true,\n    get: function() {\n        return detectDomainLocale;\n    }\n}));\nfunction detectDomainLocale(domainItems, hostname, detectedLocale) {\n    if (!domainItems) return;\n    if (detectedLocale) {\n        detectedLocale = detectedLocale.toLowerCase();\n    }\n    for (const item of domainItems){\n        var _item_domain, _item_locales;\n        // remove port if present\n        const domainHostname = (_item_domain = item.domain) == null ? void 0 : _item_domain.split(\":\")[0].toLowerCase();\n        if (hostname === domainHostname || detectedLocale === item.defaultLocale.toLowerCase() || ((_item_locales = item.locales) == null ? void 0 : _item_locales.some((locale)=>locale.toLowerCase() === detectedLocale))) {\n            return item;\n        }\n    }\n} //# sourceMappingURL=detect-domain-locale.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvaTE4bi9kZXRlY3QtZG9tYWluLWxvY2FsZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsc0RBQXFEO0lBQ2pESSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsU0FBU0EsbUJBQW1CQyxXQUFXLEVBQUVDLFFBQVEsRUFBRUMsY0FBYztJQUM3RCxJQUFJLENBQUNGLGFBQWE7SUFDbEIsSUFBSUUsZ0JBQWdCO1FBQ2hCQSxpQkFBaUJBLGVBQWVDLFdBQVc7SUFDL0M7SUFDQSxLQUFLLE1BQU1DLFFBQVFKLFlBQVk7UUFDM0IsSUFBSUssY0FBY0M7UUFDbEIseUJBQXlCO1FBQ3pCLE1BQU1DLGlCQUFpQixDQUFDRixlQUFlRCxLQUFLSSxNQUFNLEtBQUssT0FBTyxLQUFLLElBQUlILGFBQWFJLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDTixXQUFXO1FBQzdHLElBQUlGLGFBQWFNLGtCQUFrQkwsbUJBQW1CRSxLQUFLTSxhQUFhLENBQUNQLFdBQVcsTUFBTyxFQUFDRyxnQkFBZ0JGLEtBQUtPLE9BQU8sS0FBSyxPQUFPLEtBQUssSUFBSUwsY0FBY00sSUFBSSxDQUFDLENBQUNDLFNBQVNBLE9BQU9WLFdBQVcsT0FBT0QsZUFBYyxHQUFJO1lBQ2pOLE9BQU9FO1FBQ1g7SUFDSjtBQUNKLEVBRUEsZ0RBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vZC1ibG9nLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL2kxOG4vZGV0ZWN0LWRvbWFpbi1sb2NhbGUuanM/NzhkMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRldGVjdERvbWFpbkxvY2FsZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZGV0ZWN0RG9tYWluTG9jYWxlO1xuICAgIH1cbn0pO1xuZnVuY3Rpb24gZGV0ZWN0RG9tYWluTG9jYWxlKGRvbWFpbkl0ZW1zLCBob3N0bmFtZSwgZGV0ZWN0ZWRMb2NhbGUpIHtcbiAgICBpZiAoIWRvbWFpbkl0ZW1zKSByZXR1cm47XG4gICAgaWYgKGRldGVjdGVkTG9jYWxlKSB7XG4gICAgICAgIGRldGVjdGVkTG9jYWxlID0gZGV0ZWN0ZWRMb2NhbGUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGRvbWFpbkl0ZW1zKXtcbiAgICAgICAgdmFyIF9pdGVtX2RvbWFpbiwgX2l0ZW1fbG9jYWxlcztcbiAgICAgICAgLy8gcmVtb3ZlIHBvcnQgaWYgcHJlc2VudFxuICAgICAgICBjb25zdCBkb21haW5Ib3N0bmFtZSA9IChfaXRlbV9kb21haW4gPSBpdGVtLmRvbWFpbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9pdGVtX2RvbWFpbi5zcGxpdChcIjpcIilbMF0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKGhvc3RuYW1lID09PSBkb21haW5Ib3N0bmFtZSB8fCBkZXRlY3RlZExvY2FsZSA9PT0gaXRlbS5kZWZhdWx0TG9jYWxlLnRvTG93ZXJDYXNlKCkgfHwgKChfaXRlbV9sb2NhbGVzID0gaXRlbS5sb2NhbGVzKSA9PSBudWxsID8gdm9pZCAwIDogX2l0ZW1fbG9jYWxlcy5zb21lKChsb2NhbGUpPT5sb2NhbGUudG9Mb3dlckNhc2UoKSA9PT0gZGV0ZWN0ZWRMb2NhbGUpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRldGVjdC1kb21haW4tbG9jYWxlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJkZXRlY3REb21haW5Mb2NhbGUiLCJkb21haW5JdGVtcyIsImhvc3RuYW1lIiwiZGV0ZWN0ZWRMb2NhbGUiLCJ0b0xvd2VyQ2FzZSIsIml0ZW0iLCJfaXRlbV9kb21haW4iLCJfaXRlbV9sb2NhbGVzIiwiZG9tYWluSG9zdG5hbWUiLCJkb21haW4iLCJzcGxpdCIsImRlZmF1bHRMb2NhbGUiLCJsb2NhbGVzIiwic29tZSIsImxvY2FsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/shared/lib/i18n/detect-domain-locale.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js":
/*!*************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"normalizeLocalePath\", ({\n    enumerable: true,\n    get: function() {\n        return normalizeLocalePath;\n    }\n}));\nfunction normalizeLocalePath(pathname, locales) {\n    let detectedLocale;\n    // first item will be empty string from splitting at first char\n    const pathnameParts = pathname.split(\"/\");\n    (locales || []).some((locale)=>{\n        if (pathnameParts[1] && pathnameParts[1].toLowerCase() === locale.toLowerCase()) {\n            detectedLocale = locale;\n            pathnameParts.splice(1, 1);\n            pathname = pathnameParts.join(\"/\") || \"/\";\n            return true;\n        }\n        return false;\n    });\n    return {\n        pathname,\n        detectedLocale\n    };\n} //# sourceMappingURL=normalize-locale-path.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvaTE4bi9ub3JtYWxpemUtbG9jYWxlLXBhdGguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILHVEQUFzRDtJQUNsREksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLFNBQVNBLG9CQUFvQkMsUUFBUSxFQUFFQyxPQUFPO0lBQzFDLElBQUlDO0lBQ0osK0RBQStEO0lBQy9ELE1BQU1DLGdCQUFnQkgsU0FBU0ksS0FBSyxDQUFDO0lBQ3BDSCxDQUFBQSxXQUFXLEVBQUUsRUFBRUksSUFBSSxDQUFDLENBQUNDO1FBQ2xCLElBQUlILGFBQWEsQ0FBQyxFQUFFLElBQUlBLGFBQWEsQ0FBQyxFQUFFLENBQUNJLFdBQVcsT0FBT0QsT0FBT0MsV0FBVyxJQUFJO1lBQzdFTCxpQkFBaUJJO1lBQ2pCSCxjQUFjSyxNQUFNLENBQUMsR0FBRztZQUN4QlIsV0FBV0csY0FBY00sSUFBSSxDQUFDLFFBQVE7WUFDdEMsT0FBTztRQUNYO1FBQ0EsT0FBTztJQUNYO0lBQ0EsT0FBTztRQUNIVDtRQUNBRTtJQUNKO0FBQ0osRUFFQSxpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb29kLWJsb2cvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvaTE4bi9ub3JtYWxpemUtbG9jYWxlLXBhdGguanM/MDQzYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm5vcm1hbGl6ZUxvY2FsZVBhdGhcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZUxvY2FsZVBhdGg7XG4gICAgfVxufSk7XG5mdW5jdGlvbiBub3JtYWxpemVMb2NhbGVQYXRoKHBhdGhuYW1lLCBsb2NhbGVzKSB7XG4gICAgbGV0IGRldGVjdGVkTG9jYWxlO1xuICAgIC8vIGZpcnN0IGl0ZW0gd2lsbCBiZSBlbXB0eSBzdHJpbmcgZnJvbSBzcGxpdHRpbmcgYXQgZmlyc3QgY2hhclxuICAgIGNvbnN0IHBhdGhuYW1lUGFydHMgPSBwYXRobmFtZS5zcGxpdChcIi9cIik7XG4gICAgKGxvY2FsZXMgfHwgW10pLnNvbWUoKGxvY2FsZSk9PntcbiAgICAgICAgaWYgKHBhdGhuYW1lUGFydHNbMV0gJiYgcGF0aG5hbWVQYXJ0c1sxXS50b0xvd2VyQ2FzZSgpID09PSBsb2NhbGUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgZGV0ZWN0ZWRMb2NhbGUgPSBsb2NhbGU7XG4gICAgICAgICAgICBwYXRobmFtZVBhcnRzLnNwbGljZSgxLCAxKTtcbiAgICAgICAgICAgIHBhdGhuYW1lID0gcGF0aG5hbWVQYXJ0cy5qb2luKFwiL1wiKSB8fCBcIi9cIjtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgZGV0ZWN0ZWRMb2NhbGVcbiAgICB9O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub3JtYWxpemUtbG9jYWxlLXBhdGguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsIm5vcm1hbGl6ZUxvY2FsZVBhdGgiLCJwYXRobmFtZSIsImxvY2FsZXMiLCJkZXRlY3RlZExvY2FsZSIsInBhdGhuYW1lUGFydHMiLCJzcGxpdCIsInNvbWUiLCJsb2NhbGUiLCJ0b0xvd2VyQ2FzZSIsInNwbGljZSIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/shared/lib/router/utils/add-locale.js":
/*!**********************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/add-locale.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"addLocale\", ({\n    enumerable: true,\n    get: function() {\n        return addLocale;\n    }\n}));\nconst _addpathprefix = __webpack_require__(/*! ./add-path-prefix */ \"(rsc)/./node_modules/next/dist/shared/lib/router/utils/add-path-prefix.js\");\nconst _pathhasprefix = __webpack_require__(/*! ./path-has-prefix */ \"(rsc)/./node_modules/next/dist/shared/lib/router/utils/path-has-prefix.js\");\nfunction addLocale(path, locale, defaultLocale, ignorePrefix) {\n    // If no locale was given or the locale is the default locale, we don't need\n    // to prefix the path.\n    if (!locale || locale === defaultLocale) return path;\n    const lower = path.toLowerCase();\n    // If the path is an API path or the path already has the locale prefix, we\n    // don't need to prefix the path.\n    if (!ignorePrefix) {\n        if ((0, _pathhasprefix.pathHasPrefix)(lower, \"/api\")) return path;\n        if ((0, _pathhasprefix.pathHasPrefix)(lower, \"/\" + locale.toLowerCase())) return path;\n    }\n    // Add the locale prefix to the path.\n    return (0, _addpathprefix.addPathPrefix)(path, \"/\" + locale);\n} //# sourceMappingURL=add-locale.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2FkZC1sb2NhbGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILDZDQUE0QztJQUN4Q0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLGlCQUFpQkMsbUJBQU9BLENBQUMsb0dBQW1CO0FBQ2xELE1BQU1DLGlCQUFpQkQsbUJBQU9BLENBQUMsb0dBQW1CO0FBQ2xELFNBQVNGLFVBQVVJLElBQUksRUFBRUMsTUFBTSxFQUFFQyxhQUFhLEVBQUVDLFlBQVk7SUFDeEQsNEVBQTRFO0lBQzVFLHNCQUFzQjtJQUN0QixJQUFJLENBQUNGLFVBQVVBLFdBQVdDLGVBQWUsT0FBT0Y7SUFDaEQsTUFBTUksUUFBUUosS0FBS0ssV0FBVztJQUM5QiwyRUFBMkU7SUFDM0UsaUNBQWlDO0lBQ2pDLElBQUksQ0FBQ0YsY0FBYztRQUNmLElBQUksQ0FBQyxHQUFHSixlQUFlTyxhQUFhLEVBQUVGLE9BQU8sU0FBUyxPQUFPSjtRQUM3RCxJQUFJLENBQUMsR0FBR0QsZUFBZU8sYUFBYSxFQUFFRixPQUFPLE1BQU1ILE9BQU9JLFdBQVcsS0FBSyxPQUFPTDtJQUNyRjtJQUNBLHFDQUFxQztJQUNyQyxPQUFPLENBQUMsR0FBR0gsZUFBZVUsYUFBYSxFQUFFUCxNQUFNLE1BQU1DO0FBQ3pELEVBRUEsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vZC1ibG9nLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci91dGlscy9hZGQtbG9jYWxlLmpzPzAyMzEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhZGRMb2NhbGVcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGFkZExvY2FsZTtcbiAgICB9XG59KTtcbmNvbnN0IF9hZGRwYXRocHJlZml4ID0gcmVxdWlyZShcIi4vYWRkLXBhdGgtcHJlZml4XCIpO1xuY29uc3QgX3BhdGhoYXNwcmVmaXggPSByZXF1aXJlKFwiLi9wYXRoLWhhcy1wcmVmaXhcIik7XG5mdW5jdGlvbiBhZGRMb2NhbGUocGF0aCwgbG9jYWxlLCBkZWZhdWx0TG9jYWxlLCBpZ25vcmVQcmVmaXgpIHtcbiAgICAvLyBJZiBubyBsb2NhbGUgd2FzIGdpdmVuIG9yIHRoZSBsb2NhbGUgaXMgdGhlIGRlZmF1bHQgbG9jYWxlLCB3ZSBkb24ndCBuZWVkXG4gICAgLy8gdG8gcHJlZml4IHRoZSBwYXRoLlxuICAgIGlmICghbG9jYWxlIHx8IGxvY2FsZSA9PT0gZGVmYXVsdExvY2FsZSkgcmV0dXJuIHBhdGg7XG4gICAgY29uc3QgbG93ZXIgPSBwYXRoLnRvTG93ZXJDYXNlKCk7XG4gICAgLy8gSWYgdGhlIHBhdGggaXMgYW4gQVBJIHBhdGggb3IgdGhlIHBhdGggYWxyZWFkeSBoYXMgdGhlIGxvY2FsZSBwcmVmaXgsIHdlXG4gICAgLy8gZG9uJ3QgbmVlZCB0byBwcmVmaXggdGhlIHBhdGguXG4gICAgaWYgKCFpZ25vcmVQcmVmaXgpIHtcbiAgICAgICAgaWYgKCgwLCBfcGF0aGhhc3ByZWZpeC5wYXRoSGFzUHJlZml4KShsb3dlciwgXCIvYXBpXCIpKSByZXR1cm4gcGF0aDtcbiAgICAgICAgaWYgKCgwLCBfcGF0aGhhc3ByZWZpeC5wYXRoSGFzUHJlZml4KShsb3dlciwgXCIvXCIgKyBsb2NhbGUudG9Mb3dlckNhc2UoKSkpIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICAvLyBBZGQgdGhlIGxvY2FsZSBwcmVmaXggdG8gdGhlIHBhdGguXG4gICAgcmV0dXJuICgwLCBfYWRkcGF0aHByZWZpeC5hZGRQYXRoUHJlZml4KShwYXRoLCBcIi9cIiArIGxvY2FsZSk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZC1sb2NhbGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsImFkZExvY2FsZSIsIl9hZGRwYXRocHJlZml4IiwicmVxdWlyZSIsIl9wYXRoaGFzcHJlZml4IiwicGF0aCIsImxvY2FsZSIsImRlZmF1bHRMb2NhbGUiLCJpZ25vcmVQcmVmaXgiLCJsb3dlciIsInRvTG93ZXJDYXNlIiwicGF0aEhhc1ByZWZpeCIsImFkZFBhdGhQcmVmaXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/shared/lib/router/utils/add-locale.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/shared/lib/router/utils/add-path-prefix.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/add-path-prefix.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"addPathPrefix\", ({\n    enumerable: true,\n    get: function() {\n        return addPathPrefix;\n    }\n}));\nconst _parsepath = __webpack_require__(/*! ./parse-path */ \"(rsc)/./node_modules/next/dist/shared/lib/router/utils/parse-path.js\");\nfunction addPathPrefix(path, prefix) {\n    if (!path.startsWith(\"/\") || !prefix) {\n        return path;\n    }\n    const { pathname, query, hash } = (0, _parsepath.parsePath)(path);\n    return \"\" + prefix + pathname + query + hash;\n} //# sourceMappingURL=add-path-prefix.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2FkZC1wYXRoLXByZWZpeC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsaURBQWdEO0lBQzVDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMsYUFBYUMsbUJBQU9BLENBQUMsMEZBQWM7QUFDekMsU0FBU0YsY0FBY0csSUFBSSxFQUFFQyxNQUFNO0lBQy9CLElBQUksQ0FBQ0QsS0FBS0UsVUFBVSxDQUFDLFFBQVEsQ0FBQ0QsUUFBUTtRQUNsQyxPQUFPRDtJQUNYO0lBQ0EsTUFBTSxFQUFFRyxRQUFRLEVBQUdDLEtBQUssRUFBR0MsSUFBSSxFQUFHLEdBQUcsQ0FBQyxHQUFHUCxXQUFXUSxTQUFTLEVBQUVOO0lBQy9ELE9BQU8sS0FBS0MsU0FBU0UsV0FBV0MsUUFBUUM7QUFDNUMsRUFFQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb29kLWJsb2cvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2FkZC1wYXRoLXByZWZpeC5qcz9jMTI5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYWRkUGF0aFByZWZpeFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYWRkUGF0aFByZWZpeDtcbiAgICB9XG59KTtcbmNvbnN0IF9wYXJzZXBhdGggPSByZXF1aXJlKFwiLi9wYXJzZS1wYXRoXCIpO1xuZnVuY3Rpb24gYWRkUGF0aFByZWZpeChwYXRoLCBwcmVmaXgpIHtcbiAgICBpZiAoIXBhdGguc3RhcnRzV2l0aChcIi9cIikgfHwgIXByZWZpeCkge1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICB9XG4gICAgY29uc3QgeyBwYXRobmFtZSAsIHF1ZXJ5ICwgaGFzaCAgfSA9ICgwLCBfcGFyc2VwYXRoLnBhcnNlUGF0aCkocGF0aCk7XG4gICAgcmV0dXJuIFwiXCIgKyBwcmVmaXggKyBwYXRobmFtZSArIHF1ZXJ5ICsgaGFzaDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkLXBhdGgtcHJlZml4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJhZGRQYXRoUHJlZml4IiwiX3BhcnNlcGF0aCIsInJlcXVpcmUiLCJwYXRoIiwicHJlZml4Iiwic3RhcnRzV2l0aCIsInBhdGhuYW1lIiwicXVlcnkiLCJoYXNoIiwicGFyc2VQYXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/shared/lib/router/utils/add-path-prefix.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/shared/lib/router/utils/add-path-suffix.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/add-path-suffix.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"addPathSuffix\", ({\n    enumerable: true,\n    get: function() {\n        return addPathSuffix;\n    }\n}));\nconst _parsepath = __webpack_require__(/*! ./parse-path */ \"(rsc)/./node_modules/next/dist/shared/lib/router/utils/parse-path.js\");\nfunction addPathSuffix(path, suffix) {\n    if (!path.startsWith(\"/\") || !suffix) {\n        return path;\n    }\n    const { pathname, query, hash } = (0, _parsepath.parsePath)(path);\n    return \"\" + pathname + suffix + query + hash;\n} //# sourceMappingURL=add-path-suffix.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2FkZC1wYXRoLXN1ZmZpeC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsaURBQWdEO0lBQzVDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMsYUFBYUMsbUJBQU9BLENBQUMsMEZBQWM7QUFDekMsU0FBU0YsY0FBY0csSUFBSSxFQUFFQyxNQUFNO0lBQy9CLElBQUksQ0FBQ0QsS0FBS0UsVUFBVSxDQUFDLFFBQVEsQ0FBQ0QsUUFBUTtRQUNsQyxPQUFPRDtJQUNYO0lBQ0EsTUFBTSxFQUFFRyxRQUFRLEVBQUdDLEtBQUssRUFBR0MsSUFBSSxFQUFHLEdBQUcsQ0FBQyxHQUFHUCxXQUFXUSxTQUFTLEVBQUVOO0lBQy9ELE9BQU8sS0FBS0csV0FBV0YsU0FBU0csUUFBUUM7QUFDNUMsRUFFQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb29kLWJsb2cvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2FkZC1wYXRoLXN1ZmZpeC5qcz83YjM2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYWRkUGF0aFN1ZmZpeFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYWRkUGF0aFN1ZmZpeDtcbiAgICB9XG59KTtcbmNvbnN0IF9wYXJzZXBhdGggPSByZXF1aXJlKFwiLi9wYXJzZS1wYXRoXCIpO1xuZnVuY3Rpb24gYWRkUGF0aFN1ZmZpeChwYXRoLCBzdWZmaXgpIHtcbiAgICBpZiAoIXBhdGguc3RhcnRzV2l0aChcIi9cIikgfHwgIXN1ZmZpeCkge1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICB9XG4gICAgY29uc3QgeyBwYXRobmFtZSAsIHF1ZXJ5ICwgaGFzaCAgfSA9ICgwLCBfcGFyc2VwYXRoLnBhcnNlUGF0aCkocGF0aCk7XG4gICAgcmV0dXJuIFwiXCIgKyBwYXRobmFtZSArIHN1ZmZpeCArIHF1ZXJ5ICsgaGFzaDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkLXBhdGgtc3VmZml4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJhZGRQYXRoU3VmZml4IiwiX3BhcnNlcGF0aCIsInJlcXVpcmUiLCJwYXRoIiwic3VmZml4Iiwic3RhcnRzV2l0aCIsInBhdGhuYW1lIiwicXVlcnkiLCJoYXNoIiwicGFyc2VQYXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/shared/lib/router/utils/add-path-suffix.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/shared/lib/router/utils/format-next-pathname-info.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/format-next-pathname-info.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"formatNextPathnameInfo\", ({\n    enumerable: true,\n    get: function() {\n        return formatNextPathnameInfo;\n    }\n}));\nconst _removetrailingslash = __webpack_require__(/*! ./remove-trailing-slash */ \"(rsc)/./node_modules/next/dist/shared/lib/router/utils/remove-trailing-slash.js\");\nconst _addpathprefix = __webpack_require__(/*! ./add-path-prefix */ \"(rsc)/./node_modules/next/dist/shared/lib/router/utils/add-path-prefix.js\");\nconst _addpathsuffix = __webpack_require__(/*! ./add-path-suffix */ \"(rsc)/./node_modules/next/dist/shared/lib/router/utils/add-path-suffix.js\");\nconst _addlocale = __webpack_require__(/*! ./add-locale */ \"(rsc)/./node_modules/next/dist/shared/lib/router/utils/add-locale.js\");\nfunction formatNextPathnameInfo(info) {\n    let pathname = (0, _addlocale.addLocale)(info.pathname, info.locale, info.buildId ? undefined : info.defaultLocale, info.ignorePrefix);\n    if (info.buildId || !info.trailingSlash) {\n        pathname = (0, _removetrailingslash.removeTrailingSlash)(pathname);\n    }\n    if (info.buildId) {\n        pathname = (0, _addpathsuffix.addPathSuffix)((0, _addpathprefix.addPathPrefix)(pathname, \"/_next/data/\" + info.buildId), info.pathname === \"/\" ? \"index.json\" : \".json\");\n    }\n    pathname = (0, _addpathprefix.addPathPrefix)(pathname, info.basePath);\n    return !info.buildId && info.trailingSlash ? !pathname.endsWith(\"/\") ? (0, _addpathsuffix.addPathSuffix)(pathname, \"/\") : pathname : (0, _removetrailingslash.removeTrailingSlash)(pathname);\n} //# sourceMappingURL=format-next-pathname-info.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2Zvcm1hdC1uZXh0LXBhdGhuYW1lLWluZm8uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILDBEQUF5RDtJQUNyREksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLHVCQUF1QkMsbUJBQU9BLENBQUMsZ0hBQXlCO0FBQzlELE1BQU1DLGlCQUFpQkQsbUJBQU9BLENBQUMsb0dBQW1CO0FBQ2xELE1BQU1FLGlCQUFpQkYsbUJBQU9BLENBQUMsb0dBQW1CO0FBQ2xELE1BQU1HLGFBQWFILG1CQUFPQSxDQUFDLDBGQUFjO0FBQ3pDLFNBQVNGLHVCQUF1Qk0sSUFBSTtJQUNoQyxJQUFJQyxXQUFXLENBQUMsR0FBR0YsV0FBV0csU0FBUyxFQUFFRixLQUFLQyxRQUFRLEVBQUVELEtBQUtHLE1BQU0sRUFBRUgsS0FBS0ksT0FBTyxHQUFHQyxZQUFZTCxLQUFLTSxhQUFhLEVBQUVOLEtBQUtPLFlBQVk7SUFDckksSUFBSVAsS0FBS0ksT0FBTyxJQUFJLENBQUNKLEtBQUtRLGFBQWEsRUFBRTtRQUNyQ1AsV0FBVyxDQUFDLEdBQUdOLHFCQUFxQmMsbUJBQW1CLEVBQUVSO0lBQzdEO0lBQ0EsSUFBSUQsS0FBS0ksT0FBTyxFQUFFO1FBQ2RILFdBQVcsQ0FBQyxHQUFHSCxlQUFlWSxhQUFhLEVBQUUsQ0FBQyxHQUFHYixlQUFlYyxhQUFhLEVBQUVWLFVBQVUsaUJBQWlCRCxLQUFLSSxPQUFPLEdBQUdKLEtBQUtDLFFBQVEsS0FBSyxNQUFNLGVBQWU7SUFDcEs7SUFDQUEsV0FBVyxDQUFDLEdBQUdKLGVBQWVjLGFBQWEsRUFBRVYsVUFBVUQsS0FBS1ksUUFBUTtJQUNwRSxPQUFPLENBQUNaLEtBQUtJLE9BQU8sSUFBSUosS0FBS1EsYUFBYSxHQUFHLENBQUNQLFNBQVNZLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBR2YsZUFBZVksYUFBYSxFQUFFVCxVQUFVLE9BQU9BLFdBQVcsQ0FBQyxHQUFHTixxQkFBcUJjLG1CQUFtQixFQUFFUjtBQUN2TCxFQUVBLHFEQUFxRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2QtYmxvZy8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvZm9ybWF0LW5leHQtcGF0aG5hbWUtaW5mby5qcz9iMTQ2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZm9ybWF0TmV4dFBhdGhuYW1lSW5mb1wiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZm9ybWF0TmV4dFBhdGhuYW1lSW5mbztcbiAgICB9XG59KTtcbmNvbnN0IF9yZW1vdmV0cmFpbGluZ3NsYXNoID0gcmVxdWlyZShcIi4vcmVtb3ZlLXRyYWlsaW5nLXNsYXNoXCIpO1xuY29uc3QgX2FkZHBhdGhwcmVmaXggPSByZXF1aXJlKFwiLi9hZGQtcGF0aC1wcmVmaXhcIik7XG5jb25zdCBfYWRkcGF0aHN1ZmZpeCA9IHJlcXVpcmUoXCIuL2FkZC1wYXRoLXN1ZmZpeFwiKTtcbmNvbnN0IF9hZGRsb2NhbGUgPSByZXF1aXJlKFwiLi9hZGQtbG9jYWxlXCIpO1xuZnVuY3Rpb24gZm9ybWF0TmV4dFBhdGhuYW1lSW5mbyhpbmZvKSB7XG4gICAgbGV0IHBhdGhuYW1lID0gKDAsIF9hZGRsb2NhbGUuYWRkTG9jYWxlKShpbmZvLnBhdGhuYW1lLCBpbmZvLmxvY2FsZSwgaW5mby5idWlsZElkID8gdW5kZWZpbmVkIDogaW5mby5kZWZhdWx0TG9jYWxlLCBpbmZvLmlnbm9yZVByZWZpeCk7XG4gICAgaWYgKGluZm8uYnVpbGRJZCB8fCAhaW5mby50cmFpbGluZ1NsYXNoKSB7XG4gICAgICAgIHBhdGhuYW1lID0gKDAsIF9yZW1vdmV0cmFpbGluZ3NsYXNoLnJlbW92ZVRyYWlsaW5nU2xhc2gpKHBhdGhuYW1lKTtcbiAgICB9XG4gICAgaWYgKGluZm8uYnVpbGRJZCkge1xuICAgICAgICBwYXRobmFtZSA9ICgwLCBfYWRkcGF0aHN1ZmZpeC5hZGRQYXRoU3VmZml4KSgoMCwgX2FkZHBhdGhwcmVmaXguYWRkUGF0aFByZWZpeCkocGF0aG5hbWUsIFwiL19uZXh0L2RhdGEvXCIgKyBpbmZvLmJ1aWxkSWQpLCBpbmZvLnBhdGhuYW1lID09PSBcIi9cIiA/IFwiaW5kZXguanNvblwiIDogXCIuanNvblwiKTtcbiAgICB9XG4gICAgcGF0aG5hbWUgPSAoMCwgX2FkZHBhdGhwcmVmaXguYWRkUGF0aFByZWZpeCkocGF0aG5hbWUsIGluZm8uYmFzZVBhdGgpO1xuICAgIHJldHVybiAhaW5mby5idWlsZElkICYmIGluZm8udHJhaWxpbmdTbGFzaCA/ICFwYXRobmFtZS5lbmRzV2l0aChcIi9cIikgPyAoMCwgX2FkZHBhdGhzdWZmaXguYWRkUGF0aFN1ZmZpeCkocGF0aG5hbWUsIFwiL1wiKSA6IHBhdGhuYW1lIDogKDAsIF9yZW1vdmV0cmFpbGluZ3NsYXNoLnJlbW92ZVRyYWlsaW5nU2xhc2gpKHBhdGhuYW1lKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9ybWF0LW5leHQtcGF0aG5hbWUtaW5mby5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZm9ybWF0TmV4dFBhdGhuYW1lSW5mbyIsIl9yZW1vdmV0cmFpbGluZ3NsYXNoIiwicmVxdWlyZSIsIl9hZGRwYXRocHJlZml4IiwiX2FkZHBhdGhzdWZmaXgiLCJfYWRkbG9jYWxlIiwiaW5mbyIsInBhdGhuYW1lIiwiYWRkTG9jYWxlIiwibG9jYWxlIiwiYnVpbGRJZCIsInVuZGVmaW5lZCIsImRlZmF1bHRMb2NhbGUiLCJpZ25vcmVQcmVmaXgiLCJ0cmFpbGluZ1NsYXNoIiwicmVtb3ZlVHJhaWxpbmdTbGFzaCIsImFkZFBhdGhTdWZmaXgiLCJhZGRQYXRoUHJlZml4IiwiYmFzZVBhdGgiLCJlbmRzV2l0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/shared/lib/router/utils/format-next-pathname-info.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/shared/lib/router/utils/get-next-pathname-info.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/get-next-pathname-info.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"getNextPathnameInfo\", ({\n    enumerable: true,\n    get: function() {\n        return getNextPathnameInfo;\n    }\n}));\nconst _normalizelocalepath = __webpack_require__(/*! ../../i18n/normalize-locale-path */ \"(rsc)/./node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js\");\nconst _removepathprefix = __webpack_require__(/*! ./remove-path-prefix */ \"(rsc)/./node_modules/next/dist/shared/lib/router/utils/remove-path-prefix.js\");\nconst _pathhasprefix = __webpack_require__(/*! ./path-has-prefix */ \"(rsc)/./node_modules/next/dist/shared/lib/router/utils/path-has-prefix.js\");\nfunction getNextPathnameInfo(pathname, options) {\n    var _options_nextConfig;\n    const { basePath, i18n, trailingSlash } = (_options_nextConfig = options.nextConfig) != null ? _options_nextConfig : {};\n    const info = {\n        pathname: pathname,\n        trailingSlash: pathname !== \"/\" ? pathname.endsWith(\"/\") : trailingSlash\n    };\n    if (basePath && (0, _pathhasprefix.pathHasPrefix)(info.pathname, basePath)) {\n        info.pathname = (0, _removepathprefix.removePathPrefix)(info.pathname, basePath);\n        info.basePath = basePath;\n    }\n    if (options.parseData === true && info.pathname.startsWith(\"/_next/data/\") && info.pathname.endsWith(\".json\")) {\n        const paths = info.pathname.replace(/^\\/_next\\/data\\//, \"\").replace(/\\.json$/, \"\").split(\"/\");\n        const buildId = paths[0];\n        info.pathname = paths[1] !== \"index\" ? \"/\" + paths.slice(1).join(\"/\") : \"/\";\n        info.buildId = buildId;\n    }\n    // If provided, use the locale route normalizer to detect the locale instead\n    // of the function below.\n    if (options.i18nProvider) {\n        const result = options.i18nProvider.analyze(info.pathname);\n        info.locale = result.detectedLocale;\n        var _result_pathname;\n        info.pathname = (_result_pathname = result.pathname) != null ? _result_pathname : info.pathname;\n    } else if (i18n) {\n        const pathLocale = (0, _normalizelocalepath.normalizeLocalePath)(info.pathname, i18n.locales);\n        info.locale = pathLocale.detectedLocale;\n        var _pathLocale_pathname;\n        info.pathname = (_pathLocale_pathname = pathLocale.pathname) != null ? _pathLocale_pathname : info.pathname;\n    }\n    return info;\n} //# sourceMappingURL=get-next-pathname-info.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2dldC1uZXh0LXBhdGhuYW1lLWluZm8uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILHVEQUFzRDtJQUNsREksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLHVCQUF1QkMsbUJBQU9BLENBQUMsaUhBQWtDO0FBQ3ZFLE1BQU1DLG9CQUFvQkQsbUJBQU9BLENBQUMsMEdBQXNCO0FBQ3hELE1BQU1FLGlCQUFpQkYsbUJBQU9BLENBQUMsb0dBQW1CO0FBQ2xELFNBQVNGLG9CQUFvQkssUUFBUSxFQUFFQyxPQUFPO0lBQzFDLElBQUlDO0lBQ0osTUFBTSxFQUFFQyxRQUFRLEVBQUdDLElBQUksRUFBR0MsYUFBYSxFQUFHLEdBQUcsQ0FBQ0gsc0JBQXNCRCxRQUFRSyxVQUFVLEtBQUssT0FBT0osc0JBQXNCLENBQUM7SUFDekgsTUFBTUssT0FBTztRQUNUUCxVQUFVQTtRQUNWSyxlQUFlTCxhQUFhLE1BQU1BLFNBQVNRLFFBQVEsQ0FBQyxPQUFPSDtJQUMvRDtJQUNBLElBQUlGLFlBQVksQ0FBQyxHQUFHSixlQUFlVSxhQUFhLEVBQUVGLEtBQUtQLFFBQVEsRUFBRUcsV0FBVztRQUN4RUksS0FBS1AsUUFBUSxHQUFHLENBQUMsR0FBR0Ysa0JBQWtCWSxnQkFBZ0IsRUFBRUgsS0FBS1AsUUFBUSxFQUFFRztRQUN2RUksS0FBS0osUUFBUSxHQUFHQTtJQUNwQjtJQUNBLElBQUlGLFFBQVFVLFNBQVMsS0FBSyxRQUFRSixLQUFLUCxRQUFRLENBQUNZLFVBQVUsQ0FBQyxtQkFBbUJMLEtBQUtQLFFBQVEsQ0FBQ1EsUUFBUSxDQUFDLFVBQVU7UUFDM0csTUFBTUssUUFBUU4sS0FBS1AsUUFBUSxDQUFDYyxPQUFPLENBQUMsb0JBQW9CLElBQUlBLE9BQU8sQ0FBQyxXQUFXLElBQUlDLEtBQUssQ0FBQztRQUN6RixNQUFNQyxVQUFVSCxLQUFLLENBQUMsRUFBRTtRQUN4Qk4sS0FBS1AsUUFBUSxHQUFHYSxLQUFLLENBQUMsRUFBRSxLQUFLLFVBQVUsTUFBTUEsTUFBTUksS0FBSyxDQUFDLEdBQUdDLElBQUksQ0FBQyxPQUFPO1FBQ3hFWCxLQUFLUyxPQUFPLEdBQUdBO0lBQ25CO0lBQ0EsNEVBQTRFO0lBQzVFLHlCQUF5QjtJQUN6QixJQUFJZixRQUFRa0IsWUFBWSxFQUFFO1FBQ3RCLE1BQU1DLFNBQVNuQixRQUFRa0IsWUFBWSxDQUFDRSxPQUFPLENBQUNkLEtBQUtQLFFBQVE7UUFDekRPLEtBQUtlLE1BQU0sR0FBR0YsT0FBT0csY0FBYztRQUNuQyxJQUFJQztRQUNKakIsS0FBS1AsUUFBUSxHQUFHLENBQUN3QixtQkFBbUJKLE9BQU9wQixRQUFRLEtBQUssT0FBT3dCLG1CQUFtQmpCLEtBQUtQLFFBQVE7SUFDbkcsT0FBTyxJQUFJSSxNQUFNO1FBQ2IsTUFBTXFCLGFBQWEsQ0FBQyxHQUFHN0IscUJBQXFCOEIsbUJBQW1CLEVBQUVuQixLQUFLUCxRQUFRLEVBQUVJLEtBQUt1QixPQUFPO1FBQzVGcEIsS0FBS2UsTUFBTSxHQUFHRyxXQUFXRixjQUFjO1FBQ3ZDLElBQUlLO1FBQ0pyQixLQUFLUCxRQUFRLEdBQUcsQ0FBQzRCLHVCQUF1QkgsV0FBV3pCLFFBQVEsS0FBSyxPQUFPNEIsdUJBQXVCckIsS0FBS1AsUUFBUTtJQUMvRztJQUNBLE9BQU9PO0FBQ1gsRUFFQSxrREFBa0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb29kLWJsb2cvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2dldC1uZXh0LXBhdGhuYW1lLWluZm8uanM/MGQyNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldE5leHRQYXRobmFtZUluZm9cIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldE5leHRQYXRobmFtZUluZm87XG4gICAgfVxufSk7XG5jb25zdCBfbm9ybWFsaXplbG9jYWxlcGF0aCA9IHJlcXVpcmUoXCIuLi8uLi9pMThuL25vcm1hbGl6ZS1sb2NhbGUtcGF0aFwiKTtcbmNvbnN0IF9yZW1vdmVwYXRocHJlZml4ID0gcmVxdWlyZShcIi4vcmVtb3ZlLXBhdGgtcHJlZml4XCIpO1xuY29uc3QgX3BhdGhoYXNwcmVmaXggPSByZXF1aXJlKFwiLi9wYXRoLWhhcy1wcmVmaXhcIik7XG5mdW5jdGlvbiBnZXROZXh0UGF0aG5hbWVJbmZvKHBhdGhuYW1lLCBvcHRpb25zKSB7XG4gICAgdmFyIF9vcHRpb25zX25leHRDb25maWc7XG4gICAgY29uc3QgeyBiYXNlUGF0aCAsIGkxOG4gLCB0cmFpbGluZ1NsYXNoICB9ID0gKF9vcHRpb25zX25leHRDb25maWcgPSBvcHRpb25zLm5leHRDb25maWcpICE9IG51bGwgPyBfb3B0aW9uc19uZXh0Q29uZmlnIDoge307XG4gICAgY29uc3QgaW5mbyA9IHtcbiAgICAgICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgICAgICB0cmFpbGluZ1NsYXNoOiBwYXRobmFtZSAhPT0gXCIvXCIgPyBwYXRobmFtZS5lbmRzV2l0aChcIi9cIikgOiB0cmFpbGluZ1NsYXNoXG4gICAgfTtcbiAgICBpZiAoYmFzZVBhdGggJiYgKDAsIF9wYXRoaGFzcHJlZml4LnBhdGhIYXNQcmVmaXgpKGluZm8ucGF0aG5hbWUsIGJhc2VQYXRoKSkge1xuICAgICAgICBpbmZvLnBhdGhuYW1lID0gKDAsIF9yZW1vdmVwYXRocHJlZml4LnJlbW92ZVBhdGhQcmVmaXgpKGluZm8ucGF0aG5hbWUsIGJhc2VQYXRoKTtcbiAgICAgICAgaW5mby5iYXNlUGF0aCA9IGJhc2VQYXRoO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5wYXJzZURhdGEgPT09IHRydWUgJiYgaW5mby5wYXRobmFtZS5zdGFydHNXaXRoKFwiL19uZXh0L2RhdGEvXCIpICYmIGluZm8ucGF0aG5hbWUuZW5kc1dpdGgoXCIuanNvblwiKSkge1xuICAgICAgICBjb25zdCBwYXRocyA9IGluZm8ucGF0aG5hbWUucmVwbGFjZSgvXlxcL19uZXh0XFwvZGF0YVxcLy8sIFwiXCIpLnJlcGxhY2UoL1xcLmpzb24kLywgXCJcIikuc3BsaXQoXCIvXCIpO1xuICAgICAgICBjb25zdCBidWlsZElkID0gcGF0aHNbMF07XG4gICAgICAgIGluZm8ucGF0aG5hbWUgPSBwYXRoc1sxXSAhPT0gXCJpbmRleFwiID8gXCIvXCIgKyBwYXRocy5zbGljZSgxKS5qb2luKFwiL1wiKSA6IFwiL1wiO1xuICAgICAgICBpbmZvLmJ1aWxkSWQgPSBidWlsZElkO1xuICAgIH1cbiAgICAvLyBJZiBwcm92aWRlZCwgdXNlIHRoZSBsb2NhbGUgcm91dGUgbm9ybWFsaXplciB0byBkZXRlY3QgdGhlIGxvY2FsZSBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIGZ1bmN0aW9uIGJlbG93LlxuICAgIGlmIChvcHRpb25zLmkxOG5Qcm92aWRlcikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBvcHRpb25zLmkxOG5Qcm92aWRlci5hbmFseXplKGluZm8ucGF0aG5hbWUpO1xuICAgICAgICBpbmZvLmxvY2FsZSA9IHJlc3VsdC5kZXRlY3RlZExvY2FsZTtcbiAgICAgICAgdmFyIF9yZXN1bHRfcGF0aG5hbWU7XG4gICAgICAgIGluZm8ucGF0aG5hbWUgPSAoX3Jlc3VsdF9wYXRobmFtZSA9IHJlc3VsdC5wYXRobmFtZSkgIT0gbnVsbCA/IF9yZXN1bHRfcGF0aG5hbWUgOiBpbmZvLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAoaTE4bikge1xuICAgICAgICBjb25zdCBwYXRoTG9jYWxlID0gKDAsIF9ub3JtYWxpemVsb2NhbGVwYXRoLm5vcm1hbGl6ZUxvY2FsZVBhdGgpKGluZm8ucGF0aG5hbWUsIGkxOG4ubG9jYWxlcyk7XG4gICAgICAgIGluZm8ubG9jYWxlID0gcGF0aExvY2FsZS5kZXRlY3RlZExvY2FsZTtcbiAgICAgICAgdmFyIF9wYXRoTG9jYWxlX3BhdGhuYW1lO1xuICAgICAgICBpbmZvLnBhdGhuYW1lID0gKF9wYXRoTG9jYWxlX3BhdGhuYW1lID0gcGF0aExvY2FsZS5wYXRobmFtZSkgIT0gbnVsbCA/IF9wYXRoTG9jYWxlX3BhdGhuYW1lIDogaW5mby5wYXRobmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIGluZm87XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldC1uZXh0LXBhdGhuYW1lLWluZm8uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsImdldE5leHRQYXRobmFtZUluZm8iLCJfbm9ybWFsaXplbG9jYWxlcGF0aCIsInJlcXVpcmUiLCJfcmVtb3ZlcGF0aHByZWZpeCIsIl9wYXRoaGFzcHJlZml4IiwicGF0aG5hbWUiLCJvcHRpb25zIiwiX29wdGlvbnNfbmV4dENvbmZpZyIsImJhc2VQYXRoIiwiaTE4biIsInRyYWlsaW5nU2xhc2giLCJuZXh0Q29uZmlnIiwiaW5mbyIsImVuZHNXaXRoIiwicGF0aEhhc1ByZWZpeCIsInJlbW92ZVBhdGhQcmVmaXgiLCJwYXJzZURhdGEiLCJzdGFydHNXaXRoIiwicGF0aHMiLCJyZXBsYWNlIiwic3BsaXQiLCJidWlsZElkIiwic2xpY2UiLCJqb2luIiwiaTE4blByb3ZpZGVyIiwicmVzdWx0IiwiYW5hbHl6ZSIsImxvY2FsZSIsImRldGVjdGVkTG9jYWxlIiwiX3Jlc3VsdF9wYXRobmFtZSIsInBhdGhMb2NhbGUiLCJub3JtYWxpemVMb2NhbGVQYXRoIiwibG9jYWxlcyIsIl9wYXRoTG9jYWxlX3BhdGhuYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/shared/lib/router/utils/get-next-pathname-info.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/shared/lib/router/utils/parse-path.js":
/*!**********************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/parse-path.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Given a path this function will find the pathname, query and hash and return\n * them. This is useful to parse full paths on the client side.\n * @param path A path to parse e.g. /foo/bar?id=1#hash\n */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"parsePath\", ({\n    enumerable: true,\n    get: function() {\n        return parsePath;\n    }\n}));\nfunction parsePath(path) {\n    const hashIndex = path.indexOf(\"#\");\n    const queryIndex = path.indexOf(\"?\");\n    const hasQuery = queryIndex > -1 && (hashIndex < 0 || queryIndex < hashIndex);\n    if (hasQuery || hashIndex > -1) {\n        return {\n            pathname: path.substring(0, hasQuery ? queryIndex : hashIndex),\n            query: hasQuery ? path.substring(queryIndex, hashIndex > -1 ? hashIndex : undefined) : \"\",\n            hash: hashIndex > -1 ? path.slice(hashIndex) : \"\"\n        };\n    }\n    return {\n        pathname: path,\n        query: \"\",\n        hash: \"\"\n    };\n} //# sourceMappingURL=parse-path.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL3BhcnNlLXBhdGguanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Q0FJQyxHQUFnQjtBQUNqQkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILDZDQUE0QztJQUN4Q0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLFNBQVNBLFVBQVVDLElBQUk7SUFDbkIsTUFBTUMsWUFBWUQsS0FBS0UsT0FBTyxDQUFDO0lBQy9CLE1BQU1DLGFBQWFILEtBQUtFLE9BQU8sQ0FBQztJQUNoQyxNQUFNRSxXQUFXRCxhQUFhLENBQUMsS0FBTUYsQ0FBQUEsWUFBWSxLQUFLRSxhQUFhRixTQUFRO0lBQzNFLElBQUlHLFlBQVlILFlBQVksQ0FBQyxHQUFHO1FBQzVCLE9BQU87WUFDSEksVUFBVUwsS0FBS00sU0FBUyxDQUFDLEdBQUdGLFdBQVdELGFBQWFGO1lBQ3BETSxPQUFPSCxXQUFXSixLQUFLTSxTQUFTLENBQUNILFlBQVlGLFlBQVksQ0FBQyxJQUFJQSxZQUFZTyxhQUFhO1lBQ3ZGQyxNQUFNUixZQUFZLENBQUMsSUFBSUQsS0FBS1UsS0FBSyxDQUFDVCxhQUFhO1FBQ25EO0lBQ0o7SUFDQSxPQUFPO1FBQ0hJLFVBQVVMO1FBQ1ZPLE9BQU87UUFDUEUsTUFBTTtJQUNWO0FBQ0osRUFFQSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb29kLWJsb2cvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL3BhcnNlLXBhdGguanM/ZTUyYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEdpdmVuIGEgcGF0aCB0aGlzIGZ1bmN0aW9uIHdpbGwgZmluZCB0aGUgcGF0aG5hbWUsIHF1ZXJ5IGFuZCBoYXNoIGFuZCByZXR1cm5cbiAqIHRoZW0uIFRoaXMgaXMgdXNlZnVsIHRvIHBhcnNlIGZ1bGwgcGF0aHMgb24gdGhlIGNsaWVudCBzaWRlLlxuICogQHBhcmFtIHBhdGggQSBwYXRoIHRvIHBhcnNlIGUuZy4gL2Zvby9iYXI/aWQ9MSNoYXNoXG4gKi8gXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwYXJzZVBhdGhcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlUGF0aDtcbiAgICB9XG59KTtcbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gICAgY29uc3QgaGFzaEluZGV4ID0gcGF0aC5pbmRleE9mKFwiI1wiKTtcbiAgICBjb25zdCBxdWVyeUluZGV4ID0gcGF0aC5pbmRleE9mKFwiP1wiKTtcbiAgICBjb25zdCBoYXNRdWVyeSA9IHF1ZXJ5SW5kZXggPiAtMSAmJiAoaGFzaEluZGV4IDwgMCB8fCBxdWVyeUluZGV4IDwgaGFzaEluZGV4KTtcbiAgICBpZiAoaGFzUXVlcnkgfHwgaGFzaEluZGV4ID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBhdGhuYW1lOiBwYXRoLnN1YnN0cmluZygwLCBoYXNRdWVyeSA/IHF1ZXJ5SW5kZXggOiBoYXNoSW5kZXgpLFxuICAgICAgICAgICAgcXVlcnk6IGhhc1F1ZXJ5ID8gcGF0aC5zdWJzdHJpbmcocXVlcnlJbmRleCwgaGFzaEluZGV4ID4gLTEgPyBoYXNoSW5kZXggOiB1bmRlZmluZWQpIDogXCJcIixcbiAgICAgICAgICAgIGhhc2g6IGhhc2hJbmRleCA+IC0xID8gcGF0aC5zbGljZShoYXNoSW5kZXgpIDogXCJcIlxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBwYXRobmFtZTogcGF0aCxcbiAgICAgICAgcXVlcnk6IFwiXCIsXG4gICAgICAgIGhhc2g6IFwiXCJcbiAgICB9O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZS1wYXRoLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJwYXJzZVBhdGgiLCJwYXRoIiwiaGFzaEluZGV4IiwiaW5kZXhPZiIsInF1ZXJ5SW5kZXgiLCJoYXNRdWVyeSIsInBhdGhuYW1lIiwic3Vic3RyaW5nIiwicXVlcnkiLCJ1bmRlZmluZWQiLCJoYXNoIiwic2xpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/shared/lib/router/utils/parse-path.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/shared/lib/router/utils/path-has-prefix.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/path-has-prefix.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"pathHasPrefix\", ({\n    enumerable: true,\n    get: function() {\n        return pathHasPrefix;\n    }\n}));\nconst _parsepath = __webpack_require__(/*! ./parse-path */ \"(rsc)/./node_modules/next/dist/shared/lib/router/utils/parse-path.js\");\nfunction pathHasPrefix(path, prefix) {\n    if (typeof path !== \"string\") {\n        return false;\n    }\n    const { pathname } = (0, _parsepath.parsePath)(path);\n    return pathname === prefix || pathname.startsWith(prefix + \"/\");\n} //# sourceMappingURL=path-has-prefix.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL3BhdGgtaGFzLXByZWZpeC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsaURBQWdEO0lBQzVDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMsYUFBYUMsbUJBQU9BLENBQUMsMEZBQWM7QUFDekMsU0FBU0YsY0FBY0csSUFBSSxFQUFFQyxNQUFNO0lBQy9CLElBQUksT0FBT0QsU0FBUyxVQUFVO1FBQzFCLE9BQU87SUFDWDtJQUNBLE1BQU0sRUFBRUUsUUFBUSxFQUFHLEdBQUcsQ0FBQyxHQUFHSixXQUFXSyxTQUFTLEVBQUVIO0lBQ2hELE9BQU9FLGFBQWFELFVBQVVDLFNBQVNFLFVBQVUsQ0FBQ0gsU0FBUztBQUMvRCxFQUVBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2QtYmxvZy8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcGF0aC1oYXMtcHJlZml4LmpzP2I1MzgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwYXRoSGFzUHJlZml4XCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBwYXRoSGFzUHJlZml4O1xuICAgIH1cbn0pO1xuY29uc3QgX3BhcnNlcGF0aCA9IHJlcXVpcmUoXCIuL3BhcnNlLXBhdGhcIik7XG5mdW5jdGlvbiBwYXRoSGFzUHJlZml4KHBhdGgsIHByZWZpeCkge1xuICAgIGlmICh0eXBlb2YgcGF0aCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHsgcGF0aG5hbWUgIH0gPSAoMCwgX3BhcnNlcGF0aC5wYXJzZVBhdGgpKHBhdGgpO1xuICAgIHJldHVybiBwYXRobmFtZSA9PT0gcHJlZml4IHx8IHBhdGhuYW1lLnN0YXJ0c1dpdGgocHJlZml4ICsgXCIvXCIpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXRoLWhhcy1wcmVmaXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsInBhdGhIYXNQcmVmaXgiLCJfcGFyc2VwYXRoIiwicmVxdWlyZSIsInBhdGgiLCJwcmVmaXgiLCJwYXRobmFtZSIsInBhcnNlUGF0aCIsInN0YXJ0c1dpdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/shared/lib/router/utils/path-has-prefix.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/shared/lib/router/utils/remove-path-prefix.js":
/*!******************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/remove-path-prefix.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"removePathPrefix\", ({\n    enumerable: true,\n    get: function() {\n        return removePathPrefix;\n    }\n}));\nconst _pathhasprefix = __webpack_require__(/*! ./path-has-prefix */ \"(rsc)/./node_modules/next/dist/shared/lib/router/utils/path-has-prefix.js\");\nfunction removePathPrefix(path, prefix) {\n    // If the path doesn't start with the prefix we can return it as is. This\n    // protects us from situations where the prefix is a substring of the path\n    // prefix such as:\n    //\n    // For prefix: /blog\n    //\n    //   /blog -> true\n    //   /blog/ -> true\n    //   /blog/1 -> true\n    //   /blogging -> false\n    //   /blogging/ -> false\n    //   /blogging/1 -> false\n    if (!(0, _pathhasprefix.pathHasPrefix)(path, prefix)) {\n        return path;\n    }\n    // Remove the prefix from the path via slicing.\n    const withoutPrefix = path.slice(prefix.length);\n    // If the path without the prefix starts with a `/` we can return it as is.\n    if (withoutPrefix.startsWith(\"/\")) {\n        return withoutPrefix;\n    }\n    // If the path without the prefix doesn't start with a `/` we need to add it\n    // back to the path to make sure it's a valid path.\n    return \"/\" + withoutPrefix;\n} //# sourceMappingURL=remove-path-prefix.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL3JlbW92ZS1wYXRoLXByZWZpeC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsb0RBQW1EO0lBQy9DSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMsaUJBQWlCQyxtQkFBT0EsQ0FBQyxvR0FBbUI7QUFDbEQsU0FBU0YsaUJBQWlCRyxJQUFJLEVBQUVDLE1BQU07SUFDbEMseUVBQXlFO0lBQ3pFLDBFQUEwRTtJQUMxRSxrQkFBa0I7SUFDbEIsRUFBRTtJQUNGLG9CQUFvQjtJQUNwQixFQUFFO0lBQ0Ysa0JBQWtCO0lBQ2xCLG1CQUFtQjtJQUNuQixvQkFBb0I7SUFDcEIsdUJBQXVCO0lBQ3ZCLHdCQUF3QjtJQUN4Qix5QkFBeUI7SUFDekIsSUFBSSxDQUFDLENBQUMsR0FBR0gsZUFBZUksYUFBYSxFQUFFRixNQUFNQyxTQUFTO1FBQ2xELE9BQU9EO0lBQ1g7SUFDQSwrQ0FBK0M7SUFDL0MsTUFBTUcsZ0JBQWdCSCxLQUFLSSxLQUFLLENBQUNILE9BQU9JLE1BQU07SUFDOUMsMkVBQTJFO0lBQzNFLElBQUlGLGNBQWNHLFVBQVUsQ0FBQyxNQUFNO1FBQy9CLE9BQU9IO0lBQ1g7SUFDQSw0RUFBNEU7SUFDNUUsbURBQW1EO0lBQ25ELE9BQU8sTUFBTUE7QUFDakIsRUFFQSw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb29kLWJsb2cvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL3JlbW92ZS1wYXRoLXByZWZpeC5qcz82MTQzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmVtb3ZlUGF0aFByZWZpeFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcmVtb3ZlUGF0aFByZWZpeDtcbiAgICB9XG59KTtcbmNvbnN0IF9wYXRoaGFzcHJlZml4ID0gcmVxdWlyZShcIi4vcGF0aC1oYXMtcHJlZml4XCIpO1xuZnVuY3Rpb24gcmVtb3ZlUGF0aFByZWZpeChwYXRoLCBwcmVmaXgpIHtcbiAgICAvLyBJZiB0aGUgcGF0aCBkb2Vzbid0IHN0YXJ0IHdpdGggdGhlIHByZWZpeCB3ZSBjYW4gcmV0dXJuIGl0IGFzIGlzLiBUaGlzXG4gICAgLy8gcHJvdGVjdHMgdXMgZnJvbSBzaXR1YXRpb25zIHdoZXJlIHRoZSBwcmVmaXggaXMgYSBzdWJzdHJpbmcgb2YgdGhlIHBhdGhcbiAgICAvLyBwcmVmaXggc3VjaCBhczpcbiAgICAvL1xuICAgIC8vIEZvciBwcmVmaXg6IC9ibG9nXG4gICAgLy9cbiAgICAvLyAgIC9ibG9nIC0+IHRydWVcbiAgICAvLyAgIC9ibG9nLyAtPiB0cnVlXG4gICAgLy8gICAvYmxvZy8xIC0+IHRydWVcbiAgICAvLyAgIC9ibG9nZ2luZyAtPiBmYWxzZVxuICAgIC8vICAgL2Jsb2dnaW5nLyAtPiBmYWxzZVxuICAgIC8vICAgL2Jsb2dnaW5nLzEgLT4gZmFsc2VcbiAgICBpZiAoISgwLCBfcGF0aGhhc3ByZWZpeC5wYXRoSGFzUHJlZml4KShwYXRoLCBwcmVmaXgpKSB7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICAvLyBSZW1vdmUgdGhlIHByZWZpeCBmcm9tIHRoZSBwYXRoIHZpYSBzbGljaW5nLlxuICAgIGNvbnN0IHdpdGhvdXRQcmVmaXggPSBwYXRoLnNsaWNlKHByZWZpeC5sZW5ndGgpO1xuICAgIC8vIElmIHRoZSBwYXRoIHdpdGhvdXQgdGhlIHByZWZpeCBzdGFydHMgd2l0aCBhIGAvYCB3ZSBjYW4gcmV0dXJuIGl0IGFzIGlzLlxuICAgIGlmICh3aXRob3V0UHJlZml4LnN0YXJ0c1dpdGgoXCIvXCIpKSB7XG4gICAgICAgIHJldHVybiB3aXRob3V0UHJlZml4O1xuICAgIH1cbiAgICAvLyBJZiB0aGUgcGF0aCB3aXRob3V0IHRoZSBwcmVmaXggZG9lc24ndCBzdGFydCB3aXRoIGEgYC9gIHdlIG5lZWQgdG8gYWRkIGl0XG4gICAgLy8gYmFjayB0byB0aGUgcGF0aCB0byBtYWtlIHN1cmUgaXQncyBhIHZhbGlkIHBhdGguXG4gICAgcmV0dXJuIFwiL1wiICsgd2l0aG91dFByZWZpeDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVtb3ZlLXBhdGgtcHJlZml4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJyZW1vdmVQYXRoUHJlZml4IiwiX3BhdGhoYXNwcmVmaXgiLCJyZXF1aXJlIiwicGF0aCIsInByZWZpeCIsInBhdGhIYXNQcmVmaXgiLCJ3aXRob3V0UHJlZml4Iiwic2xpY2UiLCJsZW5ndGgiLCJzdGFydHNXaXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/shared/lib/router/utils/remove-path-prefix.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/shared/lib/router/utils/remove-trailing-slash.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/remove-trailing-slash.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Removes the trailing slash for a given route or page path. Preserves the\n * root page. Examples:\n *   - `/foo/bar/` -> `/foo/bar`\n *   - `/foo/bar` -> `/foo/bar`\n *   - `/` -> `/`\n */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"removeTrailingSlash\", ({\n    enumerable: true,\n    get: function() {\n        return removeTrailingSlash;\n    }\n}));\nfunction removeTrailingSlash(route) {\n    return route.replace(/\\/$/, \"\") || \"/\";\n} //# sourceMappingURL=remove-trailing-slash.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL3JlbW92ZS10cmFpbGluZy1zbGFzaC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0NBTUMsR0FBZ0I7QUFDakJBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCx1REFBc0Q7SUFDbERJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixTQUFTQSxvQkFBb0JDLEtBQUs7SUFDOUIsT0FBT0EsTUFBTUMsT0FBTyxDQUFDLE9BQU8sT0FBTztBQUN2QyxFQUVBLGlEQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2QtYmxvZy8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcmVtb3ZlLXRyYWlsaW5nLXNsYXNoLmpzP2VjMDYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZW1vdmVzIHRoZSB0cmFpbGluZyBzbGFzaCBmb3IgYSBnaXZlbiByb3V0ZSBvciBwYWdlIHBhdGguIFByZXNlcnZlcyB0aGVcbiAqIHJvb3QgcGFnZS4gRXhhbXBsZXM6XG4gKiAgIC0gYC9mb28vYmFyL2AgLT4gYC9mb28vYmFyYFxuICogICAtIGAvZm9vL2JhcmAgLT4gYC9mb28vYmFyYFxuICogICAtIGAvYCAtPiBgL2BcbiAqLyBcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlbW92ZVRyYWlsaW5nU2xhc2hcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHJlbW92ZVRyYWlsaW5nU2xhc2g7XG4gICAgfVxufSk7XG5mdW5jdGlvbiByZW1vdmVUcmFpbGluZ1NsYXNoKHJvdXRlKSB7XG4gICAgcmV0dXJuIHJvdXRlLnJlcGxhY2UoL1xcLyQvLCBcIlwiKSB8fCBcIi9cIjtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVtb3ZlLXRyYWlsaW5nLXNsYXNoLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJyZW1vdmVUcmFpbGluZ1NsYXNoIiwicm91dGUiLCJyZXBsYWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/shared/lib/router/utils/remove-trailing-slash.js\n");

/***/ }),

/***/ "(shared)/./node_modules/next/dist/client/components/action-async-storage.js":
/*!**************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/action-async-storage.js ***!
  \**************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"actionAsyncStorage\", ({\n    enumerable: true,\n    get: function() {\n        return actionAsyncStorage;\n    }\n}));\nconst _asynclocalstorage = __webpack_require__(/*! ./async-local-storage */ \"(shared)/./node_modules/next/dist/client/components/async-local-storage.js\");\nconst actionAsyncStorage = (0, _asynclocalstorage.createAsyncLocalStorage)();\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=action-async-storage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNoYXJlZCkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2FjdGlvbi1hc3luYy1zdG9yYWdlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCxzREFBcUQ7SUFDakRJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixNQUFNQyxxQkFBcUJDLG1CQUFPQSxDQUFDLHlHQUF1QjtBQUMxRCxNQUFNRixxQkFBcUIsQ0FBQyxHQUFHQyxtQkFBbUJFLHVCQUF1QjtBQUV6RSxJQUFJLENBQUMsT0FBT1AsUUFBUVEsT0FBTyxLQUFLLGNBQWUsT0FBT1IsUUFBUVEsT0FBTyxLQUFLLFlBQVlSLFFBQVFRLE9BQU8sS0FBSyxJQUFJLEtBQU0sT0FBT1IsUUFBUVEsT0FBTyxDQUFDQyxVQUFVLEtBQUssYUFBYTtJQUNyS1gsT0FBT0MsY0FBYyxDQUFDQyxRQUFRUSxPQUFPLEVBQUUsY0FBYztRQUFFUCxPQUFPO0lBQUs7SUFDbkVILE9BQU9ZLE1BQU0sQ0FBQ1YsUUFBUVEsT0FBTyxFQUFFUjtJQUMvQlcsT0FBT1gsT0FBTyxHQUFHQSxRQUFRUSxPQUFPO0FBQ2xDLEVBRUEsZ0RBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vZC1ibG9nLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9hY3Rpb24tYXN5bmMtc3RvcmFnZS5qcz8xOTAzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYWN0aW9uQXN5bmNTdG9yYWdlXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhY3Rpb25Bc3luY1N0b3JhZ2U7XG4gICAgfVxufSk7XG5jb25zdCBfYXN5bmNsb2NhbHN0b3JhZ2UgPSByZXF1aXJlKFwiLi9hc3luYy1sb2NhbC1zdG9yYWdlXCIpO1xuY29uc3QgYWN0aW9uQXN5bmNTdG9yYWdlID0gKDAsIF9hc3luY2xvY2Fsc3RvcmFnZS5jcmVhdGVBc3luY0xvY2FsU3RvcmFnZSkoKTtcblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWN0aW9uLWFzeW5jLXN0b3JhZ2UuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsImFjdGlvbkFzeW5jU3RvcmFnZSIsIl9hc3luY2xvY2Fsc3RvcmFnZSIsInJlcXVpcmUiLCJjcmVhdGVBc3luY0xvY2FsU3RvcmFnZSIsImRlZmF1bHQiLCJfX2VzTW9kdWxlIiwiYXNzaWduIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(shared)/./node_modules/next/dist/client/components/action-async-storage.js\n");

/***/ }),

/***/ "(shared)/./node_modules/next/dist/client/components/async-local-storage.js":
/*!*************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/async-local-storage.js ***!
  \*************************************************************************/
/***/ ((module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"createAsyncLocalStorage\", ({\n    enumerable: true,\n    get: function() {\n        return createAsyncLocalStorage;\n    }\n}));\nconst sharedAsyncLocalStorageNotAvailableError = new Error(\"Invariant: AsyncLocalStorage accessed in runtime where it is not available\");\nclass FakeAsyncLocalStorage {\n    disable() {\n        throw sharedAsyncLocalStorageNotAvailableError;\n    }\n    getStore() {\n        // This fake implementation of AsyncLocalStorage always returns `undefined`.\n        return undefined;\n    }\n    run() {\n        throw sharedAsyncLocalStorageNotAvailableError;\n    }\n    exit() {\n        throw sharedAsyncLocalStorageNotAvailableError;\n    }\n    enterWith() {\n        throw sharedAsyncLocalStorageNotAvailableError;\n    }\n}\nconst maybeGlobalAsyncLocalStorage = globalThis.AsyncLocalStorage;\nfunction createAsyncLocalStorage() {\n    if (maybeGlobalAsyncLocalStorage) {\n        return new maybeGlobalAsyncLocalStorage();\n    }\n    return new FakeAsyncLocalStorage();\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=async-local-storage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNoYXJlZCkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2FzeW5jLWxvY2FsLXN0b3JhZ2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILDJEQUEwRDtJQUN0REksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLDJDQUEyQyxJQUFJQyxNQUFNO0FBQzNELE1BQU1DO0lBQ0ZDLFVBQVU7UUFDTixNQUFNSDtJQUNWO0lBQ0FJLFdBQVc7UUFDUCw0RUFBNEU7UUFDNUUsT0FBT0M7SUFDWDtJQUNBQyxNQUFNO1FBQ0YsTUFBTU47SUFDVjtJQUNBTyxPQUFPO1FBQ0gsTUFBTVA7SUFDVjtJQUNBUSxZQUFZO1FBQ1IsTUFBTVI7SUFDVjtBQUNKO0FBQ0EsTUFBTVMsK0JBQStCQyxXQUFXQyxpQkFBaUI7QUFDakUsU0FBU1o7SUFDTCxJQUFJVSw4QkFBOEI7UUFDOUIsT0FBTyxJQUFJQTtJQUNmO0lBQ0EsT0FBTyxJQUFJUDtBQUNmO0FBRUEsSUFBSSxDQUFDLE9BQU9QLFFBQVFpQixPQUFPLEtBQUssY0FBZSxPQUFPakIsUUFBUWlCLE9BQU8sS0FBSyxZQUFZakIsUUFBUWlCLE9BQU8sS0FBSyxJQUFJLEtBQU0sT0FBT2pCLFFBQVFpQixPQUFPLENBQUNDLFVBQVUsS0FBSyxhQUFhO0lBQ3JLcEIsT0FBT0MsY0FBYyxDQUFDQyxRQUFRaUIsT0FBTyxFQUFFLGNBQWM7UUFBRWhCLE9BQU87SUFBSztJQUNuRUgsT0FBT3FCLE1BQU0sQ0FBQ25CLFFBQVFpQixPQUFPLEVBQUVqQjtJQUMvQm9CLE9BQU9wQixPQUFPLEdBQUdBLFFBQVFpQixPQUFPO0FBQ2xDLEVBRUEsK0NBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vZC1ibG9nLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9hc3luYy1sb2NhbC1zdG9yYWdlLmpzP2FmNDMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVBc3luY0xvY2FsU3RvcmFnZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQXN5bmNMb2NhbFN0b3JhZ2U7XG4gICAgfVxufSk7XG5jb25zdCBzaGFyZWRBc3luY0xvY2FsU3RvcmFnZU5vdEF2YWlsYWJsZUVycm9yID0gbmV3IEVycm9yKFwiSW52YXJpYW50OiBBc3luY0xvY2FsU3RvcmFnZSBhY2Nlc3NlZCBpbiBydW50aW1lIHdoZXJlIGl0IGlzIG5vdCBhdmFpbGFibGVcIik7XG5jbGFzcyBGYWtlQXN5bmNMb2NhbFN0b3JhZ2Uge1xuICAgIGRpc2FibGUoKSB7XG4gICAgICAgIHRocm93IHNoYXJlZEFzeW5jTG9jYWxTdG9yYWdlTm90QXZhaWxhYmxlRXJyb3I7XG4gICAgfVxuICAgIGdldFN0b3JlKCkge1xuICAgICAgICAvLyBUaGlzIGZha2UgaW1wbGVtZW50YXRpb24gb2YgQXN5bmNMb2NhbFN0b3JhZ2UgYWx3YXlzIHJldHVybnMgYHVuZGVmaW5lZGAuXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJ1bigpIHtcbiAgICAgICAgdGhyb3cgc2hhcmVkQXN5bmNMb2NhbFN0b3JhZ2VOb3RBdmFpbGFibGVFcnJvcjtcbiAgICB9XG4gICAgZXhpdCgpIHtcbiAgICAgICAgdGhyb3cgc2hhcmVkQXN5bmNMb2NhbFN0b3JhZ2VOb3RBdmFpbGFibGVFcnJvcjtcbiAgICB9XG4gICAgZW50ZXJXaXRoKCkge1xuICAgICAgICB0aHJvdyBzaGFyZWRBc3luY0xvY2FsU3RvcmFnZU5vdEF2YWlsYWJsZUVycm9yO1xuICAgIH1cbn1cbmNvbnN0IG1heWJlR2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2UgPSBnbG9iYWxUaGlzLkFzeW5jTG9jYWxTdG9yYWdlO1xuZnVuY3Rpb24gY3JlYXRlQXN5bmNMb2NhbFN0b3JhZ2UoKSB7XG4gICAgaWYgKG1heWJlR2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBtYXliZUdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlKCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgRmFrZUFzeW5jTG9jYWxTdG9yYWdlKCk7XG59XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzeW5jLWxvY2FsLXN0b3JhZ2UuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsImNyZWF0ZUFzeW5jTG9jYWxTdG9yYWdlIiwic2hhcmVkQXN5bmNMb2NhbFN0b3JhZ2VOb3RBdmFpbGFibGVFcnJvciIsIkVycm9yIiwiRmFrZUFzeW5jTG9jYWxTdG9yYWdlIiwiZGlzYWJsZSIsImdldFN0b3JlIiwidW5kZWZpbmVkIiwicnVuIiwiZXhpdCIsImVudGVyV2l0aCIsIm1heWJlR2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2UiLCJnbG9iYWxUaGlzIiwiQXN5bmNMb2NhbFN0b3JhZ2UiLCJkZWZhdWx0IiwiX19lc01vZHVsZSIsImFzc2lnbiIsIm1vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(shared)/./node_modules/next/dist/client/components/async-local-storage.js\n");

/***/ }),

/***/ "(shared)/./node_modules/next/dist/client/components/request-async-storage.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/request-async-storage.js ***!
  \***************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"requestAsyncStorage\", ({\n    enumerable: true,\n    get: function() {\n        return requestAsyncStorage;\n    }\n}));\nconst _asynclocalstorage = __webpack_require__(/*! ./async-local-storage */ \"(shared)/./node_modules/next/dist/client/components/async-local-storage.js\");\nconst requestAsyncStorage = (0, _asynclocalstorage.createAsyncLocalStorage)();\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=request-async-storage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNoYXJlZCkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL3JlcXVlc3QtYXN5bmMtc3RvcmFnZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsdURBQXNEO0lBQ2xESSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMscUJBQXFCQyxtQkFBT0EsQ0FBQyx5R0FBdUI7QUFDMUQsTUFBTUYsc0JBQXNCLENBQUMsR0FBR0MsbUJBQW1CRSx1QkFBdUI7QUFFMUUsSUFBSSxDQUFDLE9BQU9QLFFBQVFRLE9BQU8sS0FBSyxjQUFlLE9BQU9SLFFBQVFRLE9BQU8sS0FBSyxZQUFZUixRQUFRUSxPQUFPLEtBQUssSUFBSSxLQUFNLE9BQU9SLFFBQVFRLE9BQU8sQ0FBQ0MsVUFBVSxLQUFLLGFBQWE7SUFDcktYLE9BQU9DLGNBQWMsQ0FBQ0MsUUFBUVEsT0FBTyxFQUFFLGNBQWM7UUFBRVAsT0FBTztJQUFLO0lBQ25FSCxPQUFPWSxNQUFNLENBQUNWLFFBQVFRLE9BQU8sRUFBRVI7SUFDL0JXLE9BQU9YLE9BQU8sR0FBR0EsUUFBUVEsT0FBTztBQUNsQyxFQUVBLGlEQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2QtYmxvZy8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvcmVxdWVzdC1hc3luYy1zdG9yYWdlLmpzPzMzOWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZXF1ZXN0QXN5bmNTdG9yYWdlXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByZXF1ZXN0QXN5bmNTdG9yYWdlO1xuICAgIH1cbn0pO1xuY29uc3QgX2FzeW5jbG9jYWxzdG9yYWdlID0gcmVxdWlyZShcIi4vYXN5bmMtbG9jYWwtc3RvcmFnZVwiKTtcbmNvbnN0IHJlcXVlc3RBc3luY1N0b3JhZ2UgPSAoMCwgX2FzeW5jbG9jYWxzdG9yYWdlLmNyZWF0ZUFzeW5jTG9jYWxTdG9yYWdlKSgpO1xuXG5pZiAoKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdvYmplY3QnICYmIGV4cG9ydHMuZGVmYXVsdCAhPT0gbnVsbCkpICYmIHR5cGVvZiBleHBvcnRzLmRlZmF1bHQuX19lc01vZHVsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMuZGVmYXVsdCwgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuICBPYmplY3QuYXNzaWduKGV4cG9ydHMuZGVmYXVsdCwgZXhwb3J0cyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXF1ZXN0LWFzeW5jLXN0b3JhZ2UuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsInJlcXVlc3RBc3luY1N0b3JhZ2UiLCJfYXN5bmNsb2NhbHN0b3JhZ2UiLCJyZXF1aXJlIiwiY3JlYXRlQXN5bmNMb2NhbFN0b3JhZ2UiLCJkZWZhdWx0IiwiX19lc01vZHVsZSIsImFzc2lnbiIsIm1vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(shared)/./node_modules/next/dist/client/components/request-async-storage.js\n");

/***/ }),

/***/ "(shared)/./node_modules/next/dist/client/components/static-generation-async-storage.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/static-generation-async-storage.js ***!
  \*************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"staticGenerationAsyncStorage\", ({\n    enumerable: true,\n    get: function() {\n        return staticGenerationAsyncStorage;\n    }\n}));\nconst _asynclocalstorage = __webpack_require__(/*! ./async-local-storage */ \"(shared)/./node_modules/next/dist/client/components/async-local-storage.js\");\nconst staticGenerationAsyncStorage = (0, _asynclocalstorage.createAsyncLocalStorage)();\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=static-generation-async-storage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNoYXJlZCkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL3N0YXRpYy1nZW5lcmF0aW9uLWFzeW5jLXN0b3JhZ2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILGdFQUErRDtJQUMzREksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLHFCQUFxQkMsbUJBQU9BLENBQUMseUdBQXVCO0FBQzFELE1BQU1GLCtCQUErQixDQUFDLEdBQUdDLG1CQUFtQkUsdUJBQXVCO0FBRW5GLElBQUksQ0FBQyxPQUFPUCxRQUFRUSxPQUFPLEtBQUssY0FBZSxPQUFPUixRQUFRUSxPQUFPLEtBQUssWUFBWVIsUUFBUVEsT0FBTyxLQUFLLElBQUksS0FBTSxPQUFPUixRQUFRUSxPQUFPLENBQUNDLFVBQVUsS0FBSyxhQUFhO0lBQ3JLWCxPQUFPQyxjQUFjLENBQUNDLFFBQVFRLE9BQU8sRUFBRSxjQUFjO1FBQUVQLE9BQU87SUFBSztJQUNuRUgsT0FBT1ksTUFBTSxDQUFDVixRQUFRUSxPQUFPLEVBQUVSO0lBQy9CVyxPQUFPWCxPQUFPLEdBQUdBLFFBQVFRLE9BQU87QUFDbEMsRUFFQSwyREFBMkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb29kLWJsb2cvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL3N0YXRpYy1nZW5lcmF0aW9uLWFzeW5jLXN0b3JhZ2UuanM/MmIyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2U7XG4gICAgfVxufSk7XG5jb25zdCBfYXN5bmNsb2NhbHN0b3JhZ2UgPSByZXF1aXJlKFwiLi9hc3luYy1sb2NhbC1zdG9yYWdlXCIpO1xuY29uc3Qgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSA9ICgwLCBfYXN5bmNsb2NhbHN0b3JhZ2UuY3JlYXRlQXN5bmNMb2NhbFN0b3JhZ2UpKCk7XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXRpYy1nZW5lcmF0aW9uLWFzeW5jLXN0b3JhZ2UuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsInN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UiLCJfYXN5bmNsb2NhbHN0b3JhZ2UiLCJyZXF1aXJlIiwiY3JlYXRlQXN5bmNMb2NhbFN0b3JhZ2UiLCJkZWZhdWx0IiwiX19lc01vZHVsZSIsImFzc2lnbiIsIm1vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(shared)/./node_modules/next/dist/client/components/static-generation-async-storage.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fs3-bucket%2F%5Bid%5D%2Froute&page=%2Fapi%2Fs3-bucket%2F%5Bid%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fs3-bucket%2F%5Bid%5D%2Froute.ts&appDir=%2FUsers%2FVlad%2FDocuments%2Fprojects%2Ffood-blog%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2FVlad%2FDocuments%2Fprojects%2Ffood-blog&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!"));
module.exports = __webpack_exports__;

})();